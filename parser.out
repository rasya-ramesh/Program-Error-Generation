Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> start
Rule 1     start -> translation_unit
Rule 2     translation_unit -> external_declaration
Rule 3     translation_unit -> translation_unit external_declaration
Rule 4     external_declaration -> function_definition
Rule 5     external_declaration -> declaration
Rule 6     function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 7     function_definition -> declaration_specifiers declarator compound_statement
Rule 8     declaration_list -> declaration
Rule 9     declaration_list -> declaration_list declaration
Rule 10    primary_expression -> IDENTIFIER
Rule 11    primary_expression -> constant
Rule 12    primary_expression -> string
Rule 13    primary_expression -> LPAREN expression RPAREN
Rule 14    primary_expression -> generic_selection
Rule 15    primary_expression -> NUMBER
Rule 16    constant -> I_CONSTANT
Rule 17    constant -> F_CONSTANT
Rule 18    enumeration_constant -> IDENTIFIER
Rule 19    string -> STRING_LITERAL
Rule 20    string -> FUNC_NAME
Rule 21    generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
Rule 22    generic_assoc_list -> generic_association
Rule 23    generic_assoc_list -> generic_assoc_list COMMA generic_association
Rule 24    generic_association -> type_name COLON assignment_expression
Rule 25    generic_association -> DEFAULT COLON assignment_expression
Rule 26    postfix_expression -> primary_expression
Rule 27    postfix_expression -> postfix_expression RSQUARE expression LSQUARE
Rule 28    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 29    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 30    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 31    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 32    postfix_expression -> postfix_expression INC_OP
Rule 33    postfix_expression -> postfix_expression DEC_OP
Rule 34    postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
Rule 35    argument_expression_list -> assignment_expression
Rule 36    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 37    unary_expression -> postfix_expression
Rule 38    unary_expression -> INC_OP unary_expression
Rule 39    unary_expression -> DEC_OP unary_expression
Rule 40    unary_expression -> unary_oper cast_expression
Rule 41    unary_expression -> SIZEOF unary_expression
Rule 42    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 43    unary_expression -> ALIGNOF LPAREN type_name RPAREN
Rule 44    unary_oper -> AMP
Rule 45    unary_oper -> TIMES
Rule 46    unary_oper -> PLUS
Rule 47    unary_oper -> MINUS
Rule 48    unary_oper -> TILDE
Rule 49    unary_oper -> NOT
Rule 50    cast_expression -> unary_expression
Rule 51    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 52    multiplicative_expression -> cast_expression
Rule 53    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 54    multiplicative_expression -> multiplicative_expression DIVIDES cast_expression
Rule 55    multiplicative_expression -> multiplicative_expression MODULUS cast_expression
Rule 56    additive_expression -> multiplicative_expression
Rule 57    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 58    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 59    shift_expression -> additive_expression
Rule 60    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 61    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 62    relational_expression -> shift_expression
Rule 63    relational_expression -> relational_expression LT_OP shift_expression
Rule 64    relational_expression -> relational_expression GT_OP shift_expression
Rule 65    relational_expression -> relational_expression LE_OP shift_expression
Rule 66    relational_expression -> relational_expression GE_OP shift_expression
Rule 67    equality_expression -> relational_expression
Rule 68    equality_expression -> equality_expression EQ_OP relational_expression
Rule 69    equality_expression -> equality_expression NE_OP relational_expression
Rule 70    and_expression -> equality_expression
Rule 71    and_expression -> and_expression AMP equality_expression
Rule 72    exclusive_or_expression -> and_expression
Rule 73    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 74    inclusive_or_expression -> exclusive_or_expression
Rule 75    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 76    logical_and_expression -> inclusive_or_expression
Rule 77    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 78    logical_or_expression -> logical_and_expression
Rule 79    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 80    conditional_expression -> logical_or_expression
Rule 81    conditional_expression -> logical_or_expression QMARK expression COLON conditional_expression
Rule 82    assignment_expression -> conditional_expression
Rule 83    assignment_expression -> unary_expression assignment_oper assignment_expression
Rule 84    assignment_oper -> EQUALS
Rule 85    assignment_oper -> MUL_ASSIGN
Rule 86    assignment_oper -> DIV_ASSIGN
Rule 87    assignment_oper -> MOD_ASSIGN
Rule 88    assignment_oper -> ADD_ASSIGN
Rule 89    assignment_oper -> SUB_ASSIGN
Rule 90    assignment_oper -> LEFT_ASSIGN
Rule 91    assignment_oper -> RIGHT_ASSIGN
Rule 92    assignment_oper -> AND_ASSIGN
Rule 93    assignment_oper -> XOR_ASSIGN
Rule 94    assignment_oper -> OR_ASSIGN
Rule 95    expression -> assignment_expression
Rule 96    expression -> expression COMMA assignment_expression
Rule 97    constant_expression -> conditional_expression
Rule 98    declaration -> declaration_specifiers SCOLON
Rule 99    declaration -> declaration_specifiers init_declarator_list SCOLON
Rule 100   declaration -> static_assert_declaration
Rule 101   declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 102   declaration_specifiers -> storage_class_specifier
Rule 103   declaration_specifiers -> type_specifier declaration_specifiers
Rule 104   declaration_specifiers -> type_specifier
Rule 105   declaration_specifiers -> type_qualifier declaration_specifiers
Rule 106   declaration_specifiers -> type_qualifier
Rule 107   declaration_specifiers -> function_specifier declaration_specifiers
Rule 108   declaration_specifiers -> function_specifier
Rule 109   declaration_specifiers -> alignment_specifier declaration_specifiers
Rule 110   declaration_specifiers -> alignment_specifier
Rule 111   declaration_specifiers -> <empty>
Rule 112   init_declarator_list -> init_declarator
Rule 113   init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 114   init_declarator -> declarator EQUALS initializer
Rule 115   init_declarator -> declarator
Rule 116   storage_class_specifier -> TYPEDEF
Rule 117   storage_class_specifier -> EXTERN
Rule 118   storage_class_specifier -> STATIC
Rule 119   storage_class_specifier -> THREAD_LOCAL
Rule 120   storage_class_specifier -> AUTO
Rule 121   storage_class_specifier -> REGISTER
Rule 122   type_specifier -> VOID
Rule 123   type_specifier -> CHAR
Rule 124   type_specifier -> SHORT
Rule 125   type_specifier -> INT
Rule 126   type_specifier -> LONG
Rule 127   type_specifier -> FLOAT
Rule 128   type_specifier -> DOUBLE
Rule 129   type_specifier -> SIGNED
Rule 130   type_specifier -> UNSIGNED
Rule 131   type_specifier -> BOOL
Rule 132   type_specifier -> COMPLEX
Rule 133   type_specifier -> IMAGINARY
Rule 134   type_specifier -> atomic_type_specifier
Rule 135   type_specifier -> struct_or_union_specifier
Rule 136   type_specifier -> enum_specifier
Rule 137   struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN
Rule 138   struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
Rule 139   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 140   struct_or_union -> STRUCT
Rule 141   struct_or_union -> UNION
Rule 142   struct_declaration_list -> struct_declaration
Rule 143   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 144   struct_declaration -> specifier_qualifier_list SCOLON
Rule 145   struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON
Rule 146   struct_declaration -> static_assert_declaration
Rule 147   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 148   specifier_qualifier_list -> type_specifier
Rule 149   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 150   specifier_qualifier_list -> type_qualifier
Rule 151   struct_declarator_list -> struct_declarator
Rule 152   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 153   struct_declarator -> COLON constant_expression
Rule 154   struct_declarator -> declarator COLON constant_expression
Rule 155   struct_declarator -> declarator
Rule 156   enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN
Rule 157   enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN
Rule 158   enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
Rule 159   enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
Rule 160   enum_specifier -> ENUM IDENTIFIER
Rule 161   enumerator_list -> enumerator
Rule 162   enumerator_list -> enumerator_list COMMA enumerator
Rule 163   enumerator -> enumeration_constant EQUALS constant_expression
Rule 164   enumerator -> enumeration_constant
Rule 165   atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN
Rule 166   type_qualifier -> CONST
Rule 167   type_qualifier -> VOLATILE
Rule 168   type_qualifier -> ATOMIC
Rule 169   function_specifier -> NORETURN
Rule 170   alignment_specifier -> ALIGNAS LPAREN type_name RPAREN
Rule 171   alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN
Rule 172   declarator -> pointer direct_declarator
Rule 173   declarator -> direct_declarator
Rule 174   direct_declarator -> IDENTIFIER
Rule 175   direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE
Rule 176   direct_declarator -> LPAREN declarator RPAREN
Rule 177   direct_declarator -> direct_declarator RSQUARE LSQUARE
Rule 178   direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE
Rule 179   direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
Rule 180   direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE
Rule 181   direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
Rule 182   direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
Rule 183   direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
Rule 184   direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE
Rule 185   direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE
Rule 186   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 187   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 188   direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 189   pointer -> TIMES type_qualifier_list pointer
Rule 190   pointer -> TIMES type_qualifier_list
Rule 191   pointer -> TIMES pointer
Rule 192   pointer -> TIMES
Rule 193   type_qualifier_list -> type_qualifier
Rule 194   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 195   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 196   parameter_type_list -> parameter_list
Rule 197   parameter_list -> parameter_declaration
Rule 198   parameter_list -> parameter_list COMMA parameter_declaration
Rule 199   parameter_declaration -> declaration_specifiers declarator
Rule 200   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 201   parameter_declaration -> declaration_specifiers
Rule 202   identifier_list -> IDENTIFIER
Rule 203   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 204   type_name -> specifier_qualifier_list abstract_declarator
Rule 205   type_name -> specifier_qualifier_list
Rule 206   abstract_declarator -> pointer direct_abstract_declarator
Rule 207   abstract_declarator -> pointer
Rule 208   abstract_declarator -> direct_abstract_declarator
Rule 209   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 210   direct_abstract_declarator -> RSQUARE LSQUARE
Rule 211   direct_abstract_declarator -> RSQUARE TIMES LSQUARE
Rule 212   direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
Rule 213   direct_abstract_declarator -> RSQUARE STATIC assignment_expression LSQUARE
Rule 214   direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
Rule 215   direct_abstract_declarator -> RSQUARE type_qualifier_list assignment_expression LSQUARE
Rule 216   direct_abstract_declarator -> RSQUARE type_qualifier_list LSQUARE
Rule 217   direct_abstract_declarator -> RSQUARE assignment_expression LSQUARE
Rule 218   direct_abstract_declarator -> direct_abstract_declarator RSQUARE LSQUARE
Rule 219   direct_abstract_declarator -> direct_abstract_declarator RSQUARE TIMES LSQUARE
Rule 220   direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
Rule 221   direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE
Rule 222   direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
Rule 223   direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
Rule 224   direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE
Rule 225   direct_abstract_declarator -> direct_abstract_declarator RSQUARE assignment_expression LSQUARE
Rule 226   direct_abstract_declarator -> LPAREN RPAREN
Rule 227   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 228   direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN
Rule 229   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 230   initializer -> LFPAREN initializer_list RFPAREN
Rule 231   initializer -> LFPAREN initializer_list COMMA RFPAREN
Rule 232   initializer -> assignment_expression
Rule 233   initializer_list -> designation initializer
Rule 234   initializer_list -> initializer
Rule 235   initializer_list -> initializer_list COMMA designation initializer
Rule 236   initializer_list -> initializer_list COMMA initializer
Rule 237   designation -> designator_list EQUALS
Rule 238   designator_list -> designator
Rule 239   designator_list -> designator_list designator
Rule 240   designator -> RSQUARE constant_expression LSQUARE
Rule 241   static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
Rule 242   statement -> labeled_statement
Rule 243   statement -> compound_statement
Rule 244   statement -> expression_statement
Rule 245   statement -> selection_statement
Rule 246   statement -> iteration_statement
Rule 247   statement -> jump_statement
Rule 248   labeled_statement -> IDENTIFIER COLON statement
Rule 249   labeled_statement -> CASE constant_expression COLON statement
Rule 250   labeled_statement -> DEFAULT COLON statement
Rule 251   compound_statement -> LFPAREN RFPAREN
Rule 252   compound_statement -> LFPAREN block_item_list RFPAREN
Rule 253   block_item_list -> block_item
Rule 254   block_item_list -> block_item_list block_item
Rule 255   block_item -> declaration
Rule 256   block_item -> statement
Rule 257   expression_statement -> SCOLON
Rule 258   expression_statement -> expression SCOLON
Rule 259   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 260   selection_statement -> IF LPAREN expression RPAREN statement
Rule 261   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 262   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 263   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON
Rule 264   iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 265   iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 266   iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement
Rule 267   iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement
Rule 268   jump_statement -> GOTO IDENTIFIER SCOLON
Rule 269   jump_statement -> CONTINUE SCOLON
Rule 270   jump_statement -> BREAK SCOLON
Rule 271   jump_statement -> RETURN SCOLON
Rule 272   jump_statement -> RETURN expression SCOLON
Rule 273   empty -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 88
ALIGNAS              : 170 171
ALIGNOF              : 43
AMP                  : 44 71
AND_ASSIGN           : 92
AND_OP               : 77
ATOMIC               : 165 168
AUTO                 : 120
BOOL                 : 131
BREAK                : 270
CASE                 : 249
CHAR                 : 123
COLON                : 24 25 81 153 154 248 249 250
COMMA                : 21 23 34 36 96 113 152 157 159 162 195 198 203 231 235 236 241
COMPLEX              : 132
CONST                : 166
CONTINUE             : 269
DEC_OP               : 33 39
DEFAULT              : 25 250
DIVIDES              : 54
DIV_ASSIGN           : 86
DO                   : 263
DOT                  : 30
DOUBLE               : 128
ELLIPSIS             : 195
ELSE                 : 259
ENUM                 : 156 157 158 159 160
EQUALS               : 84 114 163 237
EQ_OP                : 68
EXTERN               : 117
FLOAT                : 127
FOR                  : 264 265 266 267
FUNC_NAME            : 20
F_CONSTANT           : 17
GENERIC              : 21
GE_OP                : 66
GOTO                 : 268
GT_OP                : 64
IDENTIFIER           : 10 18 30 31 138 139 158 159 160 174 175 202 203 248 268
IF                   : 259 260
IMAGINARY            : 133
INC_OP               : 32 38
INT                  : 125
I_CONSTANT           : 16
LEFT_ASSIGN          : 90
LEFT_OP              : 60
LE_OP                : 65
LFPAREN              : 34 34 137 138 156 157 158 159 230 231 251 252
LONG                 : 126
LPAREN               : 13 21 28 29 34 34 42 43 51 165 170 171 176 186 187 188 209 226 227 228 229 241 259 260 261 262 263 264 265 266 267
LSQUARE              : 27 175 177 178 179 180 181 182 183 184 185 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 240
LT_OP                : 63
MINUS                : 47 58
MODULUS              : 55
MOD_ASSIGN           : 87
MUL_ASSIGN           : 85
NEWLINE              : 
NE_OP                : 69
NORETURN             : 169
NOT                  : 49
NUMBER               : 15 175
OR                   : 75
OR_ASSIGN            : 94
OR_OP                : 79
PLUS                 : 46 57
PTR_OP               : 31
QMARK                : 81
REGISTER             : 121
RETURN               : 271 272
RFPAREN              : 34 34 137 138 156 157 158 159 230 231 251 252
RIGHT_ASSIGN         : 91
RIGHT_OP             : 61
RPAREN               : 13 21 28 29 34 34 42 43 51 165 170 171 176 186 187 188 209 226 227 228 229 241 259 260 261 262 263 264 265 266 267
RSQUARE              : 27 175 177 178 179 180 181 182 183 184 185 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 240
SCOLON               : 98 99 144 145 241 257 258 263 268 269 270 271 272
SHORT                : 124
SIGNED               : 129
SIZEOF               : 41 42
STATIC               : 118 179 180 182 212 213 214 220 221 223
STATIC_ASSERT        : 241
STRING_LITERAL       : 19 241
STRUCT               : 140
SUB_ASSIGN           : 89
SWITCH               : 261
THREAD_LOCAL         : 119
TILDE                : 48
TIMES                : 45 53 178 181 189 190 191 192 211 219
TYPEDEF              : 116
UNION                : 141
UNSIGNED             : 130
VOID                 : 122
VOLATILE             : 167
WHILE                : 262 263
XOR                  : 73
XOR_ASSIGN           : 93
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 200 204 209
additive_expression  : 57 58 59 60 61
alignment_specifier  : 109 110
and_expression       : 71 72 73
argument_expression_list : 29 36
assignment_expression : 21 24 25 35 36 83 95 96 179 180 182 183 185 212 213 214 215 217 220 221 222 223 225 232
assignment_oper      : 83
atomic_type_specifier : 134
block_item           : 253 254
block_item_list      : 252 254
cast_expression      : 40 51 52 53 54 55
compound_statement   : 6 7 243
conditional_expression : 81 82 97
constant             : 11
constant_expression  : 153 154 163 171 240 241 249
declaration          : 5 8 9 255 266 267
declaration_list     : 6 9
declaration_specifiers : 6 7 98 99 101 103 105 107 109 199 200 201
declarator           : 6 7 114 115 154 155 176 199
designation          : 233 235
designator           : 238 239
designator_list      : 237 239
direct_abstract_declarator : 206 208 218 219 220 221 222 223 224 225 228 229
direct_declarator    : 172 173 177 178 179 180 181 182 183 184 185 186 187 188
empty                : 
enum_specifier       : 136
enumeration_constant : 163 164
enumerator           : 161 162
enumerator_list      : 156 157 158 159 162
equality_expression  : 68 69 70 71
exclusive_or_expression : 73 74 75
expression           : 13 27 81 96 258 259 260 261 262 263 265 267 272
expression_statement : 244 264 264 265 265 266 267
external_declaration : 2 3
function_definition  : 4
function_specifier   : 107 108
generic_assoc_list   : 21 23
generic_association  : 22 23
generic_selection    : 14
identifier_list      : 188 203
inclusive_or_expression : 75 76 77
init_declarator      : 112 113
init_declarator_list : 99 113
initializer          : 114 233 234 235 236
initializer_list     : 34 34 230 231 235 236
iteration_statement  : 246
jump_statement       : 247
labeled_statement    : 242
logical_and_expression : 77 78 79
logical_or_expression : 79 80 81
multiplicative_expression : 53 54 55 56 57 58
parameter_declaration : 197 198
parameter_list       : 195 196 198
parameter_type_list  : 186 227 229
pointer              : 172 189 191 206 207
postfix_expression   : 27 28 29 30 31 32 33 37
primary_expression   : 26
relational_expression : 63 64 65 66 67 68 69
selection_statement  : 245
shift_expression     : 60 61 62 63 64 65 66
specifier_qualifier_list : 144 145 147 149 204 205
start                : 0
statement            : 248 249 250 256 259 259 260 261 262 263 264 265 266 267
static_assert_declaration : 100 146
storage_class_specifier : 101 102
string               : 12
struct_declaration   : 142 143
struct_declaration_list : 137 138 143
struct_declarator    : 151 152
struct_declarator_list : 145 152
struct_or_union      : 137 138 139
struct_or_union_specifier : 135
translation_unit     : 1 3
type_name            : 24 34 34 42 43 51 165 170
type_qualifier       : 105 106 149 150 193 194
type_qualifier_list  : 179 181 182 183 184 189 190 194 212 214 215 216 220 222 223 224
type_specifier       : 103 104 147 148
unary_expression     : 38 39 41 50 83
unary_oper           : 40

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . translation_unit
    (2) translation_unit -> . external_declaration
    (3) translation_unit -> . translation_unit external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (7) function_definition -> . declaration_specifiers declarator compound_statement
    (98) declaration -> . declaration_specifiers SCOLON
    (99) declaration -> . declaration_specifiers init_declarator_list SCOLON
    (100) declaration -> . static_assert_declaration
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    SCOLON          reduce using rule 111 (declaration_specifiers -> .)
    TIMES           reduce using rule 111 (declaration_specifiers -> .)
    IDENTIFIER      reduce using rule 111 (declaration_specifiers -> .)
    LPAREN          reduce using rule 111 (declaration_specifiers -> .)
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    start                          shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    declaration_specifiers         shift and go to state 6
    static_assert_declaration      shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 1

    (0) S' -> start .



state 2

    (1) start -> translation_unit .
    (3) translation_unit -> translation_unit . external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (7) function_definition -> . declaration_specifiers declarator compound_statement
    (98) declaration -> . declaration_specifiers SCOLON
    (99) declaration -> . declaration_specifiers init_declarator_list SCOLON
    (100) declaration -> . static_assert_declaration
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    $end            reduce using rule 1 (start -> translation_unit .)
    SCOLON          reduce using rule 111 (declaration_specifiers -> .)
    TIMES           reduce using rule 111 (declaration_specifiers -> .)
    IDENTIFIER      reduce using rule 111 (declaration_specifiers -> .)
    LPAREN          reduce using rule 111 (declaration_specifiers -> .)
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    external_declaration           shift and go to state 44
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    declaration_specifiers         shift and go to state 6
    static_assert_declaration      shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 3

    (2) translation_unit -> external_declaration .

    STATIC_ASSERT   reduce using rule 2 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 2 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> external_declaration .)
    THREAD_LOCAL    reduce using rule 2 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> external_declaration .)
    INT             reduce using rule 2 (translation_unit -> external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> external_declaration .)
    COMPLEX         reduce using rule 2 (translation_unit -> external_declaration .)
    IMAGINARY       reduce using rule 2 (translation_unit -> external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> external_declaration .)
    ATOMIC          reduce using rule 2 (translation_unit -> external_declaration .)
    NORETURN        reduce using rule 2 (translation_unit -> external_declaration .)
    ALIGNAS         reduce using rule 2 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> external_declaration .)
    SCOLON          reduce using rule 2 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 2 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 2 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> external_declaration .)
    $end            reduce using rule 2 (translation_unit -> external_declaration .)


state 4

    (4) external_declaration -> function_definition .

    STATIC_ASSERT   reduce using rule 4 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 4 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 4 (external_declaration -> function_definition .)
    STATIC          reduce using rule 4 (external_declaration -> function_definition .)
    THREAD_LOCAL    reduce using rule 4 (external_declaration -> function_definition .)
    AUTO            reduce using rule 4 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 4 (external_declaration -> function_definition .)
    VOID            reduce using rule 4 (external_declaration -> function_definition .)
    CHAR            reduce using rule 4 (external_declaration -> function_definition .)
    SHORT           reduce using rule 4 (external_declaration -> function_definition .)
    INT             reduce using rule 4 (external_declaration -> function_definition .)
    LONG            reduce using rule 4 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 4 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 4 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 4 (external_declaration -> function_definition .)
    BOOL            reduce using rule 4 (external_declaration -> function_definition .)
    COMPLEX         reduce using rule 4 (external_declaration -> function_definition .)
    IMAGINARY       reduce using rule 4 (external_declaration -> function_definition .)
    CONST           reduce using rule 4 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 4 (external_declaration -> function_definition .)
    ATOMIC          reduce using rule 4 (external_declaration -> function_definition .)
    NORETURN        reduce using rule 4 (external_declaration -> function_definition .)
    ALIGNAS         reduce using rule 4 (external_declaration -> function_definition .)
    ENUM            reduce using rule 4 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 4 (external_declaration -> function_definition .)
    UNION           reduce using rule 4 (external_declaration -> function_definition .)
    SCOLON          reduce using rule 4 (external_declaration -> function_definition .)
    TIMES           reduce using rule 4 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 4 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (external_declaration -> function_definition .)
    $end            reduce using rule 4 (external_declaration -> function_definition .)


state 5

    (5) external_declaration -> declaration .

    STATIC_ASSERT   reduce using rule 5 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 5 (external_declaration -> declaration .)
    EXTERN          reduce using rule 5 (external_declaration -> declaration .)
    STATIC          reduce using rule 5 (external_declaration -> declaration .)
    THREAD_LOCAL    reduce using rule 5 (external_declaration -> declaration .)
    AUTO            reduce using rule 5 (external_declaration -> declaration .)
    REGISTER        reduce using rule 5 (external_declaration -> declaration .)
    VOID            reduce using rule 5 (external_declaration -> declaration .)
    CHAR            reduce using rule 5 (external_declaration -> declaration .)
    SHORT           reduce using rule 5 (external_declaration -> declaration .)
    INT             reduce using rule 5 (external_declaration -> declaration .)
    LONG            reduce using rule 5 (external_declaration -> declaration .)
    FLOAT           reduce using rule 5 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 5 (external_declaration -> declaration .)
    SIGNED          reduce using rule 5 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 5 (external_declaration -> declaration .)
    BOOL            reduce using rule 5 (external_declaration -> declaration .)
    COMPLEX         reduce using rule 5 (external_declaration -> declaration .)
    IMAGINARY       reduce using rule 5 (external_declaration -> declaration .)
    CONST           reduce using rule 5 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 5 (external_declaration -> declaration .)
    ATOMIC          reduce using rule 5 (external_declaration -> declaration .)
    NORETURN        reduce using rule 5 (external_declaration -> declaration .)
    ALIGNAS         reduce using rule 5 (external_declaration -> declaration .)
    ENUM            reduce using rule 5 (external_declaration -> declaration .)
    STRUCT          reduce using rule 5 (external_declaration -> declaration .)
    UNION           reduce using rule 5 (external_declaration -> declaration .)
    SCOLON          reduce using rule 5 (external_declaration -> declaration .)
    TIMES           reduce using rule 5 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 5 (external_declaration -> declaration .)
    LPAREN          reduce using rule 5 (external_declaration -> declaration .)
    $end            reduce using rule 5 (external_declaration -> declaration .)


state 6

    (6) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (7) function_definition -> declaration_specifiers . declarator compound_statement
    (98) declaration -> declaration_specifiers . SCOLON
    (99) declaration -> declaration_specifiers . init_declarator_list SCOLON
    (172) declarator -> . pointer direct_declarator
    (173) declarator -> . direct_declarator
    (112) init_declarator_list -> . init_declarator
    (113) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (114) init_declarator -> . declarator EQUALS initializer
    (115) init_declarator -> . declarator

    SCOLON          shift and go to state 46
    TIMES           shift and go to state 51
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 53

    declarator                     shift and go to state 45
    init_declarator_list           shift and go to state 47
    pointer                        shift and go to state 48
    direct_declarator              shift and go to state 49
    init_declarator                shift and go to state 50

state 7

    (100) declaration -> static_assert_declaration .

    STATIC_ASSERT   reduce using rule 100 (declaration -> static_assert_declaration .)
    TYPEDEF         reduce using rule 100 (declaration -> static_assert_declaration .)
    EXTERN          reduce using rule 100 (declaration -> static_assert_declaration .)
    STATIC          reduce using rule 100 (declaration -> static_assert_declaration .)
    THREAD_LOCAL    reduce using rule 100 (declaration -> static_assert_declaration .)
    AUTO            reduce using rule 100 (declaration -> static_assert_declaration .)
    REGISTER        reduce using rule 100 (declaration -> static_assert_declaration .)
    VOID            reduce using rule 100 (declaration -> static_assert_declaration .)
    CHAR            reduce using rule 100 (declaration -> static_assert_declaration .)
    SHORT           reduce using rule 100 (declaration -> static_assert_declaration .)
    INT             reduce using rule 100 (declaration -> static_assert_declaration .)
    LONG            reduce using rule 100 (declaration -> static_assert_declaration .)
    FLOAT           reduce using rule 100 (declaration -> static_assert_declaration .)
    DOUBLE          reduce using rule 100 (declaration -> static_assert_declaration .)
    SIGNED          reduce using rule 100 (declaration -> static_assert_declaration .)
    UNSIGNED        reduce using rule 100 (declaration -> static_assert_declaration .)
    BOOL            reduce using rule 100 (declaration -> static_assert_declaration .)
    COMPLEX         reduce using rule 100 (declaration -> static_assert_declaration .)
    IMAGINARY       reduce using rule 100 (declaration -> static_assert_declaration .)
    CONST           reduce using rule 100 (declaration -> static_assert_declaration .)
    VOLATILE        reduce using rule 100 (declaration -> static_assert_declaration .)
    ATOMIC          reduce using rule 100 (declaration -> static_assert_declaration .)
    NORETURN        reduce using rule 100 (declaration -> static_assert_declaration .)
    ALIGNAS         reduce using rule 100 (declaration -> static_assert_declaration .)
    ENUM            reduce using rule 100 (declaration -> static_assert_declaration .)
    STRUCT          reduce using rule 100 (declaration -> static_assert_declaration .)
    UNION           reduce using rule 100 (declaration -> static_assert_declaration .)
    SCOLON          reduce using rule 100 (declaration -> static_assert_declaration .)
    TIMES           reduce using rule 100 (declaration -> static_assert_declaration .)
    IDENTIFIER      reduce using rule 100 (declaration -> static_assert_declaration .)
    LPAREN          reduce using rule 100 (declaration -> static_assert_declaration .)
    $end            reduce using rule 100 (declaration -> static_assert_declaration .)
    LFPAREN         reduce using rule 100 (declaration -> static_assert_declaration .)
    RFPAREN         reduce using rule 100 (declaration -> static_assert_declaration .)
    CASE            reduce using rule 100 (declaration -> static_assert_declaration .)
    DEFAULT         reduce using rule 100 (declaration -> static_assert_declaration .)
    IF              reduce using rule 100 (declaration -> static_assert_declaration .)
    SWITCH          reduce using rule 100 (declaration -> static_assert_declaration .)
    WHILE           reduce using rule 100 (declaration -> static_assert_declaration .)
    DO              reduce using rule 100 (declaration -> static_assert_declaration .)
    FOR             reduce using rule 100 (declaration -> static_assert_declaration .)
    GOTO            reduce using rule 100 (declaration -> static_assert_declaration .)
    CONTINUE        reduce using rule 100 (declaration -> static_assert_declaration .)
    BREAK           reduce using rule 100 (declaration -> static_assert_declaration .)
    RETURN          reduce using rule 100 (declaration -> static_assert_declaration .)
    INC_OP          reduce using rule 100 (declaration -> static_assert_declaration .)
    DEC_OP          reduce using rule 100 (declaration -> static_assert_declaration .)
    SIZEOF          reduce using rule 100 (declaration -> static_assert_declaration .)
    ALIGNOF         reduce using rule 100 (declaration -> static_assert_declaration .)
    AMP             reduce using rule 100 (declaration -> static_assert_declaration .)
    PLUS            reduce using rule 100 (declaration -> static_assert_declaration .)
    MINUS           reduce using rule 100 (declaration -> static_assert_declaration .)
    TILDE           reduce using rule 100 (declaration -> static_assert_declaration .)
    NOT             reduce using rule 100 (declaration -> static_assert_declaration .)
    NUMBER          reduce using rule 100 (declaration -> static_assert_declaration .)
    I_CONSTANT      reduce using rule 100 (declaration -> static_assert_declaration .)
    F_CONSTANT      reduce using rule 100 (declaration -> static_assert_declaration .)
    STRING_LITERAL  reduce using rule 100 (declaration -> static_assert_declaration .)
    FUNC_NAME       reduce using rule 100 (declaration -> static_assert_declaration .)
    GENERIC         reduce using rule 100 (declaration -> static_assert_declaration .)


state 8

    (101) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (102) declaration_specifiers -> storage_class_specifier .
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! reduce/reduce conflict for SCOLON resolved using rule 102 (declaration_specifiers -> storage_class_specifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 102 (declaration_specifiers -> storage_class_specifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 102 (declaration_specifiers -> storage_class_specifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 102 (declaration_specifiers -> storage_class_specifier .)
  ! reduce/reduce conflict for RSQUARE resolved using rule 102 (declaration_specifiers -> storage_class_specifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 102 (declaration_specifiers -> storage_class_specifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 102 (declaration_specifiers -> storage_class_specifier .)
    SCOLON          reduce using rule 102 (declaration_specifiers -> storage_class_specifier .)
    TIMES           reduce using rule 102 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 102 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 102 (declaration_specifiers -> storage_class_specifier .)
    RSQUARE         reduce using rule 102 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 102 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 102 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! SCOLON          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RSQUARE         [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! COMMA           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    storage_class_specifier        shift and go to state 8
    declaration_specifiers         shift and go to state 54
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 9

    (103) declaration_specifiers -> type_specifier . declaration_specifiers
    (104) declaration_specifiers -> type_specifier .
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! reduce/reduce conflict for SCOLON resolved using rule 104 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 104 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 104 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 104 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for RSQUARE resolved using rule 104 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 104 (declaration_specifiers -> type_specifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 104 (declaration_specifiers -> type_specifier .)
    SCOLON          reduce using rule 104 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 104 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 104 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 104 (declaration_specifiers -> type_specifier .)
    RSQUARE         reduce using rule 104 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 104 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 104 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! SCOLON          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RSQUARE         [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! COMMA           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    type_specifier                 shift and go to state 9
    declaration_specifiers         shift and go to state 55
    storage_class_specifier        shift and go to state 8
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 10

    (105) declaration_specifiers -> type_qualifier . declaration_specifiers
    (106) declaration_specifiers -> type_qualifier .
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! reduce/reduce conflict for SCOLON resolved using rule 106 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 106 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 106 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 106 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for RSQUARE resolved using rule 106 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 106 (declaration_specifiers -> type_qualifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 106 (declaration_specifiers -> type_qualifier .)
    SCOLON          reduce using rule 106 (declaration_specifiers -> type_qualifier .)
    TIMES           reduce using rule 106 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 106 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 106 (declaration_specifiers -> type_qualifier .)
    RSQUARE         reduce using rule 106 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 106 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 106 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! SCOLON          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RSQUARE         [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! COMMA           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    type_qualifier                 shift and go to state 10
    declaration_specifiers         shift and go to state 56
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 11

    (107) declaration_specifiers -> function_specifier . declaration_specifiers
    (108) declaration_specifiers -> function_specifier .
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! reduce/reduce conflict for SCOLON resolved using rule 108 (declaration_specifiers -> function_specifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 108 (declaration_specifiers -> function_specifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 108 (declaration_specifiers -> function_specifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 108 (declaration_specifiers -> function_specifier .)
  ! reduce/reduce conflict for RSQUARE resolved using rule 108 (declaration_specifiers -> function_specifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 108 (declaration_specifiers -> function_specifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 108 (declaration_specifiers -> function_specifier .)
    SCOLON          reduce using rule 108 (declaration_specifiers -> function_specifier .)
    TIMES           reduce using rule 108 (declaration_specifiers -> function_specifier .)
    IDENTIFIER      reduce using rule 108 (declaration_specifiers -> function_specifier .)
    LPAREN          reduce using rule 108 (declaration_specifiers -> function_specifier .)
    RSQUARE         reduce using rule 108 (declaration_specifiers -> function_specifier .)
    COMMA           reduce using rule 108 (declaration_specifiers -> function_specifier .)
    RPAREN          reduce using rule 108 (declaration_specifiers -> function_specifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! SCOLON          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RSQUARE         [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! COMMA           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    function_specifier             shift and go to state 11
    declaration_specifiers         shift and go to state 57
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 12

    (109) declaration_specifiers -> alignment_specifier . declaration_specifiers
    (110) declaration_specifiers -> alignment_specifier .
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! reduce/reduce conflict for SCOLON resolved using rule 110 (declaration_specifiers -> alignment_specifier .)
  ! reduce/reduce conflict for TIMES resolved using rule 110 (declaration_specifiers -> alignment_specifier .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 110 (declaration_specifiers -> alignment_specifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 110 (declaration_specifiers -> alignment_specifier .)
  ! reduce/reduce conflict for RSQUARE resolved using rule 110 (declaration_specifiers -> alignment_specifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 110 (declaration_specifiers -> alignment_specifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 110 (declaration_specifiers -> alignment_specifier .)
    SCOLON          reduce using rule 110 (declaration_specifiers -> alignment_specifier .)
    TIMES           reduce using rule 110 (declaration_specifiers -> alignment_specifier .)
    IDENTIFIER      reduce using rule 110 (declaration_specifiers -> alignment_specifier .)
    LPAREN          reduce using rule 110 (declaration_specifiers -> alignment_specifier .)
    RSQUARE         reduce using rule 110 (declaration_specifiers -> alignment_specifier .)
    COMMA           reduce using rule 110 (declaration_specifiers -> alignment_specifier .)
    RPAREN          reduce using rule 110 (declaration_specifiers -> alignment_specifier .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! SCOLON          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RSQUARE         [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! COMMA           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    alignment_specifier            shift and go to state 12
    declaration_specifiers         shift and go to state 58
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 13

    (241) static_assert_declaration -> STATIC_ASSERT . LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON

    LPAREN          shift and go to state 59


state 14

    (116) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    THREAD_LOCAL    reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    COMPLEX         reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    IMAGINARY       reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    ATOMIC          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    NORETURN        reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    ALIGNAS         reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    SCOLON          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    RSQUARE         reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 116 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 116 (storage_class_specifier -> TYPEDEF .)


state 15

    (117) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 117 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 117 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 117 (storage_class_specifier -> EXTERN .)
    THREAD_LOCAL    reduce using rule 117 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 117 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 117 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 117 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 117 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 117 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 117 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 117 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 117 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 117 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 117 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 117 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 117 (storage_class_specifier -> EXTERN .)
    COMPLEX         reduce using rule 117 (storage_class_specifier -> EXTERN .)
    IMAGINARY       reduce using rule 117 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 117 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 117 (storage_class_specifier -> EXTERN .)
    ATOMIC          reduce using rule 117 (storage_class_specifier -> EXTERN .)
    NORETURN        reduce using rule 117 (storage_class_specifier -> EXTERN .)
    ALIGNAS         reduce using rule 117 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 117 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 117 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 117 (storage_class_specifier -> EXTERN .)
    SCOLON          reduce using rule 117 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 117 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 117 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 117 (storage_class_specifier -> EXTERN .)
    RSQUARE         reduce using rule 117 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 117 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 117 (storage_class_specifier -> EXTERN .)


state 16

    (118) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 118 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 118 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 118 (storage_class_specifier -> STATIC .)
    THREAD_LOCAL    reduce using rule 118 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 118 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 118 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 118 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 118 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 118 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 118 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 118 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 118 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 118 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 118 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 118 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 118 (storage_class_specifier -> STATIC .)
    COMPLEX         reduce using rule 118 (storage_class_specifier -> STATIC .)
    IMAGINARY       reduce using rule 118 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 118 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 118 (storage_class_specifier -> STATIC .)
    ATOMIC          reduce using rule 118 (storage_class_specifier -> STATIC .)
    NORETURN        reduce using rule 118 (storage_class_specifier -> STATIC .)
    ALIGNAS         reduce using rule 118 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 118 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 118 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 118 (storage_class_specifier -> STATIC .)
    SCOLON          reduce using rule 118 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 118 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 118 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 118 (storage_class_specifier -> STATIC .)
    RSQUARE         reduce using rule 118 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 118 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 118 (storage_class_specifier -> STATIC .)


state 17

    (119) storage_class_specifier -> THREAD_LOCAL .

    TYPEDEF         reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    EXTERN          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    STATIC          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    THREAD_LOCAL    reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    AUTO            reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    REGISTER        reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    VOID            reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    CHAR            reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    SHORT           reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    INT             reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    LONG            reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    FLOAT           reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    DOUBLE          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    SIGNED          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    UNSIGNED        reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    BOOL            reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    COMPLEX         reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    IMAGINARY       reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    CONST           reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    VOLATILE        reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    ATOMIC          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    NORETURN        reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    ALIGNAS         reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    ENUM            reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    STRUCT          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    UNION           reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    SCOLON          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    TIMES           reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    IDENTIFIER      reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    LPAREN          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    RSQUARE         reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    COMMA           reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)
    RPAREN          reduce using rule 119 (storage_class_specifier -> THREAD_LOCAL .)


state 18

    (120) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 120 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 120 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 120 (storage_class_specifier -> AUTO .)
    THREAD_LOCAL    reduce using rule 120 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 120 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 120 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 120 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 120 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 120 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 120 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 120 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 120 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 120 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 120 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 120 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 120 (storage_class_specifier -> AUTO .)
    COMPLEX         reduce using rule 120 (storage_class_specifier -> AUTO .)
    IMAGINARY       reduce using rule 120 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 120 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 120 (storage_class_specifier -> AUTO .)
    ATOMIC          reduce using rule 120 (storage_class_specifier -> AUTO .)
    NORETURN        reduce using rule 120 (storage_class_specifier -> AUTO .)
    ALIGNAS         reduce using rule 120 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 120 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 120 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 120 (storage_class_specifier -> AUTO .)
    SCOLON          reduce using rule 120 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 120 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 120 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 120 (storage_class_specifier -> AUTO .)
    RSQUARE         reduce using rule 120 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 120 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 120 (storage_class_specifier -> AUTO .)


state 19

    (121) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 121 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 121 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 121 (storage_class_specifier -> REGISTER .)
    THREAD_LOCAL    reduce using rule 121 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 121 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 121 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 121 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 121 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 121 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 121 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 121 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 121 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 121 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 121 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 121 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 121 (storage_class_specifier -> REGISTER .)
    COMPLEX         reduce using rule 121 (storage_class_specifier -> REGISTER .)
    IMAGINARY       reduce using rule 121 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 121 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 121 (storage_class_specifier -> REGISTER .)
    ATOMIC          reduce using rule 121 (storage_class_specifier -> REGISTER .)
    NORETURN        reduce using rule 121 (storage_class_specifier -> REGISTER .)
    ALIGNAS         reduce using rule 121 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 121 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 121 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 121 (storage_class_specifier -> REGISTER .)
    SCOLON          reduce using rule 121 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 121 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 121 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 121 (storage_class_specifier -> REGISTER .)
    RSQUARE         reduce using rule 121 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 121 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 121 (storage_class_specifier -> REGISTER .)


state 20

    (122) type_specifier -> VOID .

    TYPEDEF         reduce using rule 122 (type_specifier -> VOID .)
    EXTERN          reduce using rule 122 (type_specifier -> VOID .)
    STATIC          reduce using rule 122 (type_specifier -> VOID .)
    THREAD_LOCAL    reduce using rule 122 (type_specifier -> VOID .)
    AUTO            reduce using rule 122 (type_specifier -> VOID .)
    REGISTER        reduce using rule 122 (type_specifier -> VOID .)
    VOID            reduce using rule 122 (type_specifier -> VOID .)
    CHAR            reduce using rule 122 (type_specifier -> VOID .)
    SHORT           reduce using rule 122 (type_specifier -> VOID .)
    INT             reduce using rule 122 (type_specifier -> VOID .)
    LONG            reduce using rule 122 (type_specifier -> VOID .)
    FLOAT           reduce using rule 122 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 122 (type_specifier -> VOID .)
    SIGNED          reduce using rule 122 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 122 (type_specifier -> VOID .)
    BOOL            reduce using rule 122 (type_specifier -> VOID .)
    COMPLEX         reduce using rule 122 (type_specifier -> VOID .)
    IMAGINARY       reduce using rule 122 (type_specifier -> VOID .)
    CONST           reduce using rule 122 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 122 (type_specifier -> VOID .)
    ATOMIC          reduce using rule 122 (type_specifier -> VOID .)
    NORETURN        reduce using rule 122 (type_specifier -> VOID .)
    ALIGNAS         reduce using rule 122 (type_specifier -> VOID .)
    ENUM            reduce using rule 122 (type_specifier -> VOID .)
    STRUCT          reduce using rule 122 (type_specifier -> VOID .)
    UNION           reduce using rule 122 (type_specifier -> VOID .)
    SCOLON          reduce using rule 122 (type_specifier -> VOID .)
    TIMES           reduce using rule 122 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 122 (type_specifier -> VOID .)
    LPAREN          reduce using rule 122 (type_specifier -> VOID .)
    RSQUARE         reduce using rule 122 (type_specifier -> VOID .)
    COMMA           reduce using rule 122 (type_specifier -> VOID .)
    RPAREN          reduce using rule 122 (type_specifier -> VOID .)
    COLON           reduce using rule 122 (type_specifier -> VOID .)


state 21

    (123) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 123 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 123 (type_specifier -> CHAR .)
    STATIC          reduce using rule 123 (type_specifier -> CHAR .)
    THREAD_LOCAL    reduce using rule 123 (type_specifier -> CHAR .)
    AUTO            reduce using rule 123 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 123 (type_specifier -> CHAR .)
    VOID            reduce using rule 123 (type_specifier -> CHAR .)
    CHAR            reduce using rule 123 (type_specifier -> CHAR .)
    SHORT           reduce using rule 123 (type_specifier -> CHAR .)
    INT             reduce using rule 123 (type_specifier -> CHAR .)
    LONG            reduce using rule 123 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 123 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 123 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 123 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 123 (type_specifier -> CHAR .)
    BOOL            reduce using rule 123 (type_specifier -> CHAR .)
    COMPLEX         reduce using rule 123 (type_specifier -> CHAR .)
    IMAGINARY       reduce using rule 123 (type_specifier -> CHAR .)
    CONST           reduce using rule 123 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 123 (type_specifier -> CHAR .)
    ATOMIC          reduce using rule 123 (type_specifier -> CHAR .)
    NORETURN        reduce using rule 123 (type_specifier -> CHAR .)
    ALIGNAS         reduce using rule 123 (type_specifier -> CHAR .)
    ENUM            reduce using rule 123 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 123 (type_specifier -> CHAR .)
    UNION           reduce using rule 123 (type_specifier -> CHAR .)
    SCOLON          reduce using rule 123 (type_specifier -> CHAR .)
    TIMES           reduce using rule 123 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 123 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 123 (type_specifier -> CHAR .)
    RSQUARE         reduce using rule 123 (type_specifier -> CHAR .)
    COMMA           reduce using rule 123 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 123 (type_specifier -> CHAR .)
    COLON           reduce using rule 123 (type_specifier -> CHAR .)


state 22

    (124) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 124 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 124 (type_specifier -> SHORT .)
    STATIC          reduce using rule 124 (type_specifier -> SHORT .)
    THREAD_LOCAL    reduce using rule 124 (type_specifier -> SHORT .)
    AUTO            reduce using rule 124 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 124 (type_specifier -> SHORT .)
    VOID            reduce using rule 124 (type_specifier -> SHORT .)
    CHAR            reduce using rule 124 (type_specifier -> SHORT .)
    SHORT           reduce using rule 124 (type_specifier -> SHORT .)
    INT             reduce using rule 124 (type_specifier -> SHORT .)
    LONG            reduce using rule 124 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 124 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 124 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 124 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 124 (type_specifier -> SHORT .)
    BOOL            reduce using rule 124 (type_specifier -> SHORT .)
    COMPLEX         reduce using rule 124 (type_specifier -> SHORT .)
    IMAGINARY       reduce using rule 124 (type_specifier -> SHORT .)
    CONST           reduce using rule 124 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 124 (type_specifier -> SHORT .)
    ATOMIC          reduce using rule 124 (type_specifier -> SHORT .)
    NORETURN        reduce using rule 124 (type_specifier -> SHORT .)
    ALIGNAS         reduce using rule 124 (type_specifier -> SHORT .)
    ENUM            reduce using rule 124 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 124 (type_specifier -> SHORT .)
    UNION           reduce using rule 124 (type_specifier -> SHORT .)
    SCOLON          reduce using rule 124 (type_specifier -> SHORT .)
    TIMES           reduce using rule 124 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 124 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 124 (type_specifier -> SHORT .)
    RSQUARE         reduce using rule 124 (type_specifier -> SHORT .)
    COMMA           reduce using rule 124 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 124 (type_specifier -> SHORT .)
    COLON           reduce using rule 124 (type_specifier -> SHORT .)


state 23

    (125) type_specifier -> INT .

    TYPEDEF         reduce using rule 125 (type_specifier -> INT .)
    EXTERN          reduce using rule 125 (type_specifier -> INT .)
    STATIC          reduce using rule 125 (type_specifier -> INT .)
    THREAD_LOCAL    reduce using rule 125 (type_specifier -> INT .)
    AUTO            reduce using rule 125 (type_specifier -> INT .)
    REGISTER        reduce using rule 125 (type_specifier -> INT .)
    VOID            reduce using rule 125 (type_specifier -> INT .)
    CHAR            reduce using rule 125 (type_specifier -> INT .)
    SHORT           reduce using rule 125 (type_specifier -> INT .)
    INT             reduce using rule 125 (type_specifier -> INT .)
    LONG            reduce using rule 125 (type_specifier -> INT .)
    FLOAT           reduce using rule 125 (type_specifier -> INT .)
    DOUBLE          reduce using rule 125 (type_specifier -> INT .)
    SIGNED          reduce using rule 125 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 125 (type_specifier -> INT .)
    BOOL            reduce using rule 125 (type_specifier -> INT .)
    COMPLEX         reduce using rule 125 (type_specifier -> INT .)
    IMAGINARY       reduce using rule 125 (type_specifier -> INT .)
    CONST           reduce using rule 125 (type_specifier -> INT .)
    VOLATILE        reduce using rule 125 (type_specifier -> INT .)
    ATOMIC          reduce using rule 125 (type_specifier -> INT .)
    NORETURN        reduce using rule 125 (type_specifier -> INT .)
    ALIGNAS         reduce using rule 125 (type_specifier -> INT .)
    ENUM            reduce using rule 125 (type_specifier -> INT .)
    STRUCT          reduce using rule 125 (type_specifier -> INT .)
    UNION           reduce using rule 125 (type_specifier -> INT .)
    SCOLON          reduce using rule 125 (type_specifier -> INT .)
    TIMES           reduce using rule 125 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 125 (type_specifier -> INT .)
    LPAREN          reduce using rule 125 (type_specifier -> INT .)
    RSQUARE         reduce using rule 125 (type_specifier -> INT .)
    COMMA           reduce using rule 125 (type_specifier -> INT .)
    RPAREN          reduce using rule 125 (type_specifier -> INT .)
    COLON           reduce using rule 125 (type_specifier -> INT .)


state 24

    (126) type_specifier -> LONG .

    TYPEDEF         reduce using rule 126 (type_specifier -> LONG .)
    EXTERN          reduce using rule 126 (type_specifier -> LONG .)
    STATIC          reduce using rule 126 (type_specifier -> LONG .)
    THREAD_LOCAL    reduce using rule 126 (type_specifier -> LONG .)
    AUTO            reduce using rule 126 (type_specifier -> LONG .)
    REGISTER        reduce using rule 126 (type_specifier -> LONG .)
    VOID            reduce using rule 126 (type_specifier -> LONG .)
    CHAR            reduce using rule 126 (type_specifier -> LONG .)
    SHORT           reduce using rule 126 (type_specifier -> LONG .)
    INT             reduce using rule 126 (type_specifier -> LONG .)
    LONG            reduce using rule 126 (type_specifier -> LONG .)
    FLOAT           reduce using rule 126 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 126 (type_specifier -> LONG .)
    SIGNED          reduce using rule 126 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 126 (type_specifier -> LONG .)
    BOOL            reduce using rule 126 (type_specifier -> LONG .)
    COMPLEX         reduce using rule 126 (type_specifier -> LONG .)
    IMAGINARY       reduce using rule 126 (type_specifier -> LONG .)
    CONST           reduce using rule 126 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 126 (type_specifier -> LONG .)
    ATOMIC          reduce using rule 126 (type_specifier -> LONG .)
    NORETURN        reduce using rule 126 (type_specifier -> LONG .)
    ALIGNAS         reduce using rule 126 (type_specifier -> LONG .)
    ENUM            reduce using rule 126 (type_specifier -> LONG .)
    STRUCT          reduce using rule 126 (type_specifier -> LONG .)
    UNION           reduce using rule 126 (type_specifier -> LONG .)
    SCOLON          reduce using rule 126 (type_specifier -> LONG .)
    TIMES           reduce using rule 126 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 126 (type_specifier -> LONG .)
    LPAREN          reduce using rule 126 (type_specifier -> LONG .)
    RSQUARE         reduce using rule 126 (type_specifier -> LONG .)
    COMMA           reduce using rule 126 (type_specifier -> LONG .)
    RPAREN          reduce using rule 126 (type_specifier -> LONG .)
    COLON           reduce using rule 126 (type_specifier -> LONG .)


state 25

    (127) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 127 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 127 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 127 (type_specifier -> FLOAT .)
    THREAD_LOCAL    reduce using rule 127 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 127 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 127 (type_specifier -> FLOAT .)
    VOID            reduce using rule 127 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 127 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 127 (type_specifier -> FLOAT .)
    INT             reduce using rule 127 (type_specifier -> FLOAT .)
    LONG            reduce using rule 127 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 127 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 127 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 127 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 127 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 127 (type_specifier -> FLOAT .)
    COMPLEX         reduce using rule 127 (type_specifier -> FLOAT .)
    IMAGINARY       reduce using rule 127 (type_specifier -> FLOAT .)
    CONST           reduce using rule 127 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 127 (type_specifier -> FLOAT .)
    ATOMIC          reduce using rule 127 (type_specifier -> FLOAT .)
    NORETURN        reduce using rule 127 (type_specifier -> FLOAT .)
    ALIGNAS         reduce using rule 127 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 127 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 127 (type_specifier -> FLOAT .)
    UNION           reduce using rule 127 (type_specifier -> FLOAT .)
    SCOLON          reduce using rule 127 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 127 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 127 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 127 (type_specifier -> FLOAT .)
    RSQUARE         reduce using rule 127 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 127 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 127 (type_specifier -> FLOAT .)
    COLON           reduce using rule 127 (type_specifier -> FLOAT .)


state 26

    (128) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 128 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 128 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 128 (type_specifier -> DOUBLE .)
    THREAD_LOCAL    reduce using rule 128 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 128 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 128 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 128 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 128 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 128 (type_specifier -> DOUBLE .)
    INT             reduce using rule 128 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 128 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 128 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 128 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 128 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 128 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 128 (type_specifier -> DOUBLE .)
    COMPLEX         reduce using rule 128 (type_specifier -> DOUBLE .)
    IMAGINARY       reduce using rule 128 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 128 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 128 (type_specifier -> DOUBLE .)
    ATOMIC          reduce using rule 128 (type_specifier -> DOUBLE .)
    NORETURN        reduce using rule 128 (type_specifier -> DOUBLE .)
    ALIGNAS         reduce using rule 128 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 128 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 128 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 128 (type_specifier -> DOUBLE .)
    SCOLON          reduce using rule 128 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 128 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 128 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 128 (type_specifier -> DOUBLE .)
    RSQUARE         reduce using rule 128 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 128 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 128 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 128 (type_specifier -> DOUBLE .)


state 27

    (129) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 129 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 129 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 129 (type_specifier -> SIGNED .)
    THREAD_LOCAL    reduce using rule 129 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 129 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 129 (type_specifier -> SIGNED .)
    VOID            reduce using rule 129 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 129 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 129 (type_specifier -> SIGNED .)
    INT             reduce using rule 129 (type_specifier -> SIGNED .)
    LONG            reduce using rule 129 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 129 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 129 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 129 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 129 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 129 (type_specifier -> SIGNED .)
    COMPLEX         reduce using rule 129 (type_specifier -> SIGNED .)
    IMAGINARY       reduce using rule 129 (type_specifier -> SIGNED .)
    CONST           reduce using rule 129 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 129 (type_specifier -> SIGNED .)
    ATOMIC          reduce using rule 129 (type_specifier -> SIGNED .)
    NORETURN        reduce using rule 129 (type_specifier -> SIGNED .)
    ALIGNAS         reduce using rule 129 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 129 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 129 (type_specifier -> SIGNED .)
    UNION           reduce using rule 129 (type_specifier -> SIGNED .)
    SCOLON          reduce using rule 129 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 129 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 129 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 129 (type_specifier -> SIGNED .)
    RSQUARE         reduce using rule 129 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 129 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 129 (type_specifier -> SIGNED .)
    COLON           reduce using rule 129 (type_specifier -> SIGNED .)


state 28

    (130) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 130 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 130 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 130 (type_specifier -> UNSIGNED .)
    THREAD_LOCAL    reduce using rule 130 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 130 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 130 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 130 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 130 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 130 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 130 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 130 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 130 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 130 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 130 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 130 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 130 (type_specifier -> UNSIGNED .)
    COMPLEX         reduce using rule 130 (type_specifier -> UNSIGNED .)
    IMAGINARY       reduce using rule 130 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 130 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 130 (type_specifier -> UNSIGNED .)
    ATOMIC          reduce using rule 130 (type_specifier -> UNSIGNED .)
    NORETURN        reduce using rule 130 (type_specifier -> UNSIGNED .)
    ALIGNAS         reduce using rule 130 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 130 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 130 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 130 (type_specifier -> UNSIGNED .)
    SCOLON          reduce using rule 130 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 130 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 130 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 130 (type_specifier -> UNSIGNED .)
    RSQUARE         reduce using rule 130 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 130 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 130 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 130 (type_specifier -> UNSIGNED .)


state 29

    (131) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 131 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 131 (type_specifier -> BOOL .)
    STATIC          reduce using rule 131 (type_specifier -> BOOL .)
    THREAD_LOCAL    reduce using rule 131 (type_specifier -> BOOL .)
    AUTO            reduce using rule 131 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 131 (type_specifier -> BOOL .)
    VOID            reduce using rule 131 (type_specifier -> BOOL .)
    CHAR            reduce using rule 131 (type_specifier -> BOOL .)
    SHORT           reduce using rule 131 (type_specifier -> BOOL .)
    INT             reduce using rule 131 (type_specifier -> BOOL .)
    LONG            reduce using rule 131 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 131 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 131 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 131 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 131 (type_specifier -> BOOL .)
    BOOL            reduce using rule 131 (type_specifier -> BOOL .)
    COMPLEX         reduce using rule 131 (type_specifier -> BOOL .)
    IMAGINARY       reduce using rule 131 (type_specifier -> BOOL .)
    CONST           reduce using rule 131 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 131 (type_specifier -> BOOL .)
    ATOMIC          reduce using rule 131 (type_specifier -> BOOL .)
    NORETURN        reduce using rule 131 (type_specifier -> BOOL .)
    ALIGNAS         reduce using rule 131 (type_specifier -> BOOL .)
    ENUM            reduce using rule 131 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 131 (type_specifier -> BOOL .)
    UNION           reduce using rule 131 (type_specifier -> BOOL .)
    SCOLON          reduce using rule 131 (type_specifier -> BOOL .)
    TIMES           reduce using rule 131 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 131 (type_specifier -> BOOL .)
    LPAREN          reduce using rule 131 (type_specifier -> BOOL .)
    RSQUARE         reduce using rule 131 (type_specifier -> BOOL .)
    COMMA           reduce using rule 131 (type_specifier -> BOOL .)
    RPAREN          reduce using rule 131 (type_specifier -> BOOL .)
    COLON           reduce using rule 131 (type_specifier -> BOOL .)


state 30

    (132) type_specifier -> COMPLEX .

    TYPEDEF         reduce using rule 132 (type_specifier -> COMPLEX .)
    EXTERN          reduce using rule 132 (type_specifier -> COMPLEX .)
    STATIC          reduce using rule 132 (type_specifier -> COMPLEX .)
    THREAD_LOCAL    reduce using rule 132 (type_specifier -> COMPLEX .)
    AUTO            reduce using rule 132 (type_specifier -> COMPLEX .)
    REGISTER        reduce using rule 132 (type_specifier -> COMPLEX .)
    VOID            reduce using rule 132 (type_specifier -> COMPLEX .)
    CHAR            reduce using rule 132 (type_specifier -> COMPLEX .)
    SHORT           reduce using rule 132 (type_specifier -> COMPLEX .)
    INT             reduce using rule 132 (type_specifier -> COMPLEX .)
    LONG            reduce using rule 132 (type_specifier -> COMPLEX .)
    FLOAT           reduce using rule 132 (type_specifier -> COMPLEX .)
    DOUBLE          reduce using rule 132 (type_specifier -> COMPLEX .)
    SIGNED          reduce using rule 132 (type_specifier -> COMPLEX .)
    UNSIGNED        reduce using rule 132 (type_specifier -> COMPLEX .)
    BOOL            reduce using rule 132 (type_specifier -> COMPLEX .)
    COMPLEX         reduce using rule 132 (type_specifier -> COMPLEX .)
    IMAGINARY       reduce using rule 132 (type_specifier -> COMPLEX .)
    CONST           reduce using rule 132 (type_specifier -> COMPLEX .)
    VOLATILE        reduce using rule 132 (type_specifier -> COMPLEX .)
    ATOMIC          reduce using rule 132 (type_specifier -> COMPLEX .)
    NORETURN        reduce using rule 132 (type_specifier -> COMPLEX .)
    ALIGNAS         reduce using rule 132 (type_specifier -> COMPLEX .)
    ENUM            reduce using rule 132 (type_specifier -> COMPLEX .)
    STRUCT          reduce using rule 132 (type_specifier -> COMPLEX .)
    UNION           reduce using rule 132 (type_specifier -> COMPLEX .)
    SCOLON          reduce using rule 132 (type_specifier -> COMPLEX .)
    TIMES           reduce using rule 132 (type_specifier -> COMPLEX .)
    IDENTIFIER      reduce using rule 132 (type_specifier -> COMPLEX .)
    LPAREN          reduce using rule 132 (type_specifier -> COMPLEX .)
    RSQUARE         reduce using rule 132 (type_specifier -> COMPLEX .)
    COMMA           reduce using rule 132 (type_specifier -> COMPLEX .)
    RPAREN          reduce using rule 132 (type_specifier -> COMPLEX .)
    COLON           reduce using rule 132 (type_specifier -> COMPLEX .)


state 31

    (133) type_specifier -> IMAGINARY .

    TYPEDEF         reduce using rule 133 (type_specifier -> IMAGINARY .)
    EXTERN          reduce using rule 133 (type_specifier -> IMAGINARY .)
    STATIC          reduce using rule 133 (type_specifier -> IMAGINARY .)
    THREAD_LOCAL    reduce using rule 133 (type_specifier -> IMAGINARY .)
    AUTO            reduce using rule 133 (type_specifier -> IMAGINARY .)
    REGISTER        reduce using rule 133 (type_specifier -> IMAGINARY .)
    VOID            reduce using rule 133 (type_specifier -> IMAGINARY .)
    CHAR            reduce using rule 133 (type_specifier -> IMAGINARY .)
    SHORT           reduce using rule 133 (type_specifier -> IMAGINARY .)
    INT             reduce using rule 133 (type_specifier -> IMAGINARY .)
    LONG            reduce using rule 133 (type_specifier -> IMAGINARY .)
    FLOAT           reduce using rule 133 (type_specifier -> IMAGINARY .)
    DOUBLE          reduce using rule 133 (type_specifier -> IMAGINARY .)
    SIGNED          reduce using rule 133 (type_specifier -> IMAGINARY .)
    UNSIGNED        reduce using rule 133 (type_specifier -> IMAGINARY .)
    BOOL            reduce using rule 133 (type_specifier -> IMAGINARY .)
    COMPLEX         reduce using rule 133 (type_specifier -> IMAGINARY .)
    IMAGINARY       reduce using rule 133 (type_specifier -> IMAGINARY .)
    CONST           reduce using rule 133 (type_specifier -> IMAGINARY .)
    VOLATILE        reduce using rule 133 (type_specifier -> IMAGINARY .)
    ATOMIC          reduce using rule 133 (type_specifier -> IMAGINARY .)
    NORETURN        reduce using rule 133 (type_specifier -> IMAGINARY .)
    ALIGNAS         reduce using rule 133 (type_specifier -> IMAGINARY .)
    ENUM            reduce using rule 133 (type_specifier -> IMAGINARY .)
    STRUCT          reduce using rule 133 (type_specifier -> IMAGINARY .)
    UNION           reduce using rule 133 (type_specifier -> IMAGINARY .)
    SCOLON          reduce using rule 133 (type_specifier -> IMAGINARY .)
    TIMES           reduce using rule 133 (type_specifier -> IMAGINARY .)
    IDENTIFIER      reduce using rule 133 (type_specifier -> IMAGINARY .)
    LPAREN          reduce using rule 133 (type_specifier -> IMAGINARY .)
    RSQUARE         reduce using rule 133 (type_specifier -> IMAGINARY .)
    COMMA           reduce using rule 133 (type_specifier -> IMAGINARY .)
    RPAREN          reduce using rule 133 (type_specifier -> IMAGINARY .)
    COLON           reduce using rule 133 (type_specifier -> IMAGINARY .)


state 32

    (134) type_specifier -> atomic_type_specifier .

    TYPEDEF         reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    EXTERN          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    STATIC          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    THREAD_LOCAL    reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    AUTO            reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    REGISTER        reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    VOID            reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    CHAR            reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    SHORT           reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    INT             reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    LONG            reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    FLOAT           reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    DOUBLE          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    SIGNED          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    UNSIGNED        reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    BOOL            reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    COMPLEX         reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    IMAGINARY       reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    CONST           reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    VOLATILE        reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    ATOMIC          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    NORETURN        reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    ALIGNAS         reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    ENUM            reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    STRUCT          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    UNION           reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    SCOLON          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    TIMES           reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    IDENTIFIER      reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    LPAREN          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    RSQUARE         reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    COMMA           reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    RPAREN          reduce using rule 134 (type_specifier -> atomic_type_specifier .)
    COLON           reduce using rule 134 (type_specifier -> atomic_type_specifier .)


state 33

    (135) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    THREAD_LOCAL    reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    COMPLEX         reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    IMAGINARY       reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    ATOMIC          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    NORETURN        reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    ALIGNAS         reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    SCOLON          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    RSQUARE         reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 135 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 135 (type_specifier -> struct_or_union_specifier .)


state 34

    (136) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 136 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 136 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 136 (type_specifier -> enum_specifier .)
    THREAD_LOCAL    reduce using rule 136 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 136 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 136 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 136 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 136 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 136 (type_specifier -> enum_specifier .)
    INT             reduce using rule 136 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 136 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 136 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 136 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 136 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 136 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 136 (type_specifier -> enum_specifier .)
    COMPLEX         reduce using rule 136 (type_specifier -> enum_specifier .)
    IMAGINARY       reduce using rule 136 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 136 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 136 (type_specifier -> enum_specifier .)
    ATOMIC          reduce using rule 136 (type_specifier -> enum_specifier .)
    NORETURN        reduce using rule 136 (type_specifier -> enum_specifier .)
    ALIGNAS         reduce using rule 136 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 136 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 136 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 136 (type_specifier -> enum_specifier .)
    SCOLON          reduce using rule 136 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 136 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 136 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 136 (type_specifier -> enum_specifier .)
    RSQUARE         reduce using rule 136 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 136 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 136 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 136 (type_specifier -> enum_specifier .)


state 35

    (166) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 166 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 166 (type_qualifier -> CONST .)
    STATIC          reduce using rule 166 (type_qualifier -> CONST .)
    THREAD_LOCAL    reduce using rule 166 (type_qualifier -> CONST .)
    AUTO            reduce using rule 166 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 166 (type_qualifier -> CONST .)
    VOID            reduce using rule 166 (type_qualifier -> CONST .)
    CHAR            reduce using rule 166 (type_qualifier -> CONST .)
    SHORT           reduce using rule 166 (type_qualifier -> CONST .)
    INT             reduce using rule 166 (type_qualifier -> CONST .)
    LONG            reduce using rule 166 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 166 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 166 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 166 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 166 (type_qualifier -> CONST .)
    BOOL            reduce using rule 166 (type_qualifier -> CONST .)
    COMPLEX         reduce using rule 166 (type_qualifier -> CONST .)
    IMAGINARY       reduce using rule 166 (type_qualifier -> CONST .)
    CONST           reduce using rule 166 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 166 (type_qualifier -> CONST .)
    ATOMIC          reduce using rule 166 (type_qualifier -> CONST .)
    NORETURN        reduce using rule 166 (type_qualifier -> CONST .)
    ALIGNAS         reduce using rule 166 (type_qualifier -> CONST .)
    ENUM            reduce using rule 166 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 166 (type_qualifier -> CONST .)
    UNION           reduce using rule 166 (type_qualifier -> CONST .)
    SCOLON          reduce using rule 166 (type_qualifier -> CONST .)
    TIMES           reduce using rule 166 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 166 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 166 (type_qualifier -> CONST .)
    RSQUARE         reduce using rule 166 (type_qualifier -> CONST .)
    COMMA           reduce using rule 166 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 166 (type_qualifier -> CONST .)
    COLON           reduce using rule 166 (type_qualifier -> CONST .)
    LSQUARE         reduce using rule 166 (type_qualifier -> CONST .)
    INC_OP          reduce using rule 166 (type_qualifier -> CONST .)
    DEC_OP          reduce using rule 166 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 166 (type_qualifier -> CONST .)
    ALIGNOF         reduce using rule 166 (type_qualifier -> CONST .)
    AMP             reduce using rule 166 (type_qualifier -> CONST .)
    PLUS            reduce using rule 166 (type_qualifier -> CONST .)
    MINUS           reduce using rule 166 (type_qualifier -> CONST .)
    TILDE           reduce using rule 166 (type_qualifier -> CONST .)
    NOT             reduce using rule 166 (type_qualifier -> CONST .)
    NUMBER          reduce using rule 166 (type_qualifier -> CONST .)
    I_CONSTANT      reduce using rule 166 (type_qualifier -> CONST .)
    F_CONSTANT      reduce using rule 166 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 166 (type_qualifier -> CONST .)
    FUNC_NAME       reduce using rule 166 (type_qualifier -> CONST .)
    GENERIC         reduce using rule 166 (type_qualifier -> CONST .)


state 36

    (167) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 167 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 167 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 167 (type_qualifier -> VOLATILE .)
    THREAD_LOCAL    reduce using rule 167 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 167 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 167 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 167 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 167 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 167 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 167 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 167 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 167 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 167 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 167 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 167 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 167 (type_qualifier -> VOLATILE .)
    COMPLEX         reduce using rule 167 (type_qualifier -> VOLATILE .)
    IMAGINARY       reduce using rule 167 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 167 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 167 (type_qualifier -> VOLATILE .)
    ATOMIC          reduce using rule 167 (type_qualifier -> VOLATILE .)
    NORETURN        reduce using rule 167 (type_qualifier -> VOLATILE .)
    ALIGNAS         reduce using rule 167 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 167 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 167 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 167 (type_qualifier -> VOLATILE .)
    SCOLON          reduce using rule 167 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 167 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 167 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 167 (type_qualifier -> VOLATILE .)
    RSQUARE         reduce using rule 167 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 167 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 167 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 167 (type_qualifier -> VOLATILE .)
    LSQUARE         reduce using rule 167 (type_qualifier -> VOLATILE .)
    INC_OP          reduce using rule 167 (type_qualifier -> VOLATILE .)
    DEC_OP          reduce using rule 167 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 167 (type_qualifier -> VOLATILE .)
    ALIGNOF         reduce using rule 167 (type_qualifier -> VOLATILE .)
    AMP             reduce using rule 167 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 167 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 167 (type_qualifier -> VOLATILE .)
    TILDE           reduce using rule 167 (type_qualifier -> VOLATILE .)
    NOT             reduce using rule 167 (type_qualifier -> VOLATILE .)
    NUMBER          reduce using rule 167 (type_qualifier -> VOLATILE .)
    I_CONSTANT      reduce using rule 167 (type_qualifier -> VOLATILE .)
    F_CONSTANT      reduce using rule 167 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 167 (type_qualifier -> VOLATILE .)
    FUNC_NAME       reduce using rule 167 (type_qualifier -> VOLATILE .)
    GENERIC         reduce using rule 167 (type_qualifier -> VOLATILE .)


state 37

    (168) type_qualifier -> ATOMIC .
    (165) atomic_type_specifier -> ATOMIC . LPAREN type_name RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    TYPEDEF         reduce using rule 168 (type_qualifier -> ATOMIC .)
    EXTERN          reduce using rule 168 (type_qualifier -> ATOMIC .)
    STATIC          reduce using rule 168 (type_qualifier -> ATOMIC .)
    THREAD_LOCAL    reduce using rule 168 (type_qualifier -> ATOMIC .)
    AUTO            reduce using rule 168 (type_qualifier -> ATOMIC .)
    REGISTER        reduce using rule 168 (type_qualifier -> ATOMIC .)
    VOID            reduce using rule 168 (type_qualifier -> ATOMIC .)
    CHAR            reduce using rule 168 (type_qualifier -> ATOMIC .)
    SHORT           reduce using rule 168 (type_qualifier -> ATOMIC .)
    INT             reduce using rule 168 (type_qualifier -> ATOMIC .)
    LONG            reduce using rule 168 (type_qualifier -> ATOMIC .)
    FLOAT           reduce using rule 168 (type_qualifier -> ATOMIC .)
    DOUBLE          reduce using rule 168 (type_qualifier -> ATOMIC .)
    SIGNED          reduce using rule 168 (type_qualifier -> ATOMIC .)
    UNSIGNED        reduce using rule 168 (type_qualifier -> ATOMIC .)
    BOOL            reduce using rule 168 (type_qualifier -> ATOMIC .)
    COMPLEX         reduce using rule 168 (type_qualifier -> ATOMIC .)
    IMAGINARY       reduce using rule 168 (type_qualifier -> ATOMIC .)
    CONST           reduce using rule 168 (type_qualifier -> ATOMIC .)
    VOLATILE        reduce using rule 168 (type_qualifier -> ATOMIC .)
    ATOMIC          reduce using rule 168 (type_qualifier -> ATOMIC .)
    NORETURN        reduce using rule 168 (type_qualifier -> ATOMIC .)
    ALIGNAS         reduce using rule 168 (type_qualifier -> ATOMIC .)
    ENUM            reduce using rule 168 (type_qualifier -> ATOMIC .)
    STRUCT          reduce using rule 168 (type_qualifier -> ATOMIC .)
    UNION           reduce using rule 168 (type_qualifier -> ATOMIC .)
    SCOLON          reduce using rule 168 (type_qualifier -> ATOMIC .)
    TIMES           reduce using rule 168 (type_qualifier -> ATOMIC .)
    IDENTIFIER      reduce using rule 168 (type_qualifier -> ATOMIC .)
    RSQUARE         reduce using rule 168 (type_qualifier -> ATOMIC .)
    COMMA           reduce using rule 168 (type_qualifier -> ATOMIC .)
    RPAREN          reduce using rule 168 (type_qualifier -> ATOMIC .)
    COLON           reduce using rule 168 (type_qualifier -> ATOMIC .)
    LPAREN          shift and go to state 60

  ! LPAREN          [ reduce using rule 168 (type_qualifier -> ATOMIC .) ]


state 38

    (169) function_specifier -> NORETURN .

    TYPEDEF         reduce using rule 169 (function_specifier -> NORETURN .)
    EXTERN          reduce using rule 169 (function_specifier -> NORETURN .)
    STATIC          reduce using rule 169 (function_specifier -> NORETURN .)
    THREAD_LOCAL    reduce using rule 169 (function_specifier -> NORETURN .)
    AUTO            reduce using rule 169 (function_specifier -> NORETURN .)
    REGISTER        reduce using rule 169 (function_specifier -> NORETURN .)
    VOID            reduce using rule 169 (function_specifier -> NORETURN .)
    CHAR            reduce using rule 169 (function_specifier -> NORETURN .)
    SHORT           reduce using rule 169 (function_specifier -> NORETURN .)
    INT             reduce using rule 169 (function_specifier -> NORETURN .)
    LONG            reduce using rule 169 (function_specifier -> NORETURN .)
    FLOAT           reduce using rule 169 (function_specifier -> NORETURN .)
    DOUBLE          reduce using rule 169 (function_specifier -> NORETURN .)
    SIGNED          reduce using rule 169 (function_specifier -> NORETURN .)
    UNSIGNED        reduce using rule 169 (function_specifier -> NORETURN .)
    BOOL            reduce using rule 169 (function_specifier -> NORETURN .)
    COMPLEX         reduce using rule 169 (function_specifier -> NORETURN .)
    IMAGINARY       reduce using rule 169 (function_specifier -> NORETURN .)
    CONST           reduce using rule 169 (function_specifier -> NORETURN .)
    VOLATILE        reduce using rule 169 (function_specifier -> NORETURN .)
    ATOMIC          reduce using rule 169 (function_specifier -> NORETURN .)
    NORETURN        reduce using rule 169 (function_specifier -> NORETURN .)
    ALIGNAS         reduce using rule 169 (function_specifier -> NORETURN .)
    ENUM            reduce using rule 169 (function_specifier -> NORETURN .)
    STRUCT          reduce using rule 169 (function_specifier -> NORETURN .)
    UNION           reduce using rule 169 (function_specifier -> NORETURN .)
    SCOLON          reduce using rule 169 (function_specifier -> NORETURN .)
    TIMES           reduce using rule 169 (function_specifier -> NORETURN .)
    IDENTIFIER      reduce using rule 169 (function_specifier -> NORETURN .)
    LPAREN          reduce using rule 169 (function_specifier -> NORETURN .)
    RSQUARE         reduce using rule 169 (function_specifier -> NORETURN .)
    COMMA           reduce using rule 169 (function_specifier -> NORETURN .)
    RPAREN          reduce using rule 169 (function_specifier -> NORETURN .)


state 39

    (170) alignment_specifier -> ALIGNAS . LPAREN type_name RPAREN
    (171) alignment_specifier -> ALIGNAS . LPAREN constant_expression RPAREN

    LPAREN          shift and go to state 61


state 40

    (137) struct_or_union_specifier -> struct_or_union . LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> struct_or_union . IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    LFPAREN         shift and go to state 62
    IDENTIFIER      shift and go to state 63


state 41

    (156) enum_specifier -> ENUM . LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> ENUM . LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> ENUM . IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> ENUM . IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> ENUM . IDENTIFIER

    LFPAREN         shift and go to state 64
    IDENTIFIER      shift and go to state 65


state 42

    (140) struct_or_union -> STRUCT .

    LFPAREN         reduce using rule 140 (struct_or_union -> STRUCT .)
    IDENTIFIER      reduce using rule 140 (struct_or_union -> STRUCT .)


state 43

    (141) struct_or_union -> UNION .

    LFPAREN         reduce using rule 141 (struct_or_union -> UNION .)
    IDENTIFIER      reduce using rule 141 (struct_or_union -> UNION .)


state 44

    (3) translation_unit -> translation_unit external_declaration .

    STATIC_ASSERT   reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    THREAD_LOCAL    reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    COMPLEX         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    IMAGINARY       reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ATOMIC          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    NORETURN        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ALIGNAS         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SCOLON          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)


state 45

    (6) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (7) function_definition -> declaration_specifiers declarator . compound_statement
    (114) init_declarator -> declarator . EQUALS initializer
    (115) init_declarator -> declarator .
    (8) declaration_list -> . declaration
    (9) declaration_list -> . declaration_list declaration
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (98) declaration -> . declaration_specifiers SCOLON
    (99) declaration -> . declaration_specifiers init_declarator_list SCOLON
    (100) declaration -> . static_assert_declaration
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! reduce/reduce conflict for SCOLON resolved using rule 111 (declaration_specifiers -> .)
    EQUALS          shift and go to state 69
    COMMA           reduce using rule 115 (init_declarator -> declarator .)
    LFPAREN         shift and go to state 71
    SCOLON          reduce using rule 111 (declaration_specifiers -> .)
    TIMES           reduce using rule 111 (declaration_specifiers -> .)
    IDENTIFIER      reduce using rule 111 (declaration_specifiers -> .)
    LPAREN          reduce using rule 111 (declaration_specifiers -> .)
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! SCOLON          [ reduce using rule 115 (init_declarator -> declarator .) ]

    declaration_specifiers         shift and go to state 66
    declaration_list               shift and go to state 67
    compound_statement             shift and go to state 68
    declaration                    shift and go to state 70
    static_assert_declaration      shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 46

    (98) declaration -> declaration_specifiers SCOLON .

    STATIC_ASSERT   reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    TYPEDEF         reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    EXTERN          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    STATIC          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    THREAD_LOCAL    reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    AUTO            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    REGISTER        reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    VOID            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    CHAR            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    SHORT           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    INT             reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    LONG            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    FLOAT           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    DOUBLE          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    SIGNED          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    UNSIGNED        reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    BOOL            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    COMPLEX         reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    IMAGINARY       reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    CONST           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    VOLATILE        reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    ATOMIC          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    NORETURN        reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    ALIGNAS         reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    ENUM            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    STRUCT          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    UNION           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    SCOLON          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    TIMES           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    IDENTIFIER      reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    LPAREN          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    $end            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    LFPAREN         reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    RFPAREN         reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    CASE            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    DEFAULT         reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    IF              reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    SWITCH          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    WHILE           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    DO              reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    FOR             reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    GOTO            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    CONTINUE        reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    BREAK           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    RETURN          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    INC_OP          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    DEC_OP          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    SIZEOF          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    ALIGNOF         reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    AMP             reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    PLUS            reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    MINUS           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    TILDE           reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    NOT             reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    NUMBER          reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    I_CONSTANT      reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    F_CONSTANT      reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    STRING_LITERAL  reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    FUNC_NAME       reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)
    GENERIC         reduce using rule 98 (declaration -> declaration_specifiers SCOLON .)


state 47

    (99) declaration -> declaration_specifiers init_declarator_list . SCOLON
    (113) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SCOLON          shift and go to state 72
    COMMA           shift and go to state 73


state 48

    (172) declarator -> pointer . direct_declarator
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 53

    direct_declarator              shift and go to state 74

state 49

    (173) declarator -> direct_declarator .
    (177) direct_declarator -> direct_declarator . RSQUARE LSQUARE
    (178) direct_declarator -> direct_declarator . RSQUARE TIMES LSQUARE
    (179) direct_declarator -> direct_declarator . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> direct_declarator . RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> direct_declarator . RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> direct_declarator . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> direct_declarator . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> direct_declarator . RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> direct_declarator . RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> direct_declarator . LPAREN RPAREN
    (188) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUALS          reduce using rule 173 (declarator -> direct_declarator .)
    LFPAREN         reduce using rule 173 (declarator -> direct_declarator .)
    STATIC_ASSERT   reduce using rule 173 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 173 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 173 (declarator -> direct_declarator .)
    STATIC          reduce using rule 173 (declarator -> direct_declarator .)
    THREAD_LOCAL    reduce using rule 173 (declarator -> direct_declarator .)
    AUTO            reduce using rule 173 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 173 (declarator -> direct_declarator .)
    VOID            reduce using rule 173 (declarator -> direct_declarator .)
    CHAR            reduce using rule 173 (declarator -> direct_declarator .)
    SHORT           reduce using rule 173 (declarator -> direct_declarator .)
    INT             reduce using rule 173 (declarator -> direct_declarator .)
    LONG            reduce using rule 173 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 173 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 173 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 173 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 173 (declarator -> direct_declarator .)
    BOOL            reduce using rule 173 (declarator -> direct_declarator .)
    COMPLEX         reduce using rule 173 (declarator -> direct_declarator .)
    IMAGINARY       reduce using rule 173 (declarator -> direct_declarator .)
    CONST           reduce using rule 173 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 173 (declarator -> direct_declarator .)
    ATOMIC          reduce using rule 173 (declarator -> direct_declarator .)
    NORETURN        reduce using rule 173 (declarator -> direct_declarator .)
    ALIGNAS         reduce using rule 173 (declarator -> direct_declarator .)
    ENUM            reduce using rule 173 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 173 (declarator -> direct_declarator .)
    UNION           reduce using rule 173 (declarator -> direct_declarator .)
    SCOLON          reduce using rule 173 (declarator -> direct_declarator .)
    TIMES           reduce using rule 173 (declarator -> direct_declarator .)
    IDENTIFIER      reduce using rule 173 (declarator -> direct_declarator .)
    COMMA           reduce using rule 173 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 173 (declarator -> direct_declarator .)
    COLON           reduce using rule 173 (declarator -> direct_declarator .)
    RSQUARE         shift and go to state 75
    LPAREN          shift and go to state 76

  ! LPAREN          [ reduce using rule 173 (declarator -> direct_declarator .) ]


state 50

    (112) init_declarator_list -> init_declarator .

    SCOLON          reduce using rule 112 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 112 (init_declarator_list -> init_declarator .)


state 51

    (189) pointer -> TIMES . type_qualifier_list pointer
    (190) pointer -> TIMES . type_qualifier_list
    (191) pointer -> TIMES . pointer
    (192) pointer -> TIMES .
    (193) type_qualifier_list -> . type_qualifier
    (194) type_qualifier_list -> . type_qualifier_list type_qualifier
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC

    IDENTIFIER      reduce using rule 192 (pointer -> TIMES .)
    LPAREN          reduce using rule 192 (pointer -> TIMES .)
    RSQUARE         reduce using rule 192 (pointer -> TIMES .)
    RPAREN          reduce using rule 192 (pointer -> TIMES .)
    COLON           reduce using rule 192 (pointer -> TIMES .)
    COMMA           reduce using rule 192 (pointer -> TIMES .)
    TIMES           shift and go to state 51
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80

    type_qualifier_list            shift and go to state 77
    pointer                        shift and go to state 78
    type_qualifier                 shift and go to state 79

state 52

    (174) direct_declarator -> IDENTIFIER .
    (175) direct_declarator -> IDENTIFIER . LSQUARE NUMBER RSQUARE

    RSQUARE         reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    LPAREN          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    EQUALS          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    LFPAREN         reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    STATIC_ASSERT   reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    COMPLEX         reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    IMAGINARY       reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    ATOMIC          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    NORETURN        reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    ALIGNAS         reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    SCOLON          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    TIMES           reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    RPAREN          reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 174 (direct_declarator -> IDENTIFIER .)
    LSQUARE         shift and go to state 81


state 53

    (176) direct_declarator -> LPAREN . declarator RPAREN
    (172) declarator -> . pointer direct_declarator
    (173) declarator -> . direct_declarator
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    TIMES           shift and go to state 51
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 53

    declarator                     shift and go to state 82
    pointer                        shift and go to state 48
    direct_declarator              shift and go to state 49

state 54

    (101) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SCOLON          reduce using rule 101 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TIMES           reduce using rule 101 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 101 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 101 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RSQUARE         reduce using rule 101 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 101 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 101 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 55

    (103) declaration_specifiers -> type_specifier declaration_specifiers .

    SCOLON          reduce using rule 103 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TIMES           reduce using rule 103 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 103 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 103 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RSQUARE         reduce using rule 103 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 103 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 103 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 56

    (105) declaration_specifiers -> type_qualifier declaration_specifiers .

    SCOLON          reduce using rule 105 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    TIMES           reduce using rule 105 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 105 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 105 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RSQUARE         reduce using rule 105 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 105 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 105 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 57

    (107) declaration_specifiers -> function_specifier declaration_specifiers .

    SCOLON          reduce using rule 107 (declaration_specifiers -> function_specifier declaration_specifiers .)
    TIMES           reduce using rule 107 (declaration_specifiers -> function_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 107 (declaration_specifiers -> function_specifier declaration_specifiers .)
    LPAREN          reduce using rule 107 (declaration_specifiers -> function_specifier declaration_specifiers .)
    RSQUARE         reduce using rule 107 (declaration_specifiers -> function_specifier declaration_specifiers .)
    COMMA           reduce using rule 107 (declaration_specifiers -> function_specifier declaration_specifiers .)
    RPAREN          reduce using rule 107 (declaration_specifiers -> function_specifier declaration_specifiers .)


state 58

    (109) declaration_specifiers -> alignment_specifier declaration_specifiers .

    SCOLON          reduce using rule 109 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    TIMES           reduce using rule 109 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 109 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    LPAREN          reduce using rule 109 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    RSQUARE         reduce using rule 109 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    COMMA           reduce using rule 109 (declaration_specifiers -> alignment_specifier declaration_specifiers .)
    RPAREN          reduce using rule 109 (declaration_specifiers -> alignment_specifier declaration_specifiers .)


state 59

    (241) static_assert_declaration -> STATIC_ASSERT LPAREN . constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (97) constant_expression -> . conditional_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 84
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 60

    (165) atomic_type_specifier -> ATOMIC LPAREN . type_name RPAREN
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    type_name                      shift and go to state 121
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 61

    (170) alignment_specifier -> ALIGNAS LPAREN . type_name RPAREN
    (171) alignment_specifier -> ALIGNAS LPAREN . constant_expression RPAREN
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (97) constant_expression -> . conditional_expression
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43
    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 125
    constant_expression            shift and go to state 126
    specifier_qualifier_list       shift and go to state 122
    conditional_expression         shift and go to state 86
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    logical_or_expression          shift and go to state 87
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_and_expression         shift and go to state 88
    struct_or_union                shift and go to state 40
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 62

    (137) struct_or_union_specifier -> struct_or_union LFPAREN . struct_declaration_list RFPAREN
    (142) struct_declaration_list -> . struct_declaration
    (143) struct_declaration_list -> . struct_declaration_list struct_declaration
    (144) struct_declaration -> . specifier_qualifier_list SCOLON
    (145) struct_declaration -> . specifier_qualifier_list struct_declarator_list SCOLON
    (146) struct_declaration -> . static_assert_declaration
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 13
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    struct_or_union                shift and go to state 40
    struct_declaration_list        shift and go to state 127
    struct_declaration             shift and go to state 128
    specifier_qualifier_list       shift and go to state 129
    static_assert_declaration      shift and go to state 130
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34

state 63

    (138) struct_or_union_specifier -> struct_or_union IDENTIFIER . LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    LFPAREN         shift and go to state 131
    TYPEDEF         reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMPLEX         reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IMAGINARY       reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ATOMIC          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    NORETURN        reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ALIGNAS         reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SCOLON          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TIMES           reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LPAREN          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RSQUARE         reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RPAREN          reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 139 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 64

    (156) enum_specifier -> ENUM LFPAREN . enumerator_list RFPAREN
    (157) enum_specifier -> ENUM LFPAREN . enumerator_list COMMA RFPAREN
    (161) enumerator_list -> . enumerator
    (162) enumerator_list -> . enumerator_list COMMA enumerator
    (163) enumerator -> . enumeration_constant EQUALS constant_expression
    (164) enumerator -> . enumeration_constant
    (18) enumeration_constant -> . IDENTIFIER

    IDENTIFIER      shift and go to state 135

    enumerator_list                shift and go to state 132
    enumerator                     shift and go to state 133
    enumeration_constant           shift and go to state 134

state 65

    (158) enum_specifier -> ENUM IDENTIFIER . LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> ENUM IDENTIFIER . LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> ENUM IDENTIFIER .

    LFPAREN         shift and go to state 136
    TYPEDEF         reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    THREAD_LOCAL    reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    COMPLEX         reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    IMAGINARY       reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    ATOMIC          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    NORETURN        reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    ALIGNAS         reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    SCOLON          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    TIMES           reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    LPAREN          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    RSQUARE         reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    RPAREN          reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 160 (enum_specifier -> ENUM IDENTIFIER .)


state 66

    (98) declaration -> declaration_specifiers . SCOLON
    (99) declaration -> declaration_specifiers . init_declarator_list SCOLON
    (112) init_declarator_list -> . init_declarator
    (113) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (114) init_declarator -> . declarator EQUALS initializer
    (115) init_declarator -> . declarator
    (172) declarator -> . pointer direct_declarator
    (173) declarator -> . direct_declarator
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    SCOLON          shift and go to state 46
    TIMES           shift and go to state 51
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 53

    init_declarator_list           shift and go to state 47
    init_declarator                shift and go to state 50
    declarator                     shift and go to state 137
    pointer                        shift and go to state 48
    direct_declarator              shift and go to state 49

state 67

    (6) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (9) declaration_list -> declaration_list . declaration
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (98) declaration -> . declaration_specifiers SCOLON
    (99) declaration -> . declaration_specifiers init_declarator_list SCOLON
    (100) declaration -> . static_assert_declaration
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    LFPAREN         shift and go to state 71
    SCOLON          reduce using rule 111 (declaration_specifiers -> .)
    TIMES           reduce using rule 111 (declaration_specifiers -> .)
    IDENTIFIER      reduce using rule 111 (declaration_specifiers -> .)
    LPAREN          reduce using rule 111 (declaration_specifiers -> .)
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    declaration_specifiers         shift and go to state 66
    compound_statement             shift and go to state 138
    declaration                    shift and go to state 139
    static_assert_declaration      shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 68

    (7) function_definition -> declaration_specifiers declarator compound_statement .

    STATIC_ASSERT   reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    THREAD_LOCAL    reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    COMPLEX         reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    IMAGINARY       reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    ATOMIC          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    NORETURN        reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    ALIGNAS         reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    SCOLON          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    TIMES           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    IDENTIFIER      reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)


state 69

    (114) init_declarator -> declarator EQUALS . initializer
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LFPAREN         shift and go to state 141
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer                    shift and go to state 140
    assignment_expression          shift and go to state 142
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 70

    (8) declaration_list -> declaration .

    LFPAREN         reduce using rule 8 (declaration_list -> declaration .)
    STATIC_ASSERT   reduce using rule 8 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 8 (declaration_list -> declaration .)
    EXTERN          reduce using rule 8 (declaration_list -> declaration .)
    STATIC          reduce using rule 8 (declaration_list -> declaration .)
    THREAD_LOCAL    reduce using rule 8 (declaration_list -> declaration .)
    AUTO            reduce using rule 8 (declaration_list -> declaration .)
    REGISTER        reduce using rule 8 (declaration_list -> declaration .)
    VOID            reduce using rule 8 (declaration_list -> declaration .)
    CHAR            reduce using rule 8 (declaration_list -> declaration .)
    SHORT           reduce using rule 8 (declaration_list -> declaration .)
    INT             reduce using rule 8 (declaration_list -> declaration .)
    LONG            reduce using rule 8 (declaration_list -> declaration .)
    FLOAT           reduce using rule 8 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 8 (declaration_list -> declaration .)
    SIGNED          reduce using rule 8 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 8 (declaration_list -> declaration .)
    BOOL            reduce using rule 8 (declaration_list -> declaration .)
    COMPLEX         reduce using rule 8 (declaration_list -> declaration .)
    IMAGINARY       reduce using rule 8 (declaration_list -> declaration .)
    CONST           reduce using rule 8 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 8 (declaration_list -> declaration .)
    ATOMIC          reduce using rule 8 (declaration_list -> declaration .)
    NORETURN        reduce using rule 8 (declaration_list -> declaration .)
    ALIGNAS         reduce using rule 8 (declaration_list -> declaration .)
    ENUM            reduce using rule 8 (declaration_list -> declaration .)
    STRUCT          reduce using rule 8 (declaration_list -> declaration .)
    UNION           reduce using rule 8 (declaration_list -> declaration .)
    SCOLON          reduce using rule 8 (declaration_list -> declaration .)
    TIMES           reduce using rule 8 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 8 (declaration_list -> declaration .)
    LPAREN          reduce using rule 8 (declaration_list -> declaration .)


state 71

    (251) compound_statement -> LFPAREN . RFPAREN
    (252) compound_statement -> LFPAREN . block_item_list RFPAREN
    (253) block_item_list -> . block_item
    (254) block_item_list -> . block_item_list block_item
    (255) block_item -> . declaration
    (256) block_item -> . statement
    (98) declaration -> . declaration_specifiers SCOLON
    (99) declaration -> . declaration_specifiers init_declarator_list SCOLON
    (100) declaration -> . static_assert_declaration
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SCOLON resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    RFPAREN         shift and go to state 146
    STATIC_ASSERT   shift and go to state 13
    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

  ! SCOLON          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    block_item_list                shift and go to state 147
    block_item                     shift and go to state 148
    declaration                    shift and go to state 149
    statement                      shift and go to state 150
    declaration_specifiers         shift and go to state 66
    static_assert_declaration      shift and go to state 7
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    expression                     shift and go to state 161
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    assignment_expression          shift and go to state 171
    struct_or_union                shift and go to state 40
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 72

    (99) declaration -> declaration_specifiers init_declarator_list SCOLON .

    STATIC_ASSERT   reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    TYPEDEF         reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    EXTERN          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    STATIC          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    THREAD_LOCAL    reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    AUTO            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    REGISTER        reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    VOID            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    CHAR            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    SHORT           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    INT             reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    LONG            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    FLOAT           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    DOUBLE          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    SIGNED          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    UNSIGNED        reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    BOOL            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    COMPLEX         reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    IMAGINARY       reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    CONST           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    VOLATILE        reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    ATOMIC          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    NORETURN        reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    ALIGNAS         reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    ENUM            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    STRUCT          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    UNION           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    SCOLON          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    TIMES           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    IDENTIFIER      reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    LPAREN          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    $end            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    LFPAREN         reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    RFPAREN         reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    CASE            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    DEFAULT         reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    IF              reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    SWITCH          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    WHILE           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    DO              reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    FOR             reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    GOTO            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    CONTINUE        reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    BREAK           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    RETURN          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    INC_OP          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    DEC_OP          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    SIZEOF          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    ALIGNOF         reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    AMP             reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    PLUS            reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    MINUS           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    TILDE           reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    NOT             reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    NUMBER          reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    I_CONSTANT      reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    F_CONSTANT      reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    STRING_LITERAL  reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    FUNC_NAME       reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)
    GENERIC         reduce using rule 99 (declaration -> declaration_specifiers init_declarator_list SCOLON .)


state 73

    (113) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (114) init_declarator -> . declarator EQUALS initializer
    (115) init_declarator -> . declarator
    (172) declarator -> . pointer direct_declarator
    (173) declarator -> . direct_declarator
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    TIMES           shift and go to state 51
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 53

    init_declarator                shift and go to state 172
    declarator                     shift and go to state 137
    pointer                        shift and go to state 48
    direct_declarator              shift and go to state 49

state 74

    (172) declarator -> pointer direct_declarator .
    (177) direct_declarator -> direct_declarator . RSQUARE LSQUARE
    (178) direct_declarator -> direct_declarator . RSQUARE TIMES LSQUARE
    (179) direct_declarator -> direct_declarator . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> direct_declarator . RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> direct_declarator . RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> direct_declarator . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> direct_declarator . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> direct_declarator . RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> direct_declarator . RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> direct_declarator . LPAREN RPAREN
    (188) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUALS          reduce using rule 172 (declarator -> pointer direct_declarator .)
    LFPAREN         reduce using rule 172 (declarator -> pointer direct_declarator .)
    STATIC_ASSERT   reduce using rule 172 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 172 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 172 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 172 (declarator -> pointer direct_declarator .)
    THREAD_LOCAL    reduce using rule 172 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 172 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 172 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 172 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 172 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 172 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 172 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 172 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 172 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 172 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 172 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 172 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 172 (declarator -> pointer direct_declarator .)
    COMPLEX         reduce using rule 172 (declarator -> pointer direct_declarator .)
    IMAGINARY       reduce using rule 172 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 172 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 172 (declarator -> pointer direct_declarator .)
    ATOMIC          reduce using rule 172 (declarator -> pointer direct_declarator .)
    NORETURN        reduce using rule 172 (declarator -> pointer direct_declarator .)
    ALIGNAS         reduce using rule 172 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 172 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 172 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 172 (declarator -> pointer direct_declarator .)
    SCOLON          reduce using rule 172 (declarator -> pointer direct_declarator .)
    TIMES           reduce using rule 172 (declarator -> pointer direct_declarator .)
    IDENTIFIER      reduce using rule 172 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 172 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 172 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 172 (declarator -> pointer direct_declarator .)
    RSQUARE         shift and go to state 75
    LPAREN          shift and go to state 76

  ! LPAREN          [ reduce using rule 172 (declarator -> pointer direct_declarator .) ]


state 75

    (177) direct_declarator -> direct_declarator RSQUARE . LSQUARE
    (178) direct_declarator -> direct_declarator RSQUARE . TIMES LSQUARE
    (179) direct_declarator -> direct_declarator RSQUARE . STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> direct_declarator RSQUARE . STATIC assignment_expression LSQUARE
    (181) direct_declarator -> direct_declarator RSQUARE . type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> direct_declarator RSQUARE . type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> direct_declarator RSQUARE . type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> direct_declarator RSQUARE . type_qualifier_list LSQUARE
    (185) direct_declarator -> direct_declarator RSQUARE . assignment_expression LSQUARE
    (193) type_qualifier_list -> . type_qualifier
    (194) type_qualifier_list -> . type_qualifier_list type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LSQUARE         shift and go to state 173
    TIMES           shift and go to state 174
    STATIC          shift and go to state 175
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 176
    assignment_expression          shift and go to state 177
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 76

    (186) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (187) direct_declarator -> direct_declarator LPAREN . RPAREN
    (188) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (195) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (196) parameter_type_list -> . parameter_list
    (202) identifier_list -> . IDENTIFIER
    (203) identifier_list -> . identifier_list COMMA IDENTIFIER
    (197) parameter_list -> . parameter_declaration
    (198) parameter_list -> . parameter_list COMMA parameter_declaration
    (199) parameter_declaration -> . declaration_specifiers declarator
    (200) parameter_declaration -> . declaration_specifiers abstract_declarator
    (201) parameter_declaration -> . declaration_specifiers
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 179
    IDENTIFIER      shift and go to state 182
    TIMES           reduce using rule 111 (declaration_specifiers -> .)
    LPAREN          reduce using rule 111 (declaration_specifiers -> .)
    RSQUARE         reduce using rule 111 (declaration_specifiers -> .)
    COMMA           reduce using rule 111 (declaration_specifiers -> .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    parameter_type_list            shift and go to state 178
    identifier_list                shift and go to state 180
    parameter_list                 shift and go to state 181
    parameter_declaration          shift and go to state 183
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 77

    (189) pointer -> TIMES type_qualifier_list . pointer
    (190) pointer -> TIMES type_qualifier_list .
    (194) type_qualifier_list -> type_qualifier_list . type_qualifier
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC

    IDENTIFIER      reduce using rule 190 (pointer -> TIMES type_qualifier_list .)
    LPAREN          reduce using rule 190 (pointer -> TIMES type_qualifier_list .)
    RSQUARE         reduce using rule 190 (pointer -> TIMES type_qualifier_list .)
    RPAREN          reduce using rule 190 (pointer -> TIMES type_qualifier_list .)
    COLON           reduce using rule 190 (pointer -> TIMES type_qualifier_list .)
    COMMA           reduce using rule 190 (pointer -> TIMES type_qualifier_list .)
    TIMES           shift and go to state 51
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80

    pointer                        shift and go to state 185
    type_qualifier                 shift and go to state 186

state 78

    (191) pointer -> TIMES pointer .

    IDENTIFIER      reduce using rule 191 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 191 (pointer -> TIMES pointer .)
    RSQUARE         reduce using rule 191 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 191 (pointer -> TIMES pointer .)
    COLON           reduce using rule 191 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 191 (pointer -> TIMES pointer .)


state 79

    (193) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    ATOMIC          reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    RSQUARE         reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    LSQUARE         reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    INC_OP          reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    DEC_OP          reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    ALIGNOF         reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    AMP             reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    PLUS            reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    MINUS           reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    TILDE           reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    NOT             reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    NUMBER          reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    I_CONSTANT      reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    F_CONSTANT      reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    FUNC_NAME       reduce using rule 193 (type_qualifier_list -> type_qualifier .)
    GENERIC         reduce using rule 193 (type_qualifier_list -> type_qualifier .)


state 80

    (168) type_qualifier -> ATOMIC .

    TIMES           reduce using rule 168 (type_qualifier -> ATOMIC .)
    CONST           reduce using rule 168 (type_qualifier -> ATOMIC .)
    VOLATILE        reduce using rule 168 (type_qualifier -> ATOMIC .)
    ATOMIC          reduce using rule 168 (type_qualifier -> ATOMIC .)
    IDENTIFIER      reduce using rule 168 (type_qualifier -> ATOMIC .)
    LPAREN          reduce using rule 168 (type_qualifier -> ATOMIC .)
    RSQUARE         reduce using rule 168 (type_qualifier -> ATOMIC .)
    RPAREN          reduce using rule 168 (type_qualifier -> ATOMIC .)
    COLON           reduce using rule 168 (type_qualifier -> ATOMIC .)
    COMMA           reduce using rule 168 (type_qualifier -> ATOMIC .)
    STATIC          reduce using rule 168 (type_qualifier -> ATOMIC .)
    LSQUARE         reduce using rule 168 (type_qualifier -> ATOMIC .)
    INC_OP          reduce using rule 168 (type_qualifier -> ATOMIC .)
    DEC_OP          reduce using rule 168 (type_qualifier -> ATOMIC .)
    SIZEOF          reduce using rule 168 (type_qualifier -> ATOMIC .)
    ALIGNOF         reduce using rule 168 (type_qualifier -> ATOMIC .)
    AMP             reduce using rule 168 (type_qualifier -> ATOMIC .)
    PLUS            reduce using rule 168 (type_qualifier -> ATOMIC .)
    MINUS           reduce using rule 168 (type_qualifier -> ATOMIC .)
    TILDE           reduce using rule 168 (type_qualifier -> ATOMIC .)
    NOT             reduce using rule 168 (type_qualifier -> ATOMIC .)
    NUMBER          reduce using rule 168 (type_qualifier -> ATOMIC .)
    I_CONSTANT      reduce using rule 168 (type_qualifier -> ATOMIC .)
    F_CONSTANT      reduce using rule 168 (type_qualifier -> ATOMIC .)
    STRING_LITERAL  reduce using rule 168 (type_qualifier -> ATOMIC .)
    FUNC_NAME       reduce using rule 168 (type_qualifier -> ATOMIC .)
    GENERIC         reduce using rule 168 (type_qualifier -> ATOMIC .)


state 81

    (175) direct_declarator -> IDENTIFIER LSQUARE . NUMBER RSQUARE

    NUMBER          shift and go to state 187


state 82

    (176) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 188


state 83

    (51) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (34) postfix_expression -> LPAREN . type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (13) primary_expression -> LPAREN . expression RPAREN
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 41
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 189
    cast_expression                shift and go to state 100
    expression                     shift and go to state 190
    specifier_qualifier_list       shift and go to state 122
    assignment_expression          shift and go to state 171
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    struct_or_union                shift and go to state 40
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 84

    (241) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression . COMMA STRING_LITERAL RPAREN SCOLON

    COMMA           shift and go to state 191


state 85

    (19) string -> STRING_LITERAL .

    RSQUARE         reduce using rule 19 (string -> STRING_LITERAL .)
    LPAREN          reduce using rule 19 (string -> STRING_LITERAL .)
    DOT             reduce using rule 19 (string -> STRING_LITERAL .)
    PTR_OP          reduce using rule 19 (string -> STRING_LITERAL .)
    INC_OP          reduce using rule 19 (string -> STRING_LITERAL .)
    DEC_OP          reduce using rule 19 (string -> STRING_LITERAL .)
    TIMES           reduce using rule 19 (string -> STRING_LITERAL .)
    DIVIDES         reduce using rule 19 (string -> STRING_LITERAL .)
    MODULUS         reduce using rule 19 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 19 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 19 (string -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 19 (string -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 19 (string -> STRING_LITERAL .)
    LT_OP           reduce using rule 19 (string -> STRING_LITERAL .)
    GT_OP           reduce using rule 19 (string -> STRING_LITERAL .)
    LE_OP           reduce using rule 19 (string -> STRING_LITERAL .)
    GE_OP           reduce using rule 19 (string -> STRING_LITERAL .)
    EQ_OP           reduce using rule 19 (string -> STRING_LITERAL .)
    NE_OP           reduce using rule 19 (string -> STRING_LITERAL .)
    AMP             reduce using rule 19 (string -> STRING_LITERAL .)
    XOR             reduce using rule 19 (string -> STRING_LITERAL .)
    OR              reduce using rule 19 (string -> STRING_LITERAL .)
    AND_OP          reduce using rule 19 (string -> STRING_LITERAL .)
    QMARK           reduce using rule 19 (string -> STRING_LITERAL .)
    OR_OP           reduce using rule 19 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 19 (string -> STRING_LITERAL .)
    RPAREN          reduce using rule 19 (string -> STRING_LITERAL .)
    EQUALS          reduce using rule 19 (string -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 19 (string -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 19 (string -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 19 (string -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 19 (string -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 19 (string -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 19 (string -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 19 (string -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 19 (string -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 19 (string -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 19 (string -> STRING_LITERAL .)
    SCOLON          reduce using rule 19 (string -> STRING_LITERAL .)
    LSQUARE         reduce using rule 19 (string -> STRING_LITERAL .)
    RFPAREN         reduce using rule 19 (string -> STRING_LITERAL .)
    COLON           reduce using rule 19 (string -> STRING_LITERAL .)


state 86

    (97) constant_expression -> conditional_expression .

    COMMA           reduce using rule 97 (constant_expression -> conditional_expression .)
    RPAREN          reduce using rule 97 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 97 (constant_expression -> conditional_expression .)
    SCOLON          reduce using rule 97 (constant_expression -> conditional_expression .)
    RFPAREN         reduce using rule 97 (constant_expression -> conditional_expression .)
    LSQUARE         reduce using rule 97 (constant_expression -> conditional_expression .)


state 87

    (80) conditional_expression -> logical_or_expression .
    (81) conditional_expression -> logical_or_expression . QMARK expression COLON conditional_expression
    (79) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    COMMA           reduce using rule 80 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 80 (conditional_expression -> logical_or_expression .)
    SCOLON          reduce using rule 80 (conditional_expression -> logical_or_expression .)
    LSQUARE         reduce using rule 80 (conditional_expression -> logical_or_expression .)
    RFPAREN         reduce using rule 80 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 80 (conditional_expression -> logical_or_expression .)
    QMARK           shift and go to state 192
    OR_OP           shift and go to state 193


state 88

    (78) logical_or_expression -> logical_and_expression .
    (77) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QMARK           reduce using rule 78 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 78 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 78 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 78 (logical_or_expression -> logical_and_expression .)
    SCOLON          reduce using rule 78 (logical_or_expression -> logical_and_expression .)
    LSQUARE         reduce using rule 78 (logical_or_expression -> logical_and_expression .)
    RFPAREN         reduce using rule 78 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 78 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 194


state 89

    (76) logical_and_expression -> inclusive_or_expression .
    (75) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AND_OP          reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    QMARK           reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    SCOLON          reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    LSQUARE         reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    RFPAREN         reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 76 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 195


state 90

    (74) inclusive_or_expression -> exclusive_or_expression .
    (73) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    QMARK           reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    SCOLON          reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    LSQUARE         reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    RFPAREN         reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 74 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 196


state 91

    (72) exclusive_or_expression -> and_expression .
    (71) and_expression -> and_expression . AMP equality_expression

    XOR             reduce using rule 72 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 72 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 72 (exclusive_or_expression -> and_expression .)
    QMARK           reduce using rule 72 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 72 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 72 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 72 (exclusive_or_expression -> and_expression .)
    SCOLON          reduce using rule 72 (exclusive_or_expression -> and_expression .)
    LSQUARE         reduce using rule 72 (exclusive_or_expression -> and_expression .)
    RFPAREN         reduce using rule 72 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 72 (exclusive_or_expression -> and_expression .)
    AMP             shift and go to state 197


state 92

    (70) and_expression -> equality_expression .
    (68) equality_expression -> equality_expression . EQ_OP relational_expression
    (69) equality_expression -> equality_expression . NE_OP relational_expression

    AMP             reduce using rule 70 (and_expression -> equality_expression .)
    XOR             reduce using rule 70 (and_expression -> equality_expression .)
    OR              reduce using rule 70 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 70 (and_expression -> equality_expression .)
    QMARK           reduce using rule 70 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 70 (and_expression -> equality_expression .)
    COMMA           reduce using rule 70 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 70 (and_expression -> equality_expression .)
    SCOLON          reduce using rule 70 (and_expression -> equality_expression .)
    LSQUARE         reduce using rule 70 (and_expression -> equality_expression .)
    RFPAREN         reduce using rule 70 (and_expression -> equality_expression .)
    COLON           reduce using rule 70 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 198
    NE_OP           shift and go to state 199


state 93

    (44) unary_oper -> AMP .

    LPAREN          reduce using rule 44 (unary_oper -> AMP .)
    INC_OP          reduce using rule 44 (unary_oper -> AMP .)
    DEC_OP          reduce using rule 44 (unary_oper -> AMP .)
    SIZEOF          reduce using rule 44 (unary_oper -> AMP .)
    ALIGNOF         reduce using rule 44 (unary_oper -> AMP .)
    AMP             reduce using rule 44 (unary_oper -> AMP .)
    TIMES           reduce using rule 44 (unary_oper -> AMP .)
    PLUS            reduce using rule 44 (unary_oper -> AMP .)
    MINUS           reduce using rule 44 (unary_oper -> AMP .)
    TILDE           reduce using rule 44 (unary_oper -> AMP .)
    NOT             reduce using rule 44 (unary_oper -> AMP .)
    IDENTIFIER      reduce using rule 44 (unary_oper -> AMP .)
    NUMBER          reduce using rule 44 (unary_oper -> AMP .)
    I_CONSTANT      reduce using rule 44 (unary_oper -> AMP .)
    F_CONSTANT      reduce using rule 44 (unary_oper -> AMP .)
    STRING_LITERAL  reduce using rule 44 (unary_oper -> AMP .)
    FUNC_NAME       reduce using rule 44 (unary_oper -> AMP .)
    GENERIC         reduce using rule 44 (unary_oper -> AMP .)


state 94

    (67) equality_expression -> relational_expression .
    (63) relational_expression -> relational_expression . LT_OP shift_expression
    (64) relational_expression -> relational_expression . GT_OP shift_expression
    (65) relational_expression -> relational_expression . LE_OP shift_expression
    (66) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 67 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 67 (equality_expression -> relational_expression .)
    AMP             reduce using rule 67 (equality_expression -> relational_expression .)
    XOR             reduce using rule 67 (equality_expression -> relational_expression .)
    OR              reduce using rule 67 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 67 (equality_expression -> relational_expression .)
    QMARK           reduce using rule 67 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 67 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 67 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 67 (equality_expression -> relational_expression .)
    SCOLON          reduce using rule 67 (equality_expression -> relational_expression .)
    LSQUARE         reduce using rule 67 (equality_expression -> relational_expression .)
    RFPAREN         reduce using rule 67 (equality_expression -> relational_expression .)
    COLON           reduce using rule 67 (equality_expression -> relational_expression .)
    LT_OP           shift and go to state 200
    GT_OP           shift and go to state 201
    LE_OP           shift and go to state 202
    GE_OP           shift and go to state 203


state 95

    (62) relational_expression -> shift_expression .
    (60) shift_expression -> shift_expression . LEFT_OP additive_expression
    (61) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 62 (relational_expression -> shift_expression .)
    GT_OP           reduce using rule 62 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 62 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 62 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 62 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 62 (relational_expression -> shift_expression .)
    AMP             reduce using rule 62 (relational_expression -> shift_expression .)
    XOR             reduce using rule 62 (relational_expression -> shift_expression .)
    OR              reduce using rule 62 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 62 (relational_expression -> shift_expression .)
    QMARK           reduce using rule 62 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 62 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 62 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 62 (relational_expression -> shift_expression .)
    SCOLON          reduce using rule 62 (relational_expression -> shift_expression .)
    LSQUARE         reduce using rule 62 (relational_expression -> shift_expression .)
    RFPAREN         reduce using rule 62 (relational_expression -> shift_expression .)
    COLON           reduce using rule 62 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 204
    RIGHT_OP        shift and go to state 205


state 96

    (59) shift_expression -> additive_expression .
    (57) additive_expression -> additive_expression . PLUS multiplicative_expression
    (58) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 59 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 59 (shift_expression -> additive_expression .)
    LT_OP           reduce using rule 59 (shift_expression -> additive_expression .)
    GT_OP           reduce using rule 59 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 59 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 59 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 59 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 59 (shift_expression -> additive_expression .)
    AMP             reduce using rule 59 (shift_expression -> additive_expression .)
    XOR             reduce using rule 59 (shift_expression -> additive_expression .)
    OR              reduce using rule 59 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 59 (shift_expression -> additive_expression .)
    QMARK           reduce using rule 59 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 59 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 59 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 59 (shift_expression -> additive_expression .)
    SCOLON          reduce using rule 59 (shift_expression -> additive_expression .)
    LSQUARE         reduce using rule 59 (shift_expression -> additive_expression .)
    RFPAREN         reduce using rule 59 (shift_expression -> additive_expression .)
    COLON           reduce using rule 59 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 206
    MINUS           shift and go to state 207


state 97

    (56) additive_expression -> multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVIDES cast_expression
    (55) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 56 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 56 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 56 (additive_expression -> multiplicative_expression .)
    LT_OP           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    GT_OP           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    AMP             reduce using rule 56 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 56 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 56 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 56 (additive_expression -> multiplicative_expression .)
    QMARK           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 56 (additive_expression -> multiplicative_expression .)
    SCOLON          reduce using rule 56 (additive_expression -> multiplicative_expression .)
    LSQUARE         reduce using rule 56 (additive_expression -> multiplicative_expression .)
    RFPAREN         reduce using rule 56 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 56 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 208
    DIVIDES         shift and go to state 209
    MODULUS         shift and go to state 210


state 98

    (46) unary_oper -> PLUS .

    LPAREN          reduce using rule 46 (unary_oper -> PLUS .)
    INC_OP          reduce using rule 46 (unary_oper -> PLUS .)
    DEC_OP          reduce using rule 46 (unary_oper -> PLUS .)
    SIZEOF          reduce using rule 46 (unary_oper -> PLUS .)
    ALIGNOF         reduce using rule 46 (unary_oper -> PLUS .)
    AMP             reduce using rule 46 (unary_oper -> PLUS .)
    TIMES           reduce using rule 46 (unary_oper -> PLUS .)
    PLUS            reduce using rule 46 (unary_oper -> PLUS .)
    MINUS           reduce using rule 46 (unary_oper -> PLUS .)
    TILDE           reduce using rule 46 (unary_oper -> PLUS .)
    NOT             reduce using rule 46 (unary_oper -> PLUS .)
    IDENTIFIER      reduce using rule 46 (unary_oper -> PLUS .)
    NUMBER          reduce using rule 46 (unary_oper -> PLUS .)
    I_CONSTANT      reduce using rule 46 (unary_oper -> PLUS .)
    F_CONSTANT      reduce using rule 46 (unary_oper -> PLUS .)
    STRING_LITERAL  reduce using rule 46 (unary_oper -> PLUS .)
    FUNC_NAME       reduce using rule 46 (unary_oper -> PLUS .)
    GENERIC         reduce using rule 46 (unary_oper -> PLUS .)


state 99

    (47) unary_oper -> MINUS .

    LPAREN          reduce using rule 47 (unary_oper -> MINUS .)
    INC_OP          reduce using rule 47 (unary_oper -> MINUS .)
    DEC_OP          reduce using rule 47 (unary_oper -> MINUS .)
    SIZEOF          reduce using rule 47 (unary_oper -> MINUS .)
    ALIGNOF         reduce using rule 47 (unary_oper -> MINUS .)
    AMP             reduce using rule 47 (unary_oper -> MINUS .)
    TIMES           reduce using rule 47 (unary_oper -> MINUS .)
    PLUS            reduce using rule 47 (unary_oper -> MINUS .)
    MINUS           reduce using rule 47 (unary_oper -> MINUS .)
    TILDE           reduce using rule 47 (unary_oper -> MINUS .)
    NOT             reduce using rule 47 (unary_oper -> MINUS .)
    IDENTIFIER      reduce using rule 47 (unary_oper -> MINUS .)
    NUMBER          reduce using rule 47 (unary_oper -> MINUS .)
    I_CONSTANT      reduce using rule 47 (unary_oper -> MINUS .)
    F_CONSTANT      reduce using rule 47 (unary_oper -> MINUS .)
    STRING_LITERAL  reduce using rule 47 (unary_oper -> MINUS .)
    FUNC_NAME       reduce using rule 47 (unary_oper -> MINUS .)
    GENERIC         reduce using rule 47 (unary_oper -> MINUS .)


state 100

    (52) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    DIVIDES         reduce using rule 52 (multiplicative_expression -> cast_expression .)
    MODULUS         reduce using rule 52 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 52 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 52 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 52 (multiplicative_expression -> cast_expression .)
    LT_OP           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    GT_OP           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    AMP             reduce using rule 52 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 52 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 52 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 52 (multiplicative_expression -> cast_expression .)
    QMARK           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 52 (multiplicative_expression -> cast_expression .)
    SCOLON          reduce using rule 52 (multiplicative_expression -> cast_expression .)
    LSQUARE         reduce using rule 52 (multiplicative_expression -> cast_expression .)
    RFPAREN         reduce using rule 52 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 52 (multiplicative_expression -> cast_expression .)


state 101

    (45) unary_oper -> TIMES .

    LPAREN          reduce using rule 45 (unary_oper -> TIMES .)
    INC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    DEC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    SIZEOF          reduce using rule 45 (unary_oper -> TIMES .)
    ALIGNOF         reduce using rule 45 (unary_oper -> TIMES .)
    AMP             reduce using rule 45 (unary_oper -> TIMES .)
    TIMES           reduce using rule 45 (unary_oper -> TIMES .)
    PLUS            reduce using rule 45 (unary_oper -> TIMES .)
    MINUS           reduce using rule 45 (unary_oper -> TIMES .)
    TILDE           reduce using rule 45 (unary_oper -> TIMES .)
    NOT             reduce using rule 45 (unary_oper -> TIMES .)
    IDENTIFIER      reduce using rule 45 (unary_oper -> TIMES .)
    NUMBER          reduce using rule 45 (unary_oper -> TIMES .)
    I_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    F_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    STRING_LITERAL  reduce using rule 45 (unary_oper -> TIMES .)
    FUNC_NAME       reduce using rule 45 (unary_oper -> TIMES .)
    GENERIC         reduce using rule 45 (unary_oper -> TIMES .)


state 102

    (50) cast_expression -> unary_expression .

    TIMES           reduce using rule 50 (cast_expression -> unary_expression .)
    DIVIDES         reduce using rule 50 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 50 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 50 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 50 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 50 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 50 (cast_expression -> unary_expression .)
    LT_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    GT_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    AMP             reduce using rule 50 (cast_expression -> unary_expression .)
    XOR             reduce using rule 50 (cast_expression -> unary_expression .)
    OR              reduce using rule 50 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 50 (cast_expression -> unary_expression .)
    QMARK           reduce using rule 50 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 50 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 50 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 50 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 50 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 50 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 50 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 50 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 50 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 50 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 50 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 50 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 50 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 50 (cast_expression -> unary_expression .)
    SCOLON          reduce using rule 50 (cast_expression -> unary_expression .)
    LSQUARE         reduce using rule 50 (cast_expression -> unary_expression .)
    RFPAREN         reduce using rule 50 (cast_expression -> unary_expression .)
    COLON           reduce using rule 50 (cast_expression -> unary_expression .)


state 103

    (37) unary_expression -> postfix_expression .
    (27) postfix_expression -> postfix_expression . RSQUARE expression LSQUARE
    (28) postfix_expression -> postfix_expression . LPAREN RPAREN
    (29) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (31) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (32) postfix_expression -> postfix_expression . INC_OP
    (33) postfix_expression -> postfix_expression . DEC_OP

    TIMES           reduce using rule 37 (unary_expression -> postfix_expression .)
    DIVIDES         reduce using rule 37 (unary_expression -> postfix_expression .)
    MODULUS         reduce using rule 37 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 37 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 37 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 37 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 37 (unary_expression -> postfix_expression .)
    LT_OP           reduce using rule 37 (unary_expression -> postfix_expression .)
    GT_OP           reduce using rule 37 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 37 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 37 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 37 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 37 (unary_expression -> postfix_expression .)
    AMP             reduce using rule 37 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 37 (unary_expression -> postfix_expression .)
    OR              reduce using rule 37 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 37 (unary_expression -> postfix_expression .)
    QMARK           reduce using rule 37 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 37 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 37 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 37 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 37 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 37 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 37 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 37 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 37 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 37 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 37 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 37 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 37 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 37 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 37 (unary_expression -> postfix_expression .)
    SCOLON          reduce using rule 37 (unary_expression -> postfix_expression .)
    LSQUARE         reduce using rule 37 (unary_expression -> postfix_expression .)
    RFPAREN         reduce using rule 37 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 37 (unary_expression -> postfix_expression .)
    RSQUARE         shift and go to state 211
    LPAREN          shift and go to state 212
    DOT             shift and go to state 213
    PTR_OP          shift and go to state 214
    INC_OP          shift and go to state 215
    DEC_OP          shift and go to state 216


state 104

    (38) unary_expression -> INC_OP . unary_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 218
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_expression               shift and go to state 217
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 105

    (39) unary_expression -> DEC_OP . unary_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 218
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_expression               shift and go to state 219
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 106

    (40) unary_expression -> unary_oper . cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 220
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 107

    (41) unary_expression -> SIZEOF . unary_expression
    (42) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 222
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_expression               shift and go to state 221
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 108

    (43) unary_expression -> ALIGNOF . LPAREN type_name RPAREN

    LPAREN          shift and go to state 223


state 109

    (26) postfix_expression -> primary_expression .

    RSQUARE         reduce using rule 26 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 26 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 26 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 26 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 26 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 26 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 26 (postfix_expression -> primary_expression .)
    DIVIDES         reduce using rule 26 (postfix_expression -> primary_expression .)
    MODULUS         reduce using rule 26 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 26 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 26 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 26 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 26 (postfix_expression -> primary_expression .)
    LT_OP           reduce using rule 26 (postfix_expression -> primary_expression .)
    GT_OP           reduce using rule 26 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 26 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 26 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 26 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 26 (postfix_expression -> primary_expression .)
    AMP             reduce using rule 26 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 26 (postfix_expression -> primary_expression .)
    OR              reduce using rule 26 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 26 (postfix_expression -> primary_expression .)
    QMARK           reduce using rule 26 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 26 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 26 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 26 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 26 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 26 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 26 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 26 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 26 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 26 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 26 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 26 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 26 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 26 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 26 (postfix_expression -> primary_expression .)
    SCOLON          reduce using rule 26 (postfix_expression -> primary_expression .)
    LSQUARE         reduce using rule 26 (postfix_expression -> primary_expression .)
    RFPAREN         reduce using rule 26 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 26 (postfix_expression -> primary_expression .)


state 110

    (10) primary_expression -> IDENTIFIER .

    RSQUARE         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DIVIDES         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LT_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    GT_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    AMP             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 10 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    QMARK           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 10 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SCOLON          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LSQUARE         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RFPAREN         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 10 (primary_expression -> IDENTIFIER .)


state 111

    (48) unary_oper -> TILDE .

    LPAREN          reduce using rule 48 (unary_oper -> TILDE .)
    INC_OP          reduce using rule 48 (unary_oper -> TILDE .)
    DEC_OP          reduce using rule 48 (unary_oper -> TILDE .)
    SIZEOF          reduce using rule 48 (unary_oper -> TILDE .)
    ALIGNOF         reduce using rule 48 (unary_oper -> TILDE .)
    AMP             reduce using rule 48 (unary_oper -> TILDE .)
    TIMES           reduce using rule 48 (unary_oper -> TILDE .)
    PLUS            reduce using rule 48 (unary_oper -> TILDE .)
    MINUS           reduce using rule 48 (unary_oper -> TILDE .)
    TILDE           reduce using rule 48 (unary_oper -> TILDE .)
    NOT             reduce using rule 48 (unary_oper -> TILDE .)
    IDENTIFIER      reduce using rule 48 (unary_oper -> TILDE .)
    NUMBER          reduce using rule 48 (unary_oper -> TILDE .)
    I_CONSTANT      reduce using rule 48 (unary_oper -> TILDE .)
    F_CONSTANT      reduce using rule 48 (unary_oper -> TILDE .)
    STRING_LITERAL  reduce using rule 48 (unary_oper -> TILDE .)
    FUNC_NAME       reduce using rule 48 (unary_oper -> TILDE .)
    GENERIC         reduce using rule 48 (unary_oper -> TILDE .)


state 112

    (49) unary_oper -> NOT .

    LPAREN          reduce using rule 49 (unary_oper -> NOT .)
    INC_OP          reduce using rule 49 (unary_oper -> NOT .)
    DEC_OP          reduce using rule 49 (unary_oper -> NOT .)
    SIZEOF          reduce using rule 49 (unary_oper -> NOT .)
    ALIGNOF         reduce using rule 49 (unary_oper -> NOT .)
    AMP             reduce using rule 49 (unary_oper -> NOT .)
    TIMES           reduce using rule 49 (unary_oper -> NOT .)
    PLUS            reduce using rule 49 (unary_oper -> NOT .)
    MINUS           reduce using rule 49 (unary_oper -> NOT .)
    TILDE           reduce using rule 49 (unary_oper -> NOT .)
    NOT             reduce using rule 49 (unary_oper -> NOT .)
    IDENTIFIER      reduce using rule 49 (unary_oper -> NOT .)
    NUMBER          reduce using rule 49 (unary_oper -> NOT .)
    I_CONSTANT      reduce using rule 49 (unary_oper -> NOT .)
    F_CONSTANT      reduce using rule 49 (unary_oper -> NOT .)
    STRING_LITERAL  reduce using rule 49 (unary_oper -> NOT .)
    FUNC_NAME       reduce using rule 49 (unary_oper -> NOT .)
    GENERIC         reduce using rule 49 (unary_oper -> NOT .)


state 113

    (11) primary_expression -> constant .

    RSQUARE         reduce using rule 11 (primary_expression -> constant .)
    LPAREN          reduce using rule 11 (primary_expression -> constant .)
    DOT             reduce using rule 11 (primary_expression -> constant .)
    PTR_OP          reduce using rule 11 (primary_expression -> constant .)
    INC_OP          reduce using rule 11 (primary_expression -> constant .)
    DEC_OP          reduce using rule 11 (primary_expression -> constant .)
    TIMES           reduce using rule 11 (primary_expression -> constant .)
    DIVIDES         reduce using rule 11 (primary_expression -> constant .)
    MODULUS         reduce using rule 11 (primary_expression -> constant .)
    PLUS            reduce using rule 11 (primary_expression -> constant .)
    MINUS           reduce using rule 11 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 11 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 11 (primary_expression -> constant .)
    LT_OP           reduce using rule 11 (primary_expression -> constant .)
    GT_OP           reduce using rule 11 (primary_expression -> constant .)
    LE_OP           reduce using rule 11 (primary_expression -> constant .)
    GE_OP           reduce using rule 11 (primary_expression -> constant .)
    EQ_OP           reduce using rule 11 (primary_expression -> constant .)
    NE_OP           reduce using rule 11 (primary_expression -> constant .)
    AMP             reduce using rule 11 (primary_expression -> constant .)
    XOR             reduce using rule 11 (primary_expression -> constant .)
    OR              reduce using rule 11 (primary_expression -> constant .)
    AND_OP          reduce using rule 11 (primary_expression -> constant .)
    QMARK           reduce using rule 11 (primary_expression -> constant .)
    OR_OP           reduce using rule 11 (primary_expression -> constant .)
    COMMA           reduce using rule 11 (primary_expression -> constant .)
    RPAREN          reduce using rule 11 (primary_expression -> constant .)
    EQUALS          reduce using rule 11 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 11 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 11 (primary_expression -> constant .)
    AND_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    XOR_ASSIGN      reduce using rule 11 (primary_expression -> constant .)
    OR_ASSIGN       reduce using rule 11 (primary_expression -> constant .)
    SCOLON          reduce using rule 11 (primary_expression -> constant .)
    LSQUARE         reduce using rule 11 (primary_expression -> constant .)
    RFPAREN         reduce using rule 11 (primary_expression -> constant .)
    COLON           reduce using rule 11 (primary_expression -> constant .)


state 114

    (12) primary_expression -> string .

    RSQUARE         reduce using rule 12 (primary_expression -> string .)
    LPAREN          reduce using rule 12 (primary_expression -> string .)
    DOT             reduce using rule 12 (primary_expression -> string .)
    PTR_OP          reduce using rule 12 (primary_expression -> string .)
    INC_OP          reduce using rule 12 (primary_expression -> string .)
    DEC_OP          reduce using rule 12 (primary_expression -> string .)
    TIMES           reduce using rule 12 (primary_expression -> string .)
    DIVIDES         reduce using rule 12 (primary_expression -> string .)
    MODULUS         reduce using rule 12 (primary_expression -> string .)
    PLUS            reduce using rule 12 (primary_expression -> string .)
    MINUS           reduce using rule 12 (primary_expression -> string .)
    LEFT_OP         reduce using rule 12 (primary_expression -> string .)
    RIGHT_OP        reduce using rule 12 (primary_expression -> string .)
    LT_OP           reduce using rule 12 (primary_expression -> string .)
    GT_OP           reduce using rule 12 (primary_expression -> string .)
    LE_OP           reduce using rule 12 (primary_expression -> string .)
    GE_OP           reduce using rule 12 (primary_expression -> string .)
    EQ_OP           reduce using rule 12 (primary_expression -> string .)
    NE_OP           reduce using rule 12 (primary_expression -> string .)
    AMP             reduce using rule 12 (primary_expression -> string .)
    XOR             reduce using rule 12 (primary_expression -> string .)
    OR              reduce using rule 12 (primary_expression -> string .)
    AND_OP          reduce using rule 12 (primary_expression -> string .)
    QMARK           reduce using rule 12 (primary_expression -> string .)
    OR_OP           reduce using rule 12 (primary_expression -> string .)
    COMMA           reduce using rule 12 (primary_expression -> string .)
    RPAREN          reduce using rule 12 (primary_expression -> string .)
    EQUALS          reduce using rule 12 (primary_expression -> string .)
    MUL_ASSIGN      reduce using rule 12 (primary_expression -> string .)
    DIV_ASSIGN      reduce using rule 12 (primary_expression -> string .)
    MOD_ASSIGN      reduce using rule 12 (primary_expression -> string .)
    ADD_ASSIGN      reduce using rule 12 (primary_expression -> string .)
    SUB_ASSIGN      reduce using rule 12 (primary_expression -> string .)
    LEFT_ASSIGN     reduce using rule 12 (primary_expression -> string .)
    RIGHT_ASSIGN    reduce using rule 12 (primary_expression -> string .)
    AND_ASSIGN      reduce using rule 12 (primary_expression -> string .)
    XOR_ASSIGN      reduce using rule 12 (primary_expression -> string .)
    OR_ASSIGN       reduce using rule 12 (primary_expression -> string .)
    SCOLON          reduce using rule 12 (primary_expression -> string .)
    LSQUARE         reduce using rule 12 (primary_expression -> string .)
    RFPAREN         reduce using rule 12 (primary_expression -> string .)
    COLON           reduce using rule 12 (primary_expression -> string .)


state 115

    (14) primary_expression -> generic_selection .

    RSQUARE         reduce using rule 14 (primary_expression -> generic_selection .)
    LPAREN          reduce using rule 14 (primary_expression -> generic_selection .)
    DOT             reduce using rule 14 (primary_expression -> generic_selection .)
    PTR_OP          reduce using rule 14 (primary_expression -> generic_selection .)
    INC_OP          reduce using rule 14 (primary_expression -> generic_selection .)
    DEC_OP          reduce using rule 14 (primary_expression -> generic_selection .)
    TIMES           reduce using rule 14 (primary_expression -> generic_selection .)
    DIVIDES         reduce using rule 14 (primary_expression -> generic_selection .)
    MODULUS         reduce using rule 14 (primary_expression -> generic_selection .)
    PLUS            reduce using rule 14 (primary_expression -> generic_selection .)
    MINUS           reduce using rule 14 (primary_expression -> generic_selection .)
    LEFT_OP         reduce using rule 14 (primary_expression -> generic_selection .)
    RIGHT_OP        reduce using rule 14 (primary_expression -> generic_selection .)
    LT_OP           reduce using rule 14 (primary_expression -> generic_selection .)
    GT_OP           reduce using rule 14 (primary_expression -> generic_selection .)
    LE_OP           reduce using rule 14 (primary_expression -> generic_selection .)
    GE_OP           reduce using rule 14 (primary_expression -> generic_selection .)
    EQ_OP           reduce using rule 14 (primary_expression -> generic_selection .)
    NE_OP           reduce using rule 14 (primary_expression -> generic_selection .)
    AMP             reduce using rule 14 (primary_expression -> generic_selection .)
    XOR             reduce using rule 14 (primary_expression -> generic_selection .)
    OR              reduce using rule 14 (primary_expression -> generic_selection .)
    AND_OP          reduce using rule 14 (primary_expression -> generic_selection .)
    QMARK           reduce using rule 14 (primary_expression -> generic_selection .)
    OR_OP           reduce using rule 14 (primary_expression -> generic_selection .)
    COMMA           reduce using rule 14 (primary_expression -> generic_selection .)
    RPAREN          reduce using rule 14 (primary_expression -> generic_selection .)
    EQUALS          reduce using rule 14 (primary_expression -> generic_selection .)
    MUL_ASSIGN      reduce using rule 14 (primary_expression -> generic_selection .)
    DIV_ASSIGN      reduce using rule 14 (primary_expression -> generic_selection .)
    MOD_ASSIGN      reduce using rule 14 (primary_expression -> generic_selection .)
    ADD_ASSIGN      reduce using rule 14 (primary_expression -> generic_selection .)
    SUB_ASSIGN      reduce using rule 14 (primary_expression -> generic_selection .)
    LEFT_ASSIGN     reduce using rule 14 (primary_expression -> generic_selection .)
    RIGHT_ASSIGN    reduce using rule 14 (primary_expression -> generic_selection .)
    AND_ASSIGN      reduce using rule 14 (primary_expression -> generic_selection .)
    XOR_ASSIGN      reduce using rule 14 (primary_expression -> generic_selection .)
    OR_ASSIGN       reduce using rule 14 (primary_expression -> generic_selection .)
    SCOLON          reduce using rule 14 (primary_expression -> generic_selection .)
    LSQUARE         reduce using rule 14 (primary_expression -> generic_selection .)
    RFPAREN         reduce using rule 14 (primary_expression -> generic_selection .)
    COLON           reduce using rule 14 (primary_expression -> generic_selection .)


state 116

    (15) primary_expression -> NUMBER .

    RSQUARE         reduce using rule 15 (primary_expression -> NUMBER .)
    LPAREN          reduce using rule 15 (primary_expression -> NUMBER .)
    DOT             reduce using rule 15 (primary_expression -> NUMBER .)
    PTR_OP          reduce using rule 15 (primary_expression -> NUMBER .)
    INC_OP          reduce using rule 15 (primary_expression -> NUMBER .)
    DEC_OP          reduce using rule 15 (primary_expression -> NUMBER .)
    TIMES           reduce using rule 15 (primary_expression -> NUMBER .)
    DIVIDES         reduce using rule 15 (primary_expression -> NUMBER .)
    MODULUS         reduce using rule 15 (primary_expression -> NUMBER .)
    PLUS            reduce using rule 15 (primary_expression -> NUMBER .)
    MINUS           reduce using rule 15 (primary_expression -> NUMBER .)
    LEFT_OP         reduce using rule 15 (primary_expression -> NUMBER .)
    RIGHT_OP        reduce using rule 15 (primary_expression -> NUMBER .)
    LT_OP           reduce using rule 15 (primary_expression -> NUMBER .)
    GT_OP           reduce using rule 15 (primary_expression -> NUMBER .)
    LE_OP           reduce using rule 15 (primary_expression -> NUMBER .)
    GE_OP           reduce using rule 15 (primary_expression -> NUMBER .)
    EQ_OP           reduce using rule 15 (primary_expression -> NUMBER .)
    NE_OP           reduce using rule 15 (primary_expression -> NUMBER .)
    AMP             reduce using rule 15 (primary_expression -> NUMBER .)
    XOR             reduce using rule 15 (primary_expression -> NUMBER .)
    OR              reduce using rule 15 (primary_expression -> NUMBER .)
    AND_OP          reduce using rule 15 (primary_expression -> NUMBER .)
    QMARK           reduce using rule 15 (primary_expression -> NUMBER .)
    OR_OP           reduce using rule 15 (primary_expression -> NUMBER .)
    COMMA           reduce using rule 15 (primary_expression -> NUMBER .)
    RPAREN          reduce using rule 15 (primary_expression -> NUMBER .)
    EQUALS          reduce using rule 15 (primary_expression -> NUMBER .)
    MUL_ASSIGN      reduce using rule 15 (primary_expression -> NUMBER .)
    DIV_ASSIGN      reduce using rule 15 (primary_expression -> NUMBER .)
    MOD_ASSIGN      reduce using rule 15 (primary_expression -> NUMBER .)
    ADD_ASSIGN      reduce using rule 15 (primary_expression -> NUMBER .)
    SUB_ASSIGN      reduce using rule 15 (primary_expression -> NUMBER .)
    LEFT_ASSIGN     reduce using rule 15 (primary_expression -> NUMBER .)
    RIGHT_ASSIGN    reduce using rule 15 (primary_expression -> NUMBER .)
    AND_ASSIGN      reduce using rule 15 (primary_expression -> NUMBER .)
    XOR_ASSIGN      reduce using rule 15 (primary_expression -> NUMBER .)
    OR_ASSIGN       reduce using rule 15 (primary_expression -> NUMBER .)
    SCOLON          reduce using rule 15 (primary_expression -> NUMBER .)
    LSQUARE         reduce using rule 15 (primary_expression -> NUMBER .)
    RFPAREN         reduce using rule 15 (primary_expression -> NUMBER .)
    COLON           reduce using rule 15 (primary_expression -> NUMBER .)


state 117

    (16) constant -> I_CONSTANT .

    RSQUARE         reduce using rule 16 (constant -> I_CONSTANT .)
    LPAREN          reduce using rule 16 (constant -> I_CONSTANT .)
    DOT             reduce using rule 16 (constant -> I_CONSTANT .)
    PTR_OP          reduce using rule 16 (constant -> I_CONSTANT .)
    INC_OP          reduce using rule 16 (constant -> I_CONSTANT .)
    DEC_OP          reduce using rule 16 (constant -> I_CONSTANT .)
    TIMES           reduce using rule 16 (constant -> I_CONSTANT .)
    DIVIDES         reduce using rule 16 (constant -> I_CONSTANT .)
    MODULUS         reduce using rule 16 (constant -> I_CONSTANT .)
    PLUS            reduce using rule 16 (constant -> I_CONSTANT .)
    MINUS           reduce using rule 16 (constant -> I_CONSTANT .)
    LEFT_OP         reduce using rule 16 (constant -> I_CONSTANT .)
    RIGHT_OP        reduce using rule 16 (constant -> I_CONSTANT .)
    LT_OP           reduce using rule 16 (constant -> I_CONSTANT .)
    GT_OP           reduce using rule 16 (constant -> I_CONSTANT .)
    LE_OP           reduce using rule 16 (constant -> I_CONSTANT .)
    GE_OP           reduce using rule 16 (constant -> I_CONSTANT .)
    EQ_OP           reduce using rule 16 (constant -> I_CONSTANT .)
    NE_OP           reduce using rule 16 (constant -> I_CONSTANT .)
    AMP             reduce using rule 16 (constant -> I_CONSTANT .)
    XOR             reduce using rule 16 (constant -> I_CONSTANT .)
    OR              reduce using rule 16 (constant -> I_CONSTANT .)
    AND_OP          reduce using rule 16 (constant -> I_CONSTANT .)
    QMARK           reduce using rule 16 (constant -> I_CONSTANT .)
    OR_OP           reduce using rule 16 (constant -> I_CONSTANT .)
    COMMA           reduce using rule 16 (constant -> I_CONSTANT .)
    RPAREN          reduce using rule 16 (constant -> I_CONSTANT .)
    EQUALS          reduce using rule 16 (constant -> I_CONSTANT .)
    MUL_ASSIGN      reduce using rule 16 (constant -> I_CONSTANT .)
    DIV_ASSIGN      reduce using rule 16 (constant -> I_CONSTANT .)
    MOD_ASSIGN      reduce using rule 16 (constant -> I_CONSTANT .)
    ADD_ASSIGN      reduce using rule 16 (constant -> I_CONSTANT .)
    SUB_ASSIGN      reduce using rule 16 (constant -> I_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 16 (constant -> I_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 16 (constant -> I_CONSTANT .)
    AND_ASSIGN      reduce using rule 16 (constant -> I_CONSTANT .)
    XOR_ASSIGN      reduce using rule 16 (constant -> I_CONSTANT .)
    OR_ASSIGN       reduce using rule 16 (constant -> I_CONSTANT .)
    SCOLON          reduce using rule 16 (constant -> I_CONSTANT .)
    LSQUARE         reduce using rule 16 (constant -> I_CONSTANT .)
    RFPAREN         reduce using rule 16 (constant -> I_CONSTANT .)
    COLON           reduce using rule 16 (constant -> I_CONSTANT .)


state 118

    (17) constant -> F_CONSTANT .

    RSQUARE         reduce using rule 17 (constant -> F_CONSTANT .)
    LPAREN          reduce using rule 17 (constant -> F_CONSTANT .)
    DOT             reduce using rule 17 (constant -> F_CONSTANT .)
    PTR_OP          reduce using rule 17 (constant -> F_CONSTANT .)
    INC_OP          reduce using rule 17 (constant -> F_CONSTANT .)
    DEC_OP          reduce using rule 17 (constant -> F_CONSTANT .)
    TIMES           reduce using rule 17 (constant -> F_CONSTANT .)
    DIVIDES         reduce using rule 17 (constant -> F_CONSTANT .)
    MODULUS         reduce using rule 17 (constant -> F_CONSTANT .)
    PLUS            reduce using rule 17 (constant -> F_CONSTANT .)
    MINUS           reduce using rule 17 (constant -> F_CONSTANT .)
    LEFT_OP         reduce using rule 17 (constant -> F_CONSTANT .)
    RIGHT_OP        reduce using rule 17 (constant -> F_CONSTANT .)
    LT_OP           reduce using rule 17 (constant -> F_CONSTANT .)
    GT_OP           reduce using rule 17 (constant -> F_CONSTANT .)
    LE_OP           reduce using rule 17 (constant -> F_CONSTANT .)
    GE_OP           reduce using rule 17 (constant -> F_CONSTANT .)
    EQ_OP           reduce using rule 17 (constant -> F_CONSTANT .)
    NE_OP           reduce using rule 17 (constant -> F_CONSTANT .)
    AMP             reduce using rule 17 (constant -> F_CONSTANT .)
    XOR             reduce using rule 17 (constant -> F_CONSTANT .)
    OR              reduce using rule 17 (constant -> F_CONSTANT .)
    AND_OP          reduce using rule 17 (constant -> F_CONSTANT .)
    QMARK           reduce using rule 17 (constant -> F_CONSTANT .)
    OR_OP           reduce using rule 17 (constant -> F_CONSTANT .)
    COMMA           reduce using rule 17 (constant -> F_CONSTANT .)
    RPAREN          reduce using rule 17 (constant -> F_CONSTANT .)
    EQUALS          reduce using rule 17 (constant -> F_CONSTANT .)
    MUL_ASSIGN      reduce using rule 17 (constant -> F_CONSTANT .)
    DIV_ASSIGN      reduce using rule 17 (constant -> F_CONSTANT .)
    MOD_ASSIGN      reduce using rule 17 (constant -> F_CONSTANT .)
    ADD_ASSIGN      reduce using rule 17 (constant -> F_CONSTANT .)
    SUB_ASSIGN      reduce using rule 17 (constant -> F_CONSTANT .)
    LEFT_ASSIGN     reduce using rule 17 (constant -> F_CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 17 (constant -> F_CONSTANT .)
    AND_ASSIGN      reduce using rule 17 (constant -> F_CONSTANT .)
    XOR_ASSIGN      reduce using rule 17 (constant -> F_CONSTANT .)
    OR_ASSIGN       reduce using rule 17 (constant -> F_CONSTANT .)
    SCOLON          reduce using rule 17 (constant -> F_CONSTANT .)
    LSQUARE         reduce using rule 17 (constant -> F_CONSTANT .)
    RFPAREN         reduce using rule 17 (constant -> F_CONSTANT .)
    COLON           reduce using rule 17 (constant -> F_CONSTANT .)


state 119

    (20) string -> FUNC_NAME .

    RSQUARE         reduce using rule 20 (string -> FUNC_NAME .)
    LPAREN          reduce using rule 20 (string -> FUNC_NAME .)
    DOT             reduce using rule 20 (string -> FUNC_NAME .)
    PTR_OP          reduce using rule 20 (string -> FUNC_NAME .)
    INC_OP          reduce using rule 20 (string -> FUNC_NAME .)
    DEC_OP          reduce using rule 20 (string -> FUNC_NAME .)
    TIMES           reduce using rule 20 (string -> FUNC_NAME .)
    DIVIDES         reduce using rule 20 (string -> FUNC_NAME .)
    MODULUS         reduce using rule 20 (string -> FUNC_NAME .)
    PLUS            reduce using rule 20 (string -> FUNC_NAME .)
    MINUS           reduce using rule 20 (string -> FUNC_NAME .)
    LEFT_OP         reduce using rule 20 (string -> FUNC_NAME .)
    RIGHT_OP        reduce using rule 20 (string -> FUNC_NAME .)
    LT_OP           reduce using rule 20 (string -> FUNC_NAME .)
    GT_OP           reduce using rule 20 (string -> FUNC_NAME .)
    LE_OP           reduce using rule 20 (string -> FUNC_NAME .)
    GE_OP           reduce using rule 20 (string -> FUNC_NAME .)
    EQ_OP           reduce using rule 20 (string -> FUNC_NAME .)
    NE_OP           reduce using rule 20 (string -> FUNC_NAME .)
    AMP             reduce using rule 20 (string -> FUNC_NAME .)
    XOR             reduce using rule 20 (string -> FUNC_NAME .)
    OR              reduce using rule 20 (string -> FUNC_NAME .)
    AND_OP          reduce using rule 20 (string -> FUNC_NAME .)
    QMARK           reduce using rule 20 (string -> FUNC_NAME .)
    OR_OP           reduce using rule 20 (string -> FUNC_NAME .)
    COMMA           reduce using rule 20 (string -> FUNC_NAME .)
    RPAREN          reduce using rule 20 (string -> FUNC_NAME .)
    EQUALS          reduce using rule 20 (string -> FUNC_NAME .)
    MUL_ASSIGN      reduce using rule 20 (string -> FUNC_NAME .)
    DIV_ASSIGN      reduce using rule 20 (string -> FUNC_NAME .)
    MOD_ASSIGN      reduce using rule 20 (string -> FUNC_NAME .)
    ADD_ASSIGN      reduce using rule 20 (string -> FUNC_NAME .)
    SUB_ASSIGN      reduce using rule 20 (string -> FUNC_NAME .)
    LEFT_ASSIGN     reduce using rule 20 (string -> FUNC_NAME .)
    RIGHT_ASSIGN    reduce using rule 20 (string -> FUNC_NAME .)
    AND_ASSIGN      reduce using rule 20 (string -> FUNC_NAME .)
    XOR_ASSIGN      reduce using rule 20 (string -> FUNC_NAME .)
    OR_ASSIGN       reduce using rule 20 (string -> FUNC_NAME .)
    SCOLON          reduce using rule 20 (string -> FUNC_NAME .)
    LSQUARE         reduce using rule 20 (string -> FUNC_NAME .)
    RFPAREN         reduce using rule 20 (string -> FUNC_NAME .)
    COLON           reduce using rule 20 (string -> FUNC_NAME .)


state 120

    (21) generic_selection -> GENERIC . LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 224


state 121

    (165) atomic_type_specifier -> ATOMIC LPAREN type_name . RPAREN

    RPAREN          shift and go to state 225


state 122

    (204) type_name -> specifier_qualifier_list . abstract_declarator
    (205) type_name -> specifier_qualifier_list .
    (206) abstract_declarator -> . pointer direct_abstract_declarator
    (207) abstract_declarator -> . pointer
    (208) abstract_declarator -> . direct_abstract_declarator
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (209) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (210) direct_abstract_declarator -> . RSQUARE LSQUARE
    (211) direct_abstract_declarator -> . RSQUARE TIMES LSQUARE
    (212) direct_abstract_declarator -> . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (213) direct_abstract_declarator -> . RSQUARE STATIC assignment_expression LSQUARE
    (214) direct_abstract_declarator -> . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (215) direct_abstract_declarator -> . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (216) direct_abstract_declarator -> . RSQUARE type_qualifier_list LSQUARE
    (217) direct_abstract_declarator -> . RSQUARE assignment_expression LSQUARE
    (218) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE LSQUARE
    (219) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE TIMES LSQUARE
    (220) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE assignment_expression LSQUARE
    (226) direct_abstract_declarator -> . LPAREN RPAREN
    (227) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (228) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (229) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 205 (type_name -> specifier_qualifier_list .)
    COLON           reduce using rule 205 (type_name -> specifier_qualifier_list .)
    TIMES           shift and go to state 51
    LPAREN          shift and go to state 229
    RSQUARE         shift and go to state 230

    abstract_declarator            shift and go to state 226
    pointer                        shift and go to state 227
    direct_abstract_declarator     shift and go to state 228

state 123

    (147) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (148) specifier_qualifier_list -> type_specifier .
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    TIMES           reduce using rule 148 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 148 (specifier_qualifier_list -> type_specifier .)
    RSQUARE         reduce using rule 148 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 148 (specifier_qualifier_list -> type_specifier .)
    SCOLON          reduce using rule 148 (specifier_qualifier_list -> type_specifier .)
    COLON           reduce using rule 148 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 148 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    type_specifier                 shift and go to state 123
    specifier_qualifier_list       shift and go to state 231
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 124

    (149) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (150) specifier_qualifier_list -> type_qualifier .
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    TIMES           reduce using rule 150 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 150 (specifier_qualifier_list -> type_qualifier .)
    RSQUARE         reduce using rule 150 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 150 (specifier_qualifier_list -> type_qualifier .)
    SCOLON          reduce using rule 150 (specifier_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 150 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 150 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    type_qualifier                 shift and go to state 124
    specifier_qualifier_list       shift and go to state 232
    type_specifier                 shift and go to state 123
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 125

    (170) alignment_specifier -> ALIGNAS LPAREN type_name . RPAREN

    RPAREN          shift and go to state 233


state 126

    (171) alignment_specifier -> ALIGNAS LPAREN constant_expression . RPAREN

    RPAREN          shift and go to state 234


state 127

    (137) struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list . RFPAREN
    (143) struct_declaration_list -> struct_declaration_list . struct_declaration
    (144) struct_declaration -> . specifier_qualifier_list SCOLON
    (145) struct_declaration -> . specifier_qualifier_list struct_declarator_list SCOLON
    (146) struct_declaration -> . static_assert_declaration
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RFPAREN         shift and go to state 235
    STATIC_ASSERT   shift and go to state 13
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    struct_or_union                shift and go to state 40
    struct_declaration             shift and go to state 236
    specifier_qualifier_list       shift and go to state 129
    static_assert_declaration      shift and go to state 130
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34

state 128

    (142) struct_declaration_list -> struct_declaration .

    RFPAREN         reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    STATIC_ASSERT   reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    COMPLEX         reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    IMAGINARY       reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    ATOMIC          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 142 (struct_declaration_list -> struct_declaration .)


state 129

    (144) struct_declaration -> specifier_qualifier_list . SCOLON
    (145) struct_declaration -> specifier_qualifier_list . struct_declarator_list SCOLON
    (151) struct_declarator_list -> . struct_declarator
    (152) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (153) struct_declarator -> . COLON constant_expression
    (154) struct_declarator -> . declarator COLON constant_expression
    (155) struct_declarator -> . declarator
    (172) declarator -> . pointer direct_declarator
    (173) declarator -> . direct_declarator
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    SCOLON          shift and go to state 237
    COLON           shift and go to state 240
    TIMES           shift and go to state 51
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 53

    struct_declarator_list         shift and go to state 238
    struct_declarator              shift and go to state 239
    declarator                     shift and go to state 241
    pointer                        shift and go to state 48
    direct_declarator              shift and go to state 49

state 130

    (146) struct_declaration -> static_assert_declaration .

    RFPAREN         reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    STATIC_ASSERT   reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    VOID            reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    CHAR            reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    SHORT           reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    INT             reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    LONG            reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    FLOAT           reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    DOUBLE          reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    SIGNED          reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    UNSIGNED        reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    BOOL            reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    COMPLEX         reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    IMAGINARY       reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    CONST           reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    VOLATILE        reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    ATOMIC          reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    ENUM            reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    STRUCT          reduce using rule 146 (struct_declaration -> static_assert_declaration .)
    UNION           reduce using rule 146 (struct_declaration -> static_assert_declaration .)


state 131

    (138) struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN . struct_declaration_list RFPAREN
    (142) struct_declaration_list -> . struct_declaration
    (143) struct_declaration_list -> . struct_declaration_list struct_declaration
    (144) struct_declaration -> . specifier_qualifier_list SCOLON
    (145) struct_declaration -> . specifier_qualifier_list struct_declarator_list SCOLON
    (146) struct_declaration -> . static_assert_declaration
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    STATIC_ASSERT   shift and go to state 13
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    struct_or_union                shift and go to state 40
    struct_declaration_list        shift and go to state 242
    struct_declaration             shift and go to state 128
    specifier_qualifier_list       shift and go to state 129
    static_assert_declaration      shift and go to state 130
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34

state 132

    (156) enum_specifier -> ENUM LFPAREN enumerator_list . RFPAREN
    (157) enum_specifier -> ENUM LFPAREN enumerator_list . COMMA RFPAREN
    (162) enumerator_list -> enumerator_list . COMMA enumerator

    RFPAREN         shift and go to state 243
    COMMA           shift and go to state 244


state 133

    (161) enumerator_list -> enumerator .

    RFPAREN         reduce using rule 161 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 161 (enumerator_list -> enumerator .)


state 134

    (163) enumerator -> enumeration_constant . EQUALS constant_expression
    (164) enumerator -> enumeration_constant .

    EQUALS          shift and go to state 245
    RFPAREN         reduce using rule 164 (enumerator -> enumeration_constant .)
    COMMA           reduce using rule 164 (enumerator -> enumeration_constant .)


state 135

    (18) enumeration_constant -> IDENTIFIER .

    EQUALS          reduce using rule 18 (enumeration_constant -> IDENTIFIER .)
    RFPAREN         reduce using rule 18 (enumeration_constant -> IDENTIFIER .)
    COMMA           reduce using rule 18 (enumeration_constant -> IDENTIFIER .)


state 136

    (158) enum_specifier -> ENUM IDENTIFIER LFPAREN . enumerator_list RFPAREN
    (159) enum_specifier -> ENUM IDENTIFIER LFPAREN . enumerator_list COMMA RFPAREN
    (161) enumerator_list -> . enumerator
    (162) enumerator_list -> . enumerator_list COMMA enumerator
    (163) enumerator -> . enumeration_constant EQUALS constant_expression
    (164) enumerator -> . enumeration_constant
    (18) enumeration_constant -> . IDENTIFIER

    IDENTIFIER      shift and go to state 135

    enumerator_list                shift and go to state 246
    enumerator                     shift and go to state 133
    enumeration_constant           shift and go to state 134

state 137

    (114) init_declarator -> declarator . EQUALS initializer
    (115) init_declarator -> declarator .

    EQUALS          shift and go to state 69
    SCOLON          reduce using rule 115 (init_declarator -> declarator .)
    COMMA           reduce using rule 115 (init_declarator -> declarator .)


state 138

    (6) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    STATIC_ASSERT   reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPEDEF         reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    THREAD_LOCAL    reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    COMPLEX         reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IMAGINARY       reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ATOMIC          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    NORETURN        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ALIGNAS         reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SCOLON          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TIMES           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 139

    (9) declaration_list -> declaration_list declaration .

    LFPAREN         reduce using rule 9 (declaration_list -> declaration_list declaration .)
    STATIC_ASSERT   reduce using rule 9 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 9 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    THREAD_LOCAL    reduce using rule 9 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 9 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 9 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 9 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    COMPLEX         reduce using rule 9 (declaration_list -> declaration_list declaration .)
    IMAGINARY       reduce using rule 9 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 9 (declaration_list -> declaration_list declaration .)
    ATOMIC          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    NORETURN        reduce using rule 9 (declaration_list -> declaration_list declaration .)
    ALIGNAS         reduce using rule 9 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 9 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    SCOLON          reduce using rule 9 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 9 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 9 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 9 (declaration_list -> declaration_list declaration .)


state 140

    (114) init_declarator -> declarator EQUALS initializer .

    SCOLON          reduce using rule 114 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 114 (init_declarator -> declarator EQUALS initializer .)


state 141

    (230) initializer -> LFPAREN . initializer_list RFPAREN
    (231) initializer -> LFPAREN . initializer_list COMMA RFPAREN
    (233) initializer_list -> . designation initializer
    (234) initializer_list -> . initializer
    (235) initializer_list -> . initializer_list COMMA designation initializer
    (236) initializer_list -> . initializer_list COMMA initializer
    (237) designation -> . designator_list EQUALS
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (238) designator_list -> . designator
    (239) designator_list -> . designator_list designator
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (240) designator -> . RSQUARE constant_expression LSQUARE
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LFPAREN         shift and go to state 141
    RSQUARE         shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer_list               shift and go to state 247
    designation                    shift and go to state 248
    initializer                    shift and go to state 249
    designator_list                shift and go to state 250
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 251
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 142

    (232) initializer -> assignment_expression .

    SCOLON          reduce using rule 232 (initializer -> assignment_expression .)
    COMMA           reduce using rule 232 (initializer -> assignment_expression .)
    RFPAREN         reduce using rule 232 (initializer -> assignment_expression .)


state 143

    (82) assignment_expression -> conditional_expression .

    SCOLON          reduce using rule 82 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 82 (assignment_expression -> conditional_expression .)
    LSQUARE         reduce using rule 82 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 82 (assignment_expression -> conditional_expression .)
    RFPAREN         reduce using rule 82 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 82 (assignment_expression -> conditional_expression .)


state 144

    (83) assignment_expression -> unary_expression . assignment_oper assignment_expression
    (50) cast_expression -> unary_expression .
    (84) assignment_oper -> . EQUALS
    (85) assignment_oper -> . MUL_ASSIGN
    (86) assignment_oper -> . DIV_ASSIGN
    (87) assignment_oper -> . MOD_ASSIGN
    (88) assignment_oper -> . ADD_ASSIGN
    (89) assignment_oper -> . SUB_ASSIGN
    (90) assignment_oper -> . LEFT_ASSIGN
    (91) assignment_oper -> . RIGHT_ASSIGN
    (92) assignment_oper -> . AND_ASSIGN
    (93) assignment_oper -> . XOR_ASSIGN
    (94) assignment_oper -> . OR_ASSIGN

    TIMES           reduce using rule 50 (cast_expression -> unary_expression .)
    DIVIDES         reduce using rule 50 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 50 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 50 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 50 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 50 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 50 (cast_expression -> unary_expression .)
    LT_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    GT_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    AMP             reduce using rule 50 (cast_expression -> unary_expression .)
    XOR             reduce using rule 50 (cast_expression -> unary_expression .)
    OR              reduce using rule 50 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 50 (cast_expression -> unary_expression .)
    QMARK           reduce using rule 50 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 50 (cast_expression -> unary_expression .)
    SCOLON          reduce using rule 50 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 50 (cast_expression -> unary_expression .)
    LSQUARE         reduce using rule 50 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 50 (cast_expression -> unary_expression .)
    RFPAREN         reduce using rule 50 (cast_expression -> unary_expression .)
    COLON           reduce using rule 50 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 254
    MUL_ASSIGN      shift and go to state 255
    DIV_ASSIGN      shift and go to state 256
    MOD_ASSIGN      shift and go to state 257
    ADD_ASSIGN      shift and go to state 258
    SUB_ASSIGN      shift and go to state 259
    LEFT_ASSIGN     shift and go to state 260
    RIGHT_ASSIGN    shift and go to state 261
    AND_ASSIGN      shift and go to state 262
    XOR_ASSIGN      shift and go to state 263
    OR_ASSIGN       shift and go to state 264

    assignment_oper                shift and go to state 253

state 145

    (34) postfix_expression -> LPAREN . type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (13) primary_expression -> LPAREN . expression RPAREN
    (51) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 41
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 265
    expression                     shift and go to state 190
    cast_expression                shift and go to state 100
    specifier_qualifier_list       shift and go to state 122
    assignment_expression          shift and go to state 171
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    struct_or_union                shift and go to state 40
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 146

    (251) compound_statement -> LFPAREN RFPAREN .

    STATIC_ASSERT   reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    TYPEDEF         reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    EXTERN          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    STATIC          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    THREAD_LOCAL    reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    AUTO            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    REGISTER        reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    VOID            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    CHAR            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    SHORT           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    INT             reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    LONG            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    FLOAT           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    DOUBLE          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    SIGNED          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    UNSIGNED        reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    BOOL            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    COMPLEX         reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    IMAGINARY       reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    CONST           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    VOLATILE        reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    ATOMIC          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    NORETURN        reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    ALIGNAS         reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    ENUM            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    STRUCT          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    UNION           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    SCOLON          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    TIMES           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    IDENTIFIER      reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    LPAREN          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    $end            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    RFPAREN         reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    CASE            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    DEFAULT         reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    LFPAREN         reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    IF              reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    SWITCH          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    WHILE           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    DO              reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    FOR             reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    GOTO            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    CONTINUE        reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    BREAK           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    RETURN          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    INC_OP          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    DEC_OP          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    SIZEOF          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    ALIGNOF         reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    AMP             reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    PLUS            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    MINUS           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    TILDE           reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    NOT             reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    NUMBER          reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    I_CONSTANT      reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    F_CONSTANT      reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    STRING_LITERAL  reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    FUNC_NAME       reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    GENERIC         reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)
    ELSE            reduce using rule 251 (compound_statement -> LFPAREN RFPAREN .)


state 147

    (252) compound_statement -> LFPAREN block_item_list . RFPAREN
    (254) block_item_list -> block_item_list . block_item
    (255) block_item -> . declaration
    (256) block_item -> . statement
    (98) declaration -> . declaration_specifiers SCOLON
    (99) declaration -> . declaration_specifiers init_declarator_list SCOLON
    (100) declaration -> . static_assert_declaration
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for SCOLON resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    RFPAREN         shift and go to state 266
    STATIC_ASSERT   shift and go to state 13
    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

  ! SCOLON          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    block_item                     shift and go to state 267
    declaration                    shift and go to state 149
    statement                      shift and go to state 150
    declaration_specifiers         shift and go to state 66
    static_assert_declaration      shift and go to state 7
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    expression                     shift and go to state 161
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    assignment_expression          shift and go to state 171
    struct_or_union                shift and go to state 40
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 148

    (253) block_item_list -> block_item .

    RFPAREN         reduce using rule 253 (block_item_list -> block_item .)
    STATIC_ASSERT   reduce using rule 253 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 253 (block_item_list -> block_item .)
    CASE            reduce using rule 253 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 253 (block_item_list -> block_item .)
    LFPAREN         reduce using rule 253 (block_item_list -> block_item .)
    SCOLON          reduce using rule 253 (block_item_list -> block_item .)
    IF              reduce using rule 253 (block_item_list -> block_item .)
    SWITCH          reduce using rule 253 (block_item_list -> block_item .)
    WHILE           reduce using rule 253 (block_item_list -> block_item .)
    DO              reduce using rule 253 (block_item_list -> block_item .)
    FOR             reduce using rule 253 (block_item_list -> block_item .)
    GOTO            reduce using rule 253 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 253 (block_item_list -> block_item .)
    BREAK           reduce using rule 253 (block_item_list -> block_item .)
    RETURN          reduce using rule 253 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 253 (block_item_list -> block_item .)
    EXTERN          reduce using rule 253 (block_item_list -> block_item .)
    STATIC          reduce using rule 253 (block_item_list -> block_item .)
    THREAD_LOCAL    reduce using rule 253 (block_item_list -> block_item .)
    AUTO            reduce using rule 253 (block_item_list -> block_item .)
    REGISTER        reduce using rule 253 (block_item_list -> block_item .)
    VOID            reduce using rule 253 (block_item_list -> block_item .)
    CHAR            reduce using rule 253 (block_item_list -> block_item .)
    SHORT           reduce using rule 253 (block_item_list -> block_item .)
    INT             reduce using rule 253 (block_item_list -> block_item .)
    LONG            reduce using rule 253 (block_item_list -> block_item .)
    FLOAT           reduce using rule 253 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 253 (block_item_list -> block_item .)
    SIGNED          reduce using rule 253 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 253 (block_item_list -> block_item .)
    BOOL            reduce using rule 253 (block_item_list -> block_item .)
    COMPLEX         reduce using rule 253 (block_item_list -> block_item .)
    IMAGINARY       reduce using rule 253 (block_item_list -> block_item .)
    CONST           reduce using rule 253 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 253 (block_item_list -> block_item .)
    ATOMIC          reduce using rule 253 (block_item_list -> block_item .)
    NORETURN        reduce using rule 253 (block_item_list -> block_item .)
    ALIGNAS         reduce using rule 253 (block_item_list -> block_item .)
    ENUM            reduce using rule 253 (block_item_list -> block_item .)
    STRUCT          reduce using rule 253 (block_item_list -> block_item .)
    UNION           reduce using rule 253 (block_item_list -> block_item .)
    INC_OP          reduce using rule 253 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 253 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 253 (block_item_list -> block_item .)
    ALIGNOF         reduce using rule 253 (block_item_list -> block_item .)
    LPAREN          reduce using rule 253 (block_item_list -> block_item .)
    AMP             reduce using rule 253 (block_item_list -> block_item .)
    TIMES           reduce using rule 253 (block_item_list -> block_item .)
    PLUS            reduce using rule 253 (block_item_list -> block_item .)
    MINUS           reduce using rule 253 (block_item_list -> block_item .)
    TILDE           reduce using rule 253 (block_item_list -> block_item .)
    NOT             reduce using rule 253 (block_item_list -> block_item .)
    NUMBER          reduce using rule 253 (block_item_list -> block_item .)
    I_CONSTANT      reduce using rule 253 (block_item_list -> block_item .)
    F_CONSTANT      reduce using rule 253 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 253 (block_item_list -> block_item .)
    FUNC_NAME       reduce using rule 253 (block_item_list -> block_item .)
    GENERIC         reduce using rule 253 (block_item_list -> block_item .)


state 149

    (255) block_item -> declaration .

    RFPAREN         reduce using rule 255 (block_item -> declaration .)
    STATIC_ASSERT   reduce using rule 255 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 255 (block_item -> declaration .)
    CASE            reduce using rule 255 (block_item -> declaration .)
    DEFAULT         reduce using rule 255 (block_item -> declaration .)
    LFPAREN         reduce using rule 255 (block_item -> declaration .)
    SCOLON          reduce using rule 255 (block_item -> declaration .)
    IF              reduce using rule 255 (block_item -> declaration .)
    SWITCH          reduce using rule 255 (block_item -> declaration .)
    WHILE           reduce using rule 255 (block_item -> declaration .)
    DO              reduce using rule 255 (block_item -> declaration .)
    FOR             reduce using rule 255 (block_item -> declaration .)
    GOTO            reduce using rule 255 (block_item -> declaration .)
    CONTINUE        reduce using rule 255 (block_item -> declaration .)
    BREAK           reduce using rule 255 (block_item -> declaration .)
    RETURN          reduce using rule 255 (block_item -> declaration .)
    TYPEDEF         reduce using rule 255 (block_item -> declaration .)
    EXTERN          reduce using rule 255 (block_item -> declaration .)
    STATIC          reduce using rule 255 (block_item -> declaration .)
    THREAD_LOCAL    reduce using rule 255 (block_item -> declaration .)
    AUTO            reduce using rule 255 (block_item -> declaration .)
    REGISTER        reduce using rule 255 (block_item -> declaration .)
    VOID            reduce using rule 255 (block_item -> declaration .)
    CHAR            reduce using rule 255 (block_item -> declaration .)
    SHORT           reduce using rule 255 (block_item -> declaration .)
    INT             reduce using rule 255 (block_item -> declaration .)
    LONG            reduce using rule 255 (block_item -> declaration .)
    FLOAT           reduce using rule 255 (block_item -> declaration .)
    DOUBLE          reduce using rule 255 (block_item -> declaration .)
    SIGNED          reduce using rule 255 (block_item -> declaration .)
    UNSIGNED        reduce using rule 255 (block_item -> declaration .)
    BOOL            reduce using rule 255 (block_item -> declaration .)
    COMPLEX         reduce using rule 255 (block_item -> declaration .)
    IMAGINARY       reduce using rule 255 (block_item -> declaration .)
    CONST           reduce using rule 255 (block_item -> declaration .)
    VOLATILE        reduce using rule 255 (block_item -> declaration .)
    ATOMIC          reduce using rule 255 (block_item -> declaration .)
    NORETURN        reduce using rule 255 (block_item -> declaration .)
    ALIGNAS         reduce using rule 255 (block_item -> declaration .)
    ENUM            reduce using rule 255 (block_item -> declaration .)
    STRUCT          reduce using rule 255 (block_item -> declaration .)
    UNION           reduce using rule 255 (block_item -> declaration .)
    INC_OP          reduce using rule 255 (block_item -> declaration .)
    DEC_OP          reduce using rule 255 (block_item -> declaration .)
    SIZEOF          reduce using rule 255 (block_item -> declaration .)
    ALIGNOF         reduce using rule 255 (block_item -> declaration .)
    LPAREN          reduce using rule 255 (block_item -> declaration .)
    AMP             reduce using rule 255 (block_item -> declaration .)
    TIMES           reduce using rule 255 (block_item -> declaration .)
    PLUS            reduce using rule 255 (block_item -> declaration .)
    MINUS           reduce using rule 255 (block_item -> declaration .)
    TILDE           reduce using rule 255 (block_item -> declaration .)
    NOT             reduce using rule 255 (block_item -> declaration .)
    NUMBER          reduce using rule 255 (block_item -> declaration .)
    I_CONSTANT      reduce using rule 255 (block_item -> declaration .)
    F_CONSTANT      reduce using rule 255 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 255 (block_item -> declaration .)
    FUNC_NAME       reduce using rule 255 (block_item -> declaration .)
    GENERIC         reduce using rule 255 (block_item -> declaration .)


state 150

    (256) block_item -> statement .

    RFPAREN         reduce using rule 256 (block_item -> statement .)
    STATIC_ASSERT   reduce using rule 256 (block_item -> statement .)
    IDENTIFIER      reduce using rule 256 (block_item -> statement .)
    CASE            reduce using rule 256 (block_item -> statement .)
    DEFAULT         reduce using rule 256 (block_item -> statement .)
    LFPAREN         reduce using rule 256 (block_item -> statement .)
    SCOLON          reduce using rule 256 (block_item -> statement .)
    IF              reduce using rule 256 (block_item -> statement .)
    SWITCH          reduce using rule 256 (block_item -> statement .)
    WHILE           reduce using rule 256 (block_item -> statement .)
    DO              reduce using rule 256 (block_item -> statement .)
    FOR             reduce using rule 256 (block_item -> statement .)
    GOTO            reduce using rule 256 (block_item -> statement .)
    CONTINUE        reduce using rule 256 (block_item -> statement .)
    BREAK           reduce using rule 256 (block_item -> statement .)
    RETURN          reduce using rule 256 (block_item -> statement .)
    TYPEDEF         reduce using rule 256 (block_item -> statement .)
    EXTERN          reduce using rule 256 (block_item -> statement .)
    STATIC          reduce using rule 256 (block_item -> statement .)
    THREAD_LOCAL    reduce using rule 256 (block_item -> statement .)
    AUTO            reduce using rule 256 (block_item -> statement .)
    REGISTER        reduce using rule 256 (block_item -> statement .)
    VOID            reduce using rule 256 (block_item -> statement .)
    CHAR            reduce using rule 256 (block_item -> statement .)
    SHORT           reduce using rule 256 (block_item -> statement .)
    INT             reduce using rule 256 (block_item -> statement .)
    LONG            reduce using rule 256 (block_item -> statement .)
    FLOAT           reduce using rule 256 (block_item -> statement .)
    DOUBLE          reduce using rule 256 (block_item -> statement .)
    SIGNED          reduce using rule 256 (block_item -> statement .)
    UNSIGNED        reduce using rule 256 (block_item -> statement .)
    BOOL            reduce using rule 256 (block_item -> statement .)
    COMPLEX         reduce using rule 256 (block_item -> statement .)
    IMAGINARY       reduce using rule 256 (block_item -> statement .)
    CONST           reduce using rule 256 (block_item -> statement .)
    VOLATILE        reduce using rule 256 (block_item -> statement .)
    ATOMIC          reduce using rule 256 (block_item -> statement .)
    NORETURN        reduce using rule 256 (block_item -> statement .)
    ALIGNAS         reduce using rule 256 (block_item -> statement .)
    ENUM            reduce using rule 256 (block_item -> statement .)
    STRUCT          reduce using rule 256 (block_item -> statement .)
    UNION           reduce using rule 256 (block_item -> statement .)
    INC_OP          reduce using rule 256 (block_item -> statement .)
    DEC_OP          reduce using rule 256 (block_item -> statement .)
    SIZEOF          reduce using rule 256 (block_item -> statement .)
    ALIGNOF         reduce using rule 256 (block_item -> statement .)
    LPAREN          reduce using rule 256 (block_item -> statement .)
    AMP             reduce using rule 256 (block_item -> statement .)
    TIMES           reduce using rule 256 (block_item -> statement .)
    PLUS            reduce using rule 256 (block_item -> statement .)
    MINUS           reduce using rule 256 (block_item -> statement .)
    TILDE           reduce using rule 256 (block_item -> statement .)
    NOT             reduce using rule 256 (block_item -> statement .)
    NUMBER          reduce using rule 256 (block_item -> statement .)
    I_CONSTANT      reduce using rule 256 (block_item -> statement .)
    F_CONSTANT      reduce using rule 256 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 256 (block_item -> statement .)
    FUNC_NAME       reduce using rule 256 (block_item -> statement .)
    GENERIC         reduce using rule 256 (block_item -> statement .)


state 151

    (257) expression_statement -> SCOLON .

    RFPAREN         reduce using rule 257 (expression_statement -> SCOLON .)
    STATIC_ASSERT   reduce using rule 257 (expression_statement -> SCOLON .)
    IDENTIFIER      reduce using rule 257 (expression_statement -> SCOLON .)
    CASE            reduce using rule 257 (expression_statement -> SCOLON .)
    DEFAULT         reduce using rule 257 (expression_statement -> SCOLON .)
    LFPAREN         reduce using rule 257 (expression_statement -> SCOLON .)
    SCOLON          reduce using rule 257 (expression_statement -> SCOLON .)
    IF              reduce using rule 257 (expression_statement -> SCOLON .)
    SWITCH          reduce using rule 257 (expression_statement -> SCOLON .)
    WHILE           reduce using rule 257 (expression_statement -> SCOLON .)
    DO              reduce using rule 257 (expression_statement -> SCOLON .)
    FOR             reduce using rule 257 (expression_statement -> SCOLON .)
    GOTO            reduce using rule 257 (expression_statement -> SCOLON .)
    CONTINUE        reduce using rule 257 (expression_statement -> SCOLON .)
    BREAK           reduce using rule 257 (expression_statement -> SCOLON .)
    RETURN          reduce using rule 257 (expression_statement -> SCOLON .)
    TYPEDEF         reduce using rule 257 (expression_statement -> SCOLON .)
    EXTERN          reduce using rule 257 (expression_statement -> SCOLON .)
    STATIC          reduce using rule 257 (expression_statement -> SCOLON .)
    THREAD_LOCAL    reduce using rule 257 (expression_statement -> SCOLON .)
    AUTO            reduce using rule 257 (expression_statement -> SCOLON .)
    REGISTER        reduce using rule 257 (expression_statement -> SCOLON .)
    VOID            reduce using rule 257 (expression_statement -> SCOLON .)
    CHAR            reduce using rule 257 (expression_statement -> SCOLON .)
    SHORT           reduce using rule 257 (expression_statement -> SCOLON .)
    INT             reduce using rule 257 (expression_statement -> SCOLON .)
    LONG            reduce using rule 257 (expression_statement -> SCOLON .)
    FLOAT           reduce using rule 257 (expression_statement -> SCOLON .)
    DOUBLE          reduce using rule 257 (expression_statement -> SCOLON .)
    SIGNED          reduce using rule 257 (expression_statement -> SCOLON .)
    UNSIGNED        reduce using rule 257 (expression_statement -> SCOLON .)
    BOOL            reduce using rule 257 (expression_statement -> SCOLON .)
    COMPLEX         reduce using rule 257 (expression_statement -> SCOLON .)
    IMAGINARY       reduce using rule 257 (expression_statement -> SCOLON .)
    CONST           reduce using rule 257 (expression_statement -> SCOLON .)
    VOLATILE        reduce using rule 257 (expression_statement -> SCOLON .)
    ATOMIC          reduce using rule 257 (expression_statement -> SCOLON .)
    NORETURN        reduce using rule 257 (expression_statement -> SCOLON .)
    ALIGNAS         reduce using rule 257 (expression_statement -> SCOLON .)
    ENUM            reduce using rule 257 (expression_statement -> SCOLON .)
    STRUCT          reduce using rule 257 (expression_statement -> SCOLON .)
    UNION           reduce using rule 257 (expression_statement -> SCOLON .)
    INC_OP          reduce using rule 257 (expression_statement -> SCOLON .)
    DEC_OP          reduce using rule 257 (expression_statement -> SCOLON .)
    SIZEOF          reduce using rule 257 (expression_statement -> SCOLON .)
    ALIGNOF         reduce using rule 257 (expression_statement -> SCOLON .)
    LPAREN          reduce using rule 257 (expression_statement -> SCOLON .)
    AMP             reduce using rule 257 (expression_statement -> SCOLON .)
    TIMES           reduce using rule 257 (expression_statement -> SCOLON .)
    PLUS            reduce using rule 257 (expression_statement -> SCOLON .)
    MINUS           reduce using rule 257 (expression_statement -> SCOLON .)
    TILDE           reduce using rule 257 (expression_statement -> SCOLON .)
    NOT             reduce using rule 257 (expression_statement -> SCOLON .)
    NUMBER          reduce using rule 257 (expression_statement -> SCOLON .)
    I_CONSTANT      reduce using rule 257 (expression_statement -> SCOLON .)
    F_CONSTANT      reduce using rule 257 (expression_statement -> SCOLON .)
    STRING_LITERAL  reduce using rule 257 (expression_statement -> SCOLON .)
    FUNC_NAME       reduce using rule 257 (expression_statement -> SCOLON .)
    GENERIC         reduce using rule 257 (expression_statement -> SCOLON .)
    ELSE            reduce using rule 257 (expression_statement -> SCOLON .)
    RPAREN          reduce using rule 257 (expression_statement -> SCOLON .)


state 152

    (242) statement -> labeled_statement .

    RFPAREN         reduce using rule 242 (statement -> labeled_statement .)
    STATIC_ASSERT   reduce using rule 242 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 242 (statement -> labeled_statement .)
    CASE            reduce using rule 242 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 242 (statement -> labeled_statement .)
    LFPAREN         reduce using rule 242 (statement -> labeled_statement .)
    SCOLON          reduce using rule 242 (statement -> labeled_statement .)
    IF              reduce using rule 242 (statement -> labeled_statement .)
    SWITCH          reduce using rule 242 (statement -> labeled_statement .)
    WHILE           reduce using rule 242 (statement -> labeled_statement .)
    DO              reduce using rule 242 (statement -> labeled_statement .)
    FOR             reduce using rule 242 (statement -> labeled_statement .)
    GOTO            reduce using rule 242 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 242 (statement -> labeled_statement .)
    BREAK           reduce using rule 242 (statement -> labeled_statement .)
    RETURN          reduce using rule 242 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 242 (statement -> labeled_statement .)
    EXTERN          reduce using rule 242 (statement -> labeled_statement .)
    STATIC          reduce using rule 242 (statement -> labeled_statement .)
    THREAD_LOCAL    reduce using rule 242 (statement -> labeled_statement .)
    AUTO            reduce using rule 242 (statement -> labeled_statement .)
    REGISTER        reduce using rule 242 (statement -> labeled_statement .)
    VOID            reduce using rule 242 (statement -> labeled_statement .)
    CHAR            reduce using rule 242 (statement -> labeled_statement .)
    SHORT           reduce using rule 242 (statement -> labeled_statement .)
    INT             reduce using rule 242 (statement -> labeled_statement .)
    LONG            reduce using rule 242 (statement -> labeled_statement .)
    FLOAT           reduce using rule 242 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 242 (statement -> labeled_statement .)
    SIGNED          reduce using rule 242 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 242 (statement -> labeled_statement .)
    BOOL            reduce using rule 242 (statement -> labeled_statement .)
    COMPLEX         reduce using rule 242 (statement -> labeled_statement .)
    IMAGINARY       reduce using rule 242 (statement -> labeled_statement .)
    CONST           reduce using rule 242 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 242 (statement -> labeled_statement .)
    ATOMIC          reduce using rule 242 (statement -> labeled_statement .)
    NORETURN        reduce using rule 242 (statement -> labeled_statement .)
    ALIGNAS         reduce using rule 242 (statement -> labeled_statement .)
    ENUM            reduce using rule 242 (statement -> labeled_statement .)
    STRUCT          reduce using rule 242 (statement -> labeled_statement .)
    UNION           reduce using rule 242 (statement -> labeled_statement .)
    INC_OP          reduce using rule 242 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 242 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 242 (statement -> labeled_statement .)
    ALIGNOF         reduce using rule 242 (statement -> labeled_statement .)
    LPAREN          reduce using rule 242 (statement -> labeled_statement .)
    AMP             reduce using rule 242 (statement -> labeled_statement .)
    TIMES           reduce using rule 242 (statement -> labeled_statement .)
    PLUS            reduce using rule 242 (statement -> labeled_statement .)
    MINUS           reduce using rule 242 (statement -> labeled_statement .)
    TILDE           reduce using rule 242 (statement -> labeled_statement .)
    NOT             reduce using rule 242 (statement -> labeled_statement .)
    NUMBER          reduce using rule 242 (statement -> labeled_statement .)
    I_CONSTANT      reduce using rule 242 (statement -> labeled_statement .)
    F_CONSTANT      reduce using rule 242 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 242 (statement -> labeled_statement .)
    FUNC_NAME       reduce using rule 242 (statement -> labeled_statement .)
    GENERIC         reduce using rule 242 (statement -> labeled_statement .)
    ELSE            reduce using rule 242 (statement -> labeled_statement .)


state 153

    (243) statement -> compound_statement .

    RFPAREN         reduce using rule 243 (statement -> compound_statement .)
    STATIC_ASSERT   reduce using rule 243 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 243 (statement -> compound_statement .)
    CASE            reduce using rule 243 (statement -> compound_statement .)
    DEFAULT         reduce using rule 243 (statement -> compound_statement .)
    LFPAREN         reduce using rule 243 (statement -> compound_statement .)
    SCOLON          reduce using rule 243 (statement -> compound_statement .)
    IF              reduce using rule 243 (statement -> compound_statement .)
    SWITCH          reduce using rule 243 (statement -> compound_statement .)
    WHILE           reduce using rule 243 (statement -> compound_statement .)
    DO              reduce using rule 243 (statement -> compound_statement .)
    FOR             reduce using rule 243 (statement -> compound_statement .)
    GOTO            reduce using rule 243 (statement -> compound_statement .)
    CONTINUE        reduce using rule 243 (statement -> compound_statement .)
    BREAK           reduce using rule 243 (statement -> compound_statement .)
    RETURN          reduce using rule 243 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 243 (statement -> compound_statement .)
    EXTERN          reduce using rule 243 (statement -> compound_statement .)
    STATIC          reduce using rule 243 (statement -> compound_statement .)
    THREAD_LOCAL    reduce using rule 243 (statement -> compound_statement .)
    AUTO            reduce using rule 243 (statement -> compound_statement .)
    REGISTER        reduce using rule 243 (statement -> compound_statement .)
    VOID            reduce using rule 243 (statement -> compound_statement .)
    CHAR            reduce using rule 243 (statement -> compound_statement .)
    SHORT           reduce using rule 243 (statement -> compound_statement .)
    INT             reduce using rule 243 (statement -> compound_statement .)
    LONG            reduce using rule 243 (statement -> compound_statement .)
    FLOAT           reduce using rule 243 (statement -> compound_statement .)
    DOUBLE          reduce using rule 243 (statement -> compound_statement .)
    SIGNED          reduce using rule 243 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 243 (statement -> compound_statement .)
    BOOL            reduce using rule 243 (statement -> compound_statement .)
    COMPLEX         reduce using rule 243 (statement -> compound_statement .)
    IMAGINARY       reduce using rule 243 (statement -> compound_statement .)
    CONST           reduce using rule 243 (statement -> compound_statement .)
    VOLATILE        reduce using rule 243 (statement -> compound_statement .)
    ATOMIC          reduce using rule 243 (statement -> compound_statement .)
    NORETURN        reduce using rule 243 (statement -> compound_statement .)
    ALIGNAS         reduce using rule 243 (statement -> compound_statement .)
    ENUM            reduce using rule 243 (statement -> compound_statement .)
    STRUCT          reduce using rule 243 (statement -> compound_statement .)
    UNION           reduce using rule 243 (statement -> compound_statement .)
    INC_OP          reduce using rule 243 (statement -> compound_statement .)
    DEC_OP          reduce using rule 243 (statement -> compound_statement .)
    SIZEOF          reduce using rule 243 (statement -> compound_statement .)
    ALIGNOF         reduce using rule 243 (statement -> compound_statement .)
    LPAREN          reduce using rule 243 (statement -> compound_statement .)
    AMP             reduce using rule 243 (statement -> compound_statement .)
    TIMES           reduce using rule 243 (statement -> compound_statement .)
    PLUS            reduce using rule 243 (statement -> compound_statement .)
    MINUS           reduce using rule 243 (statement -> compound_statement .)
    TILDE           reduce using rule 243 (statement -> compound_statement .)
    NOT             reduce using rule 243 (statement -> compound_statement .)
    NUMBER          reduce using rule 243 (statement -> compound_statement .)
    I_CONSTANT      reduce using rule 243 (statement -> compound_statement .)
    F_CONSTANT      reduce using rule 243 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 243 (statement -> compound_statement .)
    FUNC_NAME       reduce using rule 243 (statement -> compound_statement .)
    GENERIC         reduce using rule 243 (statement -> compound_statement .)
    ELSE            reduce using rule 243 (statement -> compound_statement .)


state 154

    (244) statement -> expression_statement .

    RFPAREN         reduce using rule 244 (statement -> expression_statement .)
    STATIC_ASSERT   reduce using rule 244 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 244 (statement -> expression_statement .)
    CASE            reduce using rule 244 (statement -> expression_statement .)
    DEFAULT         reduce using rule 244 (statement -> expression_statement .)
    LFPAREN         reduce using rule 244 (statement -> expression_statement .)
    SCOLON          reduce using rule 244 (statement -> expression_statement .)
    IF              reduce using rule 244 (statement -> expression_statement .)
    SWITCH          reduce using rule 244 (statement -> expression_statement .)
    WHILE           reduce using rule 244 (statement -> expression_statement .)
    DO              reduce using rule 244 (statement -> expression_statement .)
    FOR             reduce using rule 244 (statement -> expression_statement .)
    GOTO            reduce using rule 244 (statement -> expression_statement .)
    CONTINUE        reduce using rule 244 (statement -> expression_statement .)
    BREAK           reduce using rule 244 (statement -> expression_statement .)
    RETURN          reduce using rule 244 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 244 (statement -> expression_statement .)
    EXTERN          reduce using rule 244 (statement -> expression_statement .)
    STATIC          reduce using rule 244 (statement -> expression_statement .)
    THREAD_LOCAL    reduce using rule 244 (statement -> expression_statement .)
    AUTO            reduce using rule 244 (statement -> expression_statement .)
    REGISTER        reduce using rule 244 (statement -> expression_statement .)
    VOID            reduce using rule 244 (statement -> expression_statement .)
    CHAR            reduce using rule 244 (statement -> expression_statement .)
    SHORT           reduce using rule 244 (statement -> expression_statement .)
    INT             reduce using rule 244 (statement -> expression_statement .)
    LONG            reduce using rule 244 (statement -> expression_statement .)
    FLOAT           reduce using rule 244 (statement -> expression_statement .)
    DOUBLE          reduce using rule 244 (statement -> expression_statement .)
    SIGNED          reduce using rule 244 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 244 (statement -> expression_statement .)
    BOOL            reduce using rule 244 (statement -> expression_statement .)
    COMPLEX         reduce using rule 244 (statement -> expression_statement .)
    IMAGINARY       reduce using rule 244 (statement -> expression_statement .)
    CONST           reduce using rule 244 (statement -> expression_statement .)
    VOLATILE        reduce using rule 244 (statement -> expression_statement .)
    ATOMIC          reduce using rule 244 (statement -> expression_statement .)
    NORETURN        reduce using rule 244 (statement -> expression_statement .)
    ALIGNAS         reduce using rule 244 (statement -> expression_statement .)
    ENUM            reduce using rule 244 (statement -> expression_statement .)
    STRUCT          reduce using rule 244 (statement -> expression_statement .)
    UNION           reduce using rule 244 (statement -> expression_statement .)
    INC_OP          reduce using rule 244 (statement -> expression_statement .)
    DEC_OP          reduce using rule 244 (statement -> expression_statement .)
    SIZEOF          reduce using rule 244 (statement -> expression_statement .)
    ALIGNOF         reduce using rule 244 (statement -> expression_statement .)
    LPAREN          reduce using rule 244 (statement -> expression_statement .)
    AMP             reduce using rule 244 (statement -> expression_statement .)
    TIMES           reduce using rule 244 (statement -> expression_statement .)
    PLUS            reduce using rule 244 (statement -> expression_statement .)
    MINUS           reduce using rule 244 (statement -> expression_statement .)
    TILDE           reduce using rule 244 (statement -> expression_statement .)
    NOT             reduce using rule 244 (statement -> expression_statement .)
    NUMBER          reduce using rule 244 (statement -> expression_statement .)
    I_CONSTANT      reduce using rule 244 (statement -> expression_statement .)
    F_CONSTANT      reduce using rule 244 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 244 (statement -> expression_statement .)
    FUNC_NAME       reduce using rule 244 (statement -> expression_statement .)
    GENERIC         reduce using rule 244 (statement -> expression_statement .)
    ELSE            reduce using rule 244 (statement -> expression_statement .)


state 155

    (245) statement -> selection_statement .

    RFPAREN         reduce using rule 245 (statement -> selection_statement .)
    STATIC_ASSERT   reduce using rule 245 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 245 (statement -> selection_statement .)
    CASE            reduce using rule 245 (statement -> selection_statement .)
    DEFAULT         reduce using rule 245 (statement -> selection_statement .)
    LFPAREN         reduce using rule 245 (statement -> selection_statement .)
    SCOLON          reduce using rule 245 (statement -> selection_statement .)
    IF              reduce using rule 245 (statement -> selection_statement .)
    SWITCH          reduce using rule 245 (statement -> selection_statement .)
    WHILE           reduce using rule 245 (statement -> selection_statement .)
    DO              reduce using rule 245 (statement -> selection_statement .)
    FOR             reduce using rule 245 (statement -> selection_statement .)
    GOTO            reduce using rule 245 (statement -> selection_statement .)
    CONTINUE        reduce using rule 245 (statement -> selection_statement .)
    BREAK           reduce using rule 245 (statement -> selection_statement .)
    RETURN          reduce using rule 245 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 245 (statement -> selection_statement .)
    EXTERN          reduce using rule 245 (statement -> selection_statement .)
    STATIC          reduce using rule 245 (statement -> selection_statement .)
    THREAD_LOCAL    reduce using rule 245 (statement -> selection_statement .)
    AUTO            reduce using rule 245 (statement -> selection_statement .)
    REGISTER        reduce using rule 245 (statement -> selection_statement .)
    VOID            reduce using rule 245 (statement -> selection_statement .)
    CHAR            reduce using rule 245 (statement -> selection_statement .)
    SHORT           reduce using rule 245 (statement -> selection_statement .)
    INT             reduce using rule 245 (statement -> selection_statement .)
    LONG            reduce using rule 245 (statement -> selection_statement .)
    FLOAT           reduce using rule 245 (statement -> selection_statement .)
    DOUBLE          reduce using rule 245 (statement -> selection_statement .)
    SIGNED          reduce using rule 245 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 245 (statement -> selection_statement .)
    BOOL            reduce using rule 245 (statement -> selection_statement .)
    COMPLEX         reduce using rule 245 (statement -> selection_statement .)
    IMAGINARY       reduce using rule 245 (statement -> selection_statement .)
    CONST           reduce using rule 245 (statement -> selection_statement .)
    VOLATILE        reduce using rule 245 (statement -> selection_statement .)
    ATOMIC          reduce using rule 245 (statement -> selection_statement .)
    NORETURN        reduce using rule 245 (statement -> selection_statement .)
    ALIGNAS         reduce using rule 245 (statement -> selection_statement .)
    ENUM            reduce using rule 245 (statement -> selection_statement .)
    STRUCT          reduce using rule 245 (statement -> selection_statement .)
    UNION           reduce using rule 245 (statement -> selection_statement .)
    INC_OP          reduce using rule 245 (statement -> selection_statement .)
    DEC_OP          reduce using rule 245 (statement -> selection_statement .)
    SIZEOF          reduce using rule 245 (statement -> selection_statement .)
    ALIGNOF         reduce using rule 245 (statement -> selection_statement .)
    LPAREN          reduce using rule 245 (statement -> selection_statement .)
    AMP             reduce using rule 245 (statement -> selection_statement .)
    TIMES           reduce using rule 245 (statement -> selection_statement .)
    PLUS            reduce using rule 245 (statement -> selection_statement .)
    MINUS           reduce using rule 245 (statement -> selection_statement .)
    TILDE           reduce using rule 245 (statement -> selection_statement .)
    NOT             reduce using rule 245 (statement -> selection_statement .)
    NUMBER          reduce using rule 245 (statement -> selection_statement .)
    I_CONSTANT      reduce using rule 245 (statement -> selection_statement .)
    F_CONSTANT      reduce using rule 245 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 245 (statement -> selection_statement .)
    FUNC_NAME       reduce using rule 245 (statement -> selection_statement .)
    GENERIC         reduce using rule 245 (statement -> selection_statement .)
    ELSE            reduce using rule 245 (statement -> selection_statement .)


state 156

    (246) statement -> iteration_statement .

    RFPAREN         reduce using rule 246 (statement -> iteration_statement .)
    STATIC_ASSERT   reduce using rule 246 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 246 (statement -> iteration_statement .)
    CASE            reduce using rule 246 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 246 (statement -> iteration_statement .)
    LFPAREN         reduce using rule 246 (statement -> iteration_statement .)
    SCOLON          reduce using rule 246 (statement -> iteration_statement .)
    IF              reduce using rule 246 (statement -> iteration_statement .)
    SWITCH          reduce using rule 246 (statement -> iteration_statement .)
    WHILE           reduce using rule 246 (statement -> iteration_statement .)
    DO              reduce using rule 246 (statement -> iteration_statement .)
    FOR             reduce using rule 246 (statement -> iteration_statement .)
    GOTO            reduce using rule 246 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 246 (statement -> iteration_statement .)
    BREAK           reduce using rule 246 (statement -> iteration_statement .)
    RETURN          reduce using rule 246 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 246 (statement -> iteration_statement .)
    EXTERN          reduce using rule 246 (statement -> iteration_statement .)
    STATIC          reduce using rule 246 (statement -> iteration_statement .)
    THREAD_LOCAL    reduce using rule 246 (statement -> iteration_statement .)
    AUTO            reduce using rule 246 (statement -> iteration_statement .)
    REGISTER        reduce using rule 246 (statement -> iteration_statement .)
    VOID            reduce using rule 246 (statement -> iteration_statement .)
    CHAR            reduce using rule 246 (statement -> iteration_statement .)
    SHORT           reduce using rule 246 (statement -> iteration_statement .)
    INT             reduce using rule 246 (statement -> iteration_statement .)
    LONG            reduce using rule 246 (statement -> iteration_statement .)
    FLOAT           reduce using rule 246 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 246 (statement -> iteration_statement .)
    SIGNED          reduce using rule 246 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 246 (statement -> iteration_statement .)
    BOOL            reduce using rule 246 (statement -> iteration_statement .)
    COMPLEX         reduce using rule 246 (statement -> iteration_statement .)
    IMAGINARY       reduce using rule 246 (statement -> iteration_statement .)
    CONST           reduce using rule 246 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 246 (statement -> iteration_statement .)
    ATOMIC          reduce using rule 246 (statement -> iteration_statement .)
    NORETURN        reduce using rule 246 (statement -> iteration_statement .)
    ALIGNAS         reduce using rule 246 (statement -> iteration_statement .)
    ENUM            reduce using rule 246 (statement -> iteration_statement .)
    STRUCT          reduce using rule 246 (statement -> iteration_statement .)
    UNION           reduce using rule 246 (statement -> iteration_statement .)
    INC_OP          reduce using rule 246 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 246 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 246 (statement -> iteration_statement .)
    ALIGNOF         reduce using rule 246 (statement -> iteration_statement .)
    LPAREN          reduce using rule 246 (statement -> iteration_statement .)
    AMP             reduce using rule 246 (statement -> iteration_statement .)
    TIMES           reduce using rule 246 (statement -> iteration_statement .)
    PLUS            reduce using rule 246 (statement -> iteration_statement .)
    MINUS           reduce using rule 246 (statement -> iteration_statement .)
    TILDE           reduce using rule 246 (statement -> iteration_statement .)
    NOT             reduce using rule 246 (statement -> iteration_statement .)
    NUMBER          reduce using rule 246 (statement -> iteration_statement .)
    I_CONSTANT      reduce using rule 246 (statement -> iteration_statement .)
    F_CONSTANT      reduce using rule 246 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 246 (statement -> iteration_statement .)
    FUNC_NAME       reduce using rule 246 (statement -> iteration_statement .)
    GENERIC         reduce using rule 246 (statement -> iteration_statement .)
    ELSE            reduce using rule 246 (statement -> iteration_statement .)


state 157

    (247) statement -> jump_statement .

    RFPAREN         reduce using rule 247 (statement -> jump_statement .)
    STATIC_ASSERT   reduce using rule 247 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 247 (statement -> jump_statement .)
    CASE            reduce using rule 247 (statement -> jump_statement .)
    DEFAULT         reduce using rule 247 (statement -> jump_statement .)
    LFPAREN         reduce using rule 247 (statement -> jump_statement .)
    SCOLON          reduce using rule 247 (statement -> jump_statement .)
    IF              reduce using rule 247 (statement -> jump_statement .)
    SWITCH          reduce using rule 247 (statement -> jump_statement .)
    WHILE           reduce using rule 247 (statement -> jump_statement .)
    DO              reduce using rule 247 (statement -> jump_statement .)
    FOR             reduce using rule 247 (statement -> jump_statement .)
    GOTO            reduce using rule 247 (statement -> jump_statement .)
    CONTINUE        reduce using rule 247 (statement -> jump_statement .)
    BREAK           reduce using rule 247 (statement -> jump_statement .)
    RETURN          reduce using rule 247 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 247 (statement -> jump_statement .)
    EXTERN          reduce using rule 247 (statement -> jump_statement .)
    STATIC          reduce using rule 247 (statement -> jump_statement .)
    THREAD_LOCAL    reduce using rule 247 (statement -> jump_statement .)
    AUTO            reduce using rule 247 (statement -> jump_statement .)
    REGISTER        reduce using rule 247 (statement -> jump_statement .)
    VOID            reduce using rule 247 (statement -> jump_statement .)
    CHAR            reduce using rule 247 (statement -> jump_statement .)
    SHORT           reduce using rule 247 (statement -> jump_statement .)
    INT             reduce using rule 247 (statement -> jump_statement .)
    LONG            reduce using rule 247 (statement -> jump_statement .)
    FLOAT           reduce using rule 247 (statement -> jump_statement .)
    DOUBLE          reduce using rule 247 (statement -> jump_statement .)
    SIGNED          reduce using rule 247 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 247 (statement -> jump_statement .)
    BOOL            reduce using rule 247 (statement -> jump_statement .)
    COMPLEX         reduce using rule 247 (statement -> jump_statement .)
    IMAGINARY       reduce using rule 247 (statement -> jump_statement .)
    CONST           reduce using rule 247 (statement -> jump_statement .)
    VOLATILE        reduce using rule 247 (statement -> jump_statement .)
    ATOMIC          reduce using rule 247 (statement -> jump_statement .)
    NORETURN        reduce using rule 247 (statement -> jump_statement .)
    ALIGNAS         reduce using rule 247 (statement -> jump_statement .)
    ENUM            reduce using rule 247 (statement -> jump_statement .)
    STRUCT          reduce using rule 247 (statement -> jump_statement .)
    UNION           reduce using rule 247 (statement -> jump_statement .)
    INC_OP          reduce using rule 247 (statement -> jump_statement .)
    DEC_OP          reduce using rule 247 (statement -> jump_statement .)
    SIZEOF          reduce using rule 247 (statement -> jump_statement .)
    ALIGNOF         reduce using rule 247 (statement -> jump_statement .)
    LPAREN          reduce using rule 247 (statement -> jump_statement .)
    AMP             reduce using rule 247 (statement -> jump_statement .)
    TIMES           reduce using rule 247 (statement -> jump_statement .)
    PLUS            reduce using rule 247 (statement -> jump_statement .)
    MINUS           reduce using rule 247 (statement -> jump_statement .)
    TILDE           reduce using rule 247 (statement -> jump_statement .)
    NOT             reduce using rule 247 (statement -> jump_statement .)
    NUMBER          reduce using rule 247 (statement -> jump_statement .)
    I_CONSTANT      reduce using rule 247 (statement -> jump_statement .)
    F_CONSTANT      reduce using rule 247 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 247 (statement -> jump_statement .)
    FUNC_NAME       reduce using rule 247 (statement -> jump_statement .)
    GENERIC         reduce using rule 247 (statement -> jump_statement .)
    ELSE            reduce using rule 247 (statement -> jump_statement .)


state 158

    (248) labeled_statement -> IDENTIFIER . COLON statement
    (10) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 268
    RSQUARE         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LPAREN          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 10 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DIVIDES         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LT_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    GT_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    AMP             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 10 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    QMARK           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SCOLON          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 10 (primary_expression -> IDENTIFIER .)


state 159

    (249) labeled_statement -> CASE . constant_expression COLON statement
    (97) constant_expression -> . conditional_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 269
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 160

    (250) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 270


state 161

    (258) expression_statement -> expression . SCOLON
    (96) expression -> expression . COMMA assignment_expression

    SCOLON          shift and go to state 271
    COMMA           shift and go to state 272


state 162

    (259) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> IF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 273


state 163

    (261) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 274


state 164

    (262) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 275


state 165

    (263) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SCOLON
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    statement                      shift and go to state 276
    expression                     shift and go to state 161
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 166

    (264) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> FOR . LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> FOR . LPAREN declaration expression_statement expression RPAREN statement

    LPAREN          shift and go to state 277


state 167

    (268) jump_statement -> GOTO . IDENTIFIER SCOLON

    IDENTIFIER      shift and go to state 278


state 168

    (269) jump_statement -> CONTINUE . SCOLON

    SCOLON          shift and go to state 279


state 169

    (270) jump_statement -> BREAK . SCOLON

    SCOLON          shift and go to state 280


state 170

    (271) jump_statement -> RETURN . SCOLON
    (272) jump_statement -> RETURN . expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SCOLON          shift and go to state 281
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 282
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 171

    (95) expression -> assignment_expression .

    SCOLON          reduce using rule 95 (expression -> assignment_expression .)
    COMMA           reduce using rule 95 (expression -> assignment_expression .)
    RPAREN          reduce using rule 95 (expression -> assignment_expression .)
    COLON           reduce using rule 95 (expression -> assignment_expression .)
    LSQUARE         reduce using rule 95 (expression -> assignment_expression .)


state 172

    (113) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SCOLON          reduce using rule 113 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 113 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 173

    (177) direct_declarator -> direct_declarator RSQUARE LSQUARE .

    RSQUARE         reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    LPAREN          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    EQUALS          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    LFPAREN         reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    STATIC_ASSERT   reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    TYPEDEF         reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    EXTERN          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    STATIC          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    THREAD_LOCAL    reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    AUTO            reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    REGISTER        reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    VOID            reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    CHAR            reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    SHORT           reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    INT             reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    LONG            reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    FLOAT           reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    DOUBLE          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    SIGNED          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    UNSIGNED        reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    BOOL            reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    COMPLEX         reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    IMAGINARY       reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    CONST           reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    VOLATILE        reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    ATOMIC          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    NORETURN        reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    ALIGNAS         reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    ENUM            reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    STRUCT          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    UNION           reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    SCOLON          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    TIMES           reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    IDENTIFIER      reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    COMMA           reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    RPAREN          reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)
    COLON           reduce using rule 177 (direct_declarator -> direct_declarator RSQUARE LSQUARE .)


state 174

    (178) direct_declarator -> direct_declarator RSQUARE TIMES . LSQUARE
    (45) unary_oper -> TIMES .

    LSQUARE         shift and go to state 283
    LPAREN          reduce using rule 45 (unary_oper -> TIMES .)
    INC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    DEC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    SIZEOF          reduce using rule 45 (unary_oper -> TIMES .)
    ALIGNOF         reduce using rule 45 (unary_oper -> TIMES .)
    AMP             reduce using rule 45 (unary_oper -> TIMES .)
    TIMES           reduce using rule 45 (unary_oper -> TIMES .)
    PLUS            reduce using rule 45 (unary_oper -> TIMES .)
    MINUS           reduce using rule 45 (unary_oper -> TIMES .)
    TILDE           reduce using rule 45 (unary_oper -> TIMES .)
    NOT             reduce using rule 45 (unary_oper -> TIMES .)
    IDENTIFIER      reduce using rule 45 (unary_oper -> TIMES .)
    NUMBER          reduce using rule 45 (unary_oper -> TIMES .)
    I_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    F_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    STRING_LITERAL  reduce using rule 45 (unary_oper -> TIMES .)
    FUNC_NAME       reduce using rule 45 (unary_oper -> TIMES .)
    GENERIC         reduce using rule 45 (unary_oper -> TIMES .)


state 175

    (179) direct_declarator -> direct_declarator RSQUARE STATIC . type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> direct_declarator RSQUARE STATIC . assignment_expression LSQUARE
    (193) type_qualifier_list -> . type_qualifier
    (194) type_qualifier_list -> . type_qualifier_list type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 284
    assignment_expression          shift and go to state 285
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 176

    (181) direct_declarator -> direct_declarator RSQUARE type_qualifier_list . TIMES LSQUARE
    (182) direct_declarator -> direct_declarator RSQUARE type_qualifier_list . STATIC assignment_expression LSQUARE
    (183) direct_declarator -> direct_declarator RSQUARE type_qualifier_list . assignment_expression LSQUARE
    (184) direct_declarator -> direct_declarator RSQUARE type_qualifier_list . LSQUARE
    (194) type_qualifier_list -> type_qualifier_list . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 286
    STATIC          shift and go to state 288
    LSQUARE         shift and go to state 287
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 289
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 177

    (185) direct_declarator -> direct_declarator RSQUARE assignment_expression . LSQUARE

    LSQUARE         shift and go to state 290


state 178

    (186) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 291


state 179

    (187) direct_declarator -> direct_declarator LPAREN RPAREN .

    RSQUARE         reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EQUALS          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LFPAREN         reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC_ASSERT   reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    THREAD_LOCAL    reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    BOOL            reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMPLEX         reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    IMAGINARY       reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ATOMIC          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    NORETURN        reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ALIGNAS         reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SCOLON          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TIMES           reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 187 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 180

    (188) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (203) identifier_list -> identifier_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 292
    COMMA           shift and go to state 293


state 181

    (195) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (196) parameter_type_list -> parameter_list .
    (198) parameter_list -> parameter_list . COMMA parameter_declaration

    COMMA           shift and go to state 294
    RPAREN          reduce using rule 196 (parameter_type_list -> parameter_list .)


state 182

    (202) identifier_list -> IDENTIFIER .

    RPAREN          reduce using rule 202 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 202 (identifier_list -> IDENTIFIER .)


state 183

    (197) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 197 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 197 (parameter_list -> parameter_declaration .)


state 184

    (199) parameter_declaration -> declaration_specifiers . declarator
    (200) parameter_declaration -> declaration_specifiers . abstract_declarator
    (201) parameter_declaration -> declaration_specifiers .
    (172) declarator -> . pointer direct_declarator
    (173) declarator -> . direct_declarator
    (206) abstract_declarator -> . pointer direct_abstract_declarator
    (207) abstract_declarator -> . pointer
    (208) abstract_declarator -> . direct_abstract_declarator
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (209) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (210) direct_abstract_declarator -> . RSQUARE LSQUARE
    (211) direct_abstract_declarator -> . RSQUARE TIMES LSQUARE
    (212) direct_abstract_declarator -> . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (213) direct_abstract_declarator -> . RSQUARE STATIC assignment_expression LSQUARE
    (214) direct_abstract_declarator -> . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (215) direct_abstract_declarator -> . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (216) direct_abstract_declarator -> . RSQUARE type_qualifier_list LSQUARE
    (217) direct_abstract_declarator -> . RSQUARE assignment_expression LSQUARE
    (218) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE LSQUARE
    (219) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE TIMES LSQUARE
    (220) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE assignment_expression LSQUARE
    (226) direct_abstract_declarator -> . LPAREN RPAREN
    (227) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (228) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (229) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 201 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 201 (parameter_declaration -> declaration_specifiers .)
    TIMES           shift and go to state 51
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 298
    RSQUARE         shift and go to state 230

    declarator                     shift and go to state 295
    abstract_declarator            shift and go to state 296
    pointer                        shift and go to state 297
    direct_declarator              shift and go to state 49
    direct_abstract_declarator     shift and go to state 228

state 185

    (189) pointer -> TIMES type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 189 (pointer -> TIMES type_qualifier_list pointer .)
    LPAREN          reduce using rule 189 (pointer -> TIMES type_qualifier_list pointer .)
    RSQUARE         reduce using rule 189 (pointer -> TIMES type_qualifier_list pointer .)
    RPAREN          reduce using rule 189 (pointer -> TIMES type_qualifier_list pointer .)
    COLON           reduce using rule 189 (pointer -> TIMES type_qualifier_list pointer .)
    COMMA           reduce using rule 189 (pointer -> TIMES type_qualifier_list pointer .)


state 186

    (194) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ATOMIC          reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RSQUARE         reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COLON           reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LSQUARE         reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INC_OP          reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DEC_OP          reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ALIGNOF         reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AMP             reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUS            reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUS           reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TILDE           reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NOT             reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NUMBER          reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    I_CONSTANT      reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    F_CONSTANT      reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FUNC_NAME       reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    GENERIC         reduce using rule 194 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 187

    (175) direct_declarator -> IDENTIFIER LSQUARE NUMBER . RSQUARE

    RSQUARE         shift and go to state 299


state 188

    (176) direct_declarator -> LPAREN declarator RPAREN .

    RSQUARE         reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    LFPAREN         reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC_ASSERT   reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    THREAD_LOCAL    reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    BOOL            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    COMPLEX         reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    IMAGINARY       reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    ATOMIC          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    NORETURN        reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    ALIGNAS         reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    SCOLON          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    TIMES           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    IDENTIFIER      reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 176 (direct_declarator -> LPAREN declarator RPAREN .)


state 189

    (51) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (34) postfix_expression -> LPAREN type_name . RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN

    RPAREN          shift and go to state 300


state 190

    (13) primary_expression -> LPAREN expression . RPAREN
    (96) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 301
    COMMA           shift and go to state 272


state 191

    (241) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA . STRING_LITERAL RPAREN SCOLON

    STRING_LITERAL  shift and go to state 302


state 192

    (81) conditional_expression -> logical_or_expression QMARK . expression COLON conditional_expression
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    logical_or_expression          shift and go to state 87
    expression                     shift and go to state 303
    conditional_expression         shift and go to state 143
    assignment_expression          shift and go to state 171
    unary_expression               shift and go to state 144
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 193

    (79) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    logical_and_expression         shift and go to state 304
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 194

    (77) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    inclusive_or_expression        shift and go to state 305
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 195

    (75) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    exclusive_or_expression        shift and go to state 306
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 196

    (73) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    and_expression                 shift and go to state 307
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 197

    (71) and_expression -> and_expression AMP . equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    equality_expression            shift and go to state 308
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 198

    (68) equality_expression -> equality_expression EQ_OP . relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    relational_expression          shift and go to state 309
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 199

    (69) equality_expression -> equality_expression NE_OP . relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    relational_expression          shift and go to state 310
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 200

    (63) relational_expression -> relational_expression LT_OP . shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    shift_expression               shift and go to state 311
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 201

    (64) relational_expression -> relational_expression GT_OP . shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    shift_expression               shift and go to state 312
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 202

    (65) relational_expression -> relational_expression LE_OP . shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    shift_expression               shift and go to state 313
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 203

    (66) relational_expression -> relational_expression GE_OP . shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    shift_expression               shift and go to state 314
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 204

    (60) shift_expression -> shift_expression LEFT_OP . additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    additive_expression            shift and go to state 315
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 205

    (61) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    additive_expression            shift and go to state 316
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 206

    (57) additive_expression -> additive_expression PLUS . multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    multiplicative_expression      shift and go to state 317
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 207

    (58) additive_expression -> additive_expression MINUS . multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    multiplicative_expression      shift and go to state 318
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 208

    (53) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 319
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 209

    (54) multiplicative_expression -> multiplicative_expression DIVIDES . cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 320
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 210

    (55) multiplicative_expression -> multiplicative_expression MODULUS . cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 321
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 211

    (27) postfix_expression -> postfix_expression RSQUARE . expression LSQUARE
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    postfix_expression             shift and go to state 103
    expression                     shift and go to state 322
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 212

    (28) postfix_expression -> postfix_expression LPAREN . RPAREN
    (29) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (35) argument_expression_list -> . assignment_expression
    (36) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 323
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    postfix_expression             shift and go to state 103
    argument_expression_list       shift and go to state 324
    assignment_expression          shift and go to state 325
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 213

    (30) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 326


state 214

    (31) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 327


state 215

    (32) postfix_expression -> postfix_expression INC_OP .

    RSQUARE         reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    LPAREN          reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    DOT             reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    TIMES           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    DIVIDES         reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    MODULUS         reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    LT_OP           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    GT_OP           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    AMP             reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    XOR             reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    OR              reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    QMARK           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    RPAREN          reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    EQUALS          reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    SCOLON          reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    LSQUARE         reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    RFPAREN         reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 32 (postfix_expression -> postfix_expression INC_OP .)


state 216

    (33) postfix_expression -> postfix_expression DEC_OP .

    RSQUARE         reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    LPAREN          reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    DOT             reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    TIMES           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    DIVIDES         reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    MODULUS         reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    LT_OP           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    GT_OP           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    AMP             reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    XOR             reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    OR              reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    QMARK           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    RPAREN          reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    EQUALS          reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    SCOLON          reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    LSQUARE         reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    RFPAREN         reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 33 (postfix_expression -> postfix_expression DEC_OP .)


state 217

    (38) unary_expression -> INC_OP unary_expression .

    TIMES           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    DIVIDES         reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    MODULUS         reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    LT_OP           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    GT_OP           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    AMP             reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    XOR             reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    OR              reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    QMARK           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    RPAREN          reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    EQUALS          reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    SCOLON          reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    LSQUARE         reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    RFPAREN         reduce using rule 38 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 38 (unary_expression -> INC_OP unary_expression .)


state 218

    (34) postfix_expression -> LPAREN . type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (13) primary_expression -> LPAREN . expression RPAREN
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 41
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 328
    expression                     shift and go to state 190
    specifier_qualifier_list       shift and go to state 122
    assignment_expression          shift and go to state 171
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    struct_or_union                shift and go to state 40
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 219

    (39) unary_expression -> DEC_OP unary_expression .

    TIMES           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    DIVIDES         reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    MODULUS         reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    LT_OP           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    GT_OP           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    AMP             reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    XOR             reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    OR              reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    QMARK           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    RPAREN          reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    EQUALS          reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    SCOLON          reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    LSQUARE         reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    RFPAREN         reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 39 (unary_expression -> DEC_OP unary_expression .)


state 220

    (40) unary_expression -> unary_oper cast_expression .

    TIMES           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    DIVIDES         reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    MODULUS         reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    PLUS            reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    MINUS           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    LEFT_OP         reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    RIGHT_OP        reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    LT_OP           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    GT_OP           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    LE_OP           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    GE_OP           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    EQ_OP           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    NE_OP           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    AMP             reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    XOR             reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    OR              reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    AND_OP          reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    QMARK           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    OR_OP           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    COMMA           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    RPAREN          reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    EQUALS          reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    MUL_ASSIGN      reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    DIV_ASSIGN      reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    MOD_ASSIGN      reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    ADD_ASSIGN      reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    SUB_ASSIGN      reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    LEFT_ASSIGN     reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    RIGHT_ASSIGN    reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    AND_ASSIGN      reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    XOR_ASSIGN      reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    OR_ASSIGN       reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    SCOLON          reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    LSQUARE         reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    RFPAREN         reduce using rule 40 (unary_expression -> unary_oper cast_expression .)
    COLON           reduce using rule 40 (unary_expression -> unary_oper cast_expression .)


state 221

    (41) unary_expression -> SIZEOF unary_expression .

    TIMES           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    DIVIDES         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MODULUS         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LT_OP           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    GT_OP           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    AMP             reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    QMARK           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    SCOLON          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LSQUARE         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RFPAREN         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)


state 222

    (42) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (34) postfix_expression -> LPAREN . type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (13) primary_expression -> LPAREN . expression RPAREN
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 41
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_name                      shift and go to state 329
    expression                     shift and go to state 190
    specifier_qualifier_list       shift and go to state 122
    assignment_expression          shift and go to state 171
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    struct_or_union                shift and go to state 40
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 223

    (43) unary_expression -> ALIGNOF LPAREN . type_name RPAREN
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    type_name                      shift and go to state 330
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 224

    (21) generic_selection -> GENERIC LPAREN . assignment_expression COMMA generic_assoc_list RPAREN
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 331
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 225

    (165) atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .

    TYPEDEF         reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    STATIC          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    THREAD_LOCAL    reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    AUTO            reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    VOID            reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    CHAR            reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    SHORT           reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    INT             reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    LONG            reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    BOOL            reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    COMPLEX         reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    IMAGINARY       reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    CONST           reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    ATOMIC          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    NORETURN        reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    ALIGNAS         reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    ENUM            reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    UNION           reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    SCOLON          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    TIMES           reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    IDENTIFIER      reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    RSQUARE         reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    COMMA           reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)
    COLON           reduce using rule 165 (atomic_type_specifier -> ATOMIC LPAREN type_name RPAREN .)


state 226

    (204) type_name -> specifier_qualifier_list abstract_declarator .

    RPAREN          reduce using rule 204 (type_name -> specifier_qualifier_list abstract_declarator .)
    COLON           reduce using rule 204 (type_name -> specifier_qualifier_list abstract_declarator .)


state 227

    (206) abstract_declarator -> pointer . direct_abstract_declarator
    (207) abstract_declarator -> pointer .
    (209) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (210) direct_abstract_declarator -> . RSQUARE LSQUARE
    (211) direct_abstract_declarator -> . RSQUARE TIMES LSQUARE
    (212) direct_abstract_declarator -> . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (213) direct_abstract_declarator -> . RSQUARE STATIC assignment_expression LSQUARE
    (214) direct_abstract_declarator -> . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (215) direct_abstract_declarator -> . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (216) direct_abstract_declarator -> . RSQUARE type_qualifier_list LSQUARE
    (217) direct_abstract_declarator -> . RSQUARE assignment_expression LSQUARE
    (218) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE LSQUARE
    (219) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE TIMES LSQUARE
    (220) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE assignment_expression LSQUARE
    (226) direct_abstract_declarator -> . LPAREN RPAREN
    (227) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (228) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (229) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 207 (abstract_declarator -> pointer .)
    COLON           reduce using rule 207 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 229
    RSQUARE         shift and go to state 230

    direct_abstract_declarator     shift and go to state 332

state 228

    (208) abstract_declarator -> direct_abstract_declarator .
    (218) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE LSQUARE
    (219) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE TIMES LSQUARE
    (220) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE assignment_expression LSQUARE
    (228) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (229) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 208 (abstract_declarator -> direct_abstract_declarator .)
    COLON           reduce using rule 208 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 208 (abstract_declarator -> direct_abstract_declarator .)
    RSQUARE         shift and go to state 333
    LPAREN          shift and go to state 334


state 229

    (209) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (226) direct_abstract_declarator -> LPAREN . RPAREN
    (227) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (206) abstract_declarator -> . pointer direct_abstract_declarator
    (207) abstract_declarator -> . pointer
    (208) abstract_declarator -> . direct_abstract_declarator
    (195) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (196) parameter_type_list -> . parameter_list
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (209) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (210) direct_abstract_declarator -> . RSQUARE LSQUARE
    (211) direct_abstract_declarator -> . RSQUARE TIMES LSQUARE
    (212) direct_abstract_declarator -> . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (213) direct_abstract_declarator -> . RSQUARE STATIC assignment_expression LSQUARE
    (214) direct_abstract_declarator -> . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (215) direct_abstract_declarator -> . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (216) direct_abstract_declarator -> . RSQUARE type_qualifier_list LSQUARE
    (217) direct_abstract_declarator -> . RSQUARE assignment_expression LSQUARE
    (218) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE LSQUARE
    (219) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE TIMES LSQUARE
    (220) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE assignment_expression LSQUARE
    (226) direct_abstract_declarator -> . LPAREN RPAREN
    (227) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (228) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (229) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (197) parameter_list -> . parameter_declaration
    (198) parameter_list -> . parameter_list COMMA parameter_declaration
    (199) parameter_declaration -> . declaration_specifiers declarator
    (200) parameter_declaration -> . declaration_specifiers abstract_declarator
    (201) parameter_declaration -> . declaration_specifiers
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for RSQUARE resolved as shift
  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 336
    TIMES           shift and go to state 51
    LPAREN          shift and go to state 229
    RSQUARE         shift and go to state 230
    IDENTIFIER      reduce using rule 111 (declaration_specifiers -> .)
    COMMA           reduce using rule 111 (declaration_specifiers -> .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RSQUARE         [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    abstract_declarator            shift and go to state 335
    parameter_type_list            shift and go to state 337
    pointer                        shift and go to state 227
    direct_abstract_declarator     shift and go to state 228
    parameter_list                 shift and go to state 181
    parameter_declaration          shift and go to state 183
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 230

    (210) direct_abstract_declarator -> RSQUARE . LSQUARE
    (211) direct_abstract_declarator -> RSQUARE . TIMES LSQUARE
    (212) direct_abstract_declarator -> RSQUARE . STATIC type_qualifier_list assignment_expression LSQUARE
    (213) direct_abstract_declarator -> RSQUARE . STATIC assignment_expression LSQUARE
    (214) direct_abstract_declarator -> RSQUARE . type_qualifier_list STATIC assignment_expression LSQUARE
    (215) direct_abstract_declarator -> RSQUARE . type_qualifier_list assignment_expression LSQUARE
    (216) direct_abstract_declarator -> RSQUARE . type_qualifier_list LSQUARE
    (217) direct_abstract_declarator -> RSQUARE . assignment_expression LSQUARE
    (193) type_qualifier_list -> . type_qualifier
    (194) type_qualifier_list -> . type_qualifier_list type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LSQUARE         shift and go to state 338
    TIMES           shift and go to state 339
    STATIC          shift and go to state 340
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 341
    assignment_expression          shift and go to state 342
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 231

    (147) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    TIMES           reduce using rule 147 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 147 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RSQUARE         reduce using rule 147 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 147 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    SCOLON          reduce using rule 147 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    COLON           reduce using rule 147 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 147 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 232

    (149) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    TIMES           reduce using rule 149 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 149 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RSQUARE         reduce using rule 149 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 149 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    SCOLON          reduce using rule 149 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    COLON           reduce using rule 149 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 149 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 233

    (170) alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .

    TYPEDEF         reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    EXTERN          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    STATIC          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    THREAD_LOCAL    reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    AUTO            reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    REGISTER        reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    VOID            reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    CHAR            reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SHORT           reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    INT             reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LONG            reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    FLOAT           reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    DOUBLE          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SIGNED          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    UNSIGNED        reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    BOOL            reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    COMPLEX         reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    IMAGINARY       reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    CONST           reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    VOLATILE        reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ATOMIC          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    NORETURN        reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ALIGNAS         reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    ENUM            reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    STRUCT          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    UNION           reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    SCOLON          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    TIMES           reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    IDENTIFIER      reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    LPAREN          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    RSQUARE         reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    COMMA           reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 170 (alignment_specifier -> ALIGNAS LPAREN type_name RPAREN .)


state 234

    (171) alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .

    TYPEDEF         reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    EXTERN          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    STATIC          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    THREAD_LOCAL    reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    AUTO            reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    REGISTER        reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    VOID            reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    CHAR            reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SHORT           reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    INT             reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LONG            reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    FLOAT           reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    DOUBLE          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SIGNED          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    UNSIGNED        reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    BOOL            reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    COMPLEX         reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    IMAGINARY       reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    CONST           reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    VOLATILE        reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ATOMIC          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    NORETURN        reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ALIGNAS         reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    ENUM            reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    STRUCT          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    UNION           reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    SCOLON          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    TIMES           reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    IDENTIFIER      reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    LPAREN          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    RSQUARE         reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    COMMA           reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)
    RPAREN          reduce using rule 171 (alignment_specifier -> ALIGNAS LPAREN constant_expression RPAREN .)


state 235

    (137) struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .

    TYPEDEF         reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    EXTERN          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    STATIC          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    THREAD_LOCAL    reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    AUTO            reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    REGISTER        reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    VOID            reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    CHAR            reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    SHORT           reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    INT             reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    LONG            reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    FLOAT           reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    DOUBLE          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    SIGNED          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    UNSIGNED        reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    BOOL            reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    COMPLEX         reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    IMAGINARY       reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    CONST           reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    VOLATILE        reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    ATOMIC          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    NORETURN        reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    ALIGNAS         reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    ENUM            reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    STRUCT          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    UNION           reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    SCOLON          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    TIMES           reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    IDENTIFIER      reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    LPAREN          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    RSQUARE         reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    COMMA           reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    RPAREN          reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)
    COLON           reduce using rule 137 (struct_or_union_specifier -> struct_or_union LFPAREN struct_declaration_list RFPAREN .)


state 236

    (143) struct_declaration_list -> struct_declaration_list struct_declaration .

    RFPAREN         reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STATIC_ASSERT   reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    COMPLEX         reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    IMAGINARY       reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ATOMIC          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 237

    (144) struct_declaration -> specifier_qualifier_list SCOLON .

    RFPAREN         reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    STATIC_ASSERT   reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    VOID            reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    CHAR            reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    SHORT           reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    INT             reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    LONG            reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    FLOAT           reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    DOUBLE          reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    SIGNED          reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    UNSIGNED        reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    BOOL            reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    COMPLEX         reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    IMAGINARY       reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    CONST           reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    VOLATILE        reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    ATOMIC          reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    ENUM            reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    STRUCT          reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)
    UNION           reduce using rule 144 (struct_declaration -> specifier_qualifier_list SCOLON .)


state 238

    (145) struct_declaration -> specifier_qualifier_list struct_declarator_list . SCOLON
    (152) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SCOLON          shift and go to state 343
    COMMA           shift and go to state 344


state 239

    (151) struct_declarator_list -> struct_declarator .

    SCOLON          reduce using rule 151 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 151 (struct_declarator_list -> struct_declarator .)


state 240

    (153) struct_declarator -> COLON . constant_expression
    (97) constant_expression -> . conditional_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 345
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 241

    (154) struct_declarator -> declarator . COLON constant_expression
    (155) struct_declarator -> declarator .

    COLON           shift and go to state 346
    SCOLON          reduce using rule 155 (struct_declarator -> declarator .)
    COMMA           reduce using rule 155 (struct_declarator -> declarator .)


state 242

    (138) struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list . RFPAREN
    (143) struct_declaration_list -> struct_declaration_list . struct_declaration
    (144) struct_declaration -> . specifier_qualifier_list SCOLON
    (145) struct_declaration -> . specifier_qualifier_list struct_declarator_list SCOLON
    (146) struct_declaration -> . static_assert_declaration
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RFPAREN         shift and go to state 347
    STATIC_ASSERT   shift and go to state 13
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    struct_or_union                shift and go to state 40
    struct_declaration             shift and go to state 236
    specifier_qualifier_list       shift and go to state 129
    static_assert_declaration      shift and go to state 130
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34

state 243

    (156) enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .

    TYPEDEF         reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    EXTERN          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    STATIC          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    THREAD_LOCAL    reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    AUTO            reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    REGISTER        reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    VOID            reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    CHAR            reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    SHORT           reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    INT             reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    LONG            reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    FLOAT           reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    DOUBLE          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    SIGNED          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    UNSIGNED        reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    BOOL            reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    COMPLEX         reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    IMAGINARY       reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    CONST           reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    VOLATILE        reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    ATOMIC          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    NORETURN        reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    ALIGNAS         reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    ENUM            reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    STRUCT          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    UNION           reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    SCOLON          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    TIMES           reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    IDENTIFIER      reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    LPAREN          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    RSQUARE         reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    COMMA           reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    RPAREN          reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)
    COLON           reduce using rule 156 (enum_specifier -> ENUM LFPAREN enumerator_list RFPAREN .)


state 244

    (157) enum_specifier -> ENUM LFPAREN enumerator_list COMMA . RFPAREN
    (162) enumerator_list -> enumerator_list COMMA . enumerator
    (163) enumerator -> . enumeration_constant EQUALS constant_expression
    (164) enumerator -> . enumeration_constant
    (18) enumeration_constant -> . IDENTIFIER

    RFPAREN         shift and go to state 348
    IDENTIFIER      shift and go to state 135

    enumerator                     shift and go to state 349
    enumeration_constant           shift and go to state 134

state 245

    (163) enumerator -> enumeration_constant EQUALS . constant_expression
    (97) constant_expression -> . conditional_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 350
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 246

    (158) enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list . RFPAREN
    (159) enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list . COMMA RFPAREN
    (162) enumerator_list -> enumerator_list . COMMA enumerator

    RFPAREN         shift and go to state 351
    COMMA           shift and go to state 352


state 247

    (230) initializer -> LFPAREN initializer_list . RFPAREN
    (231) initializer -> LFPAREN initializer_list . COMMA RFPAREN
    (235) initializer_list -> initializer_list . COMMA designation initializer
    (236) initializer_list -> initializer_list . COMMA initializer

    RFPAREN         shift and go to state 353
    COMMA           shift and go to state 354


state 248

    (233) initializer_list -> designation . initializer
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LFPAREN         shift and go to state 141
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer                    shift and go to state 355
    assignment_expression          shift and go to state 142
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 249

    (234) initializer_list -> initializer .

    RFPAREN         reduce using rule 234 (initializer_list -> initializer .)
    COMMA           reduce using rule 234 (initializer_list -> initializer .)


state 250

    (237) designation -> designator_list . EQUALS
    (239) designator_list -> designator_list . designator
    (240) designator -> . RSQUARE constant_expression LSQUARE

    EQUALS          shift and go to state 356
    RSQUARE         shift and go to state 252

    designator                     shift and go to state 357

state 251

    (238) designator_list -> designator .

    EQUALS          reduce using rule 238 (designator_list -> designator .)
    RSQUARE         reduce using rule 238 (designator_list -> designator .)


state 252

    (240) designator -> RSQUARE . constant_expression LSQUARE
    (97) constant_expression -> . conditional_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 358
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 253

    (83) assignment_expression -> unary_expression assignment_oper . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    unary_expression               shift and go to state 144
    assignment_expression          shift and go to state 359
    conditional_expression         shift and go to state 143
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 254

    (84) assignment_oper -> EQUALS .

    INC_OP          reduce using rule 84 (assignment_oper -> EQUALS .)
    DEC_OP          reduce using rule 84 (assignment_oper -> EQUALS .)
    SIZEOF          reduce using rule 84 (assignment_oper -> EQUALS .)
    ALIGNOF         reduce using rule 84 (assignment_oper -> EQUALS .)
    LPAREN          reduce using rule 84 (assignment_oper -> EQUALS .)
    AMP             reduce using rule 84 (assignment_oper -> EQUALS .)
    TIMES           reduce using rule 84 (assignment_oper -> EQUALS .)
    PLUS            reduce using rule 84 (assignment_oper -> EQUALS .)
    MINUS           reduce using rule 84 (assignment_oper -> EQUALS .)
    TILDE           reduce using rule 84 (assignment_oper -> EQUALS .)
    NOT             reduce using rule 84 (assignment_oper -> EQUALS .)
    IDENTIFIER      reduce using rule 84 (assignment_oper -> EQUALS .)
    NUMBER          reduce using rule 84 (assignment_oper -> EQUALS .)
    I_CONSTANT      reduce using rule 84 (assignment_oper -> EQUALS .)
    F_CONSTANT      reduce using rule 84 (assignment_oper -> EQUALS .)
    STRING_LITERAL  reduce using rule 84 (assignment_oper -> EQUALS .)
    FUNC_NAME       reduce using rule 84 (assignment_oper -> EQUALS .)
    GENERIC         reduce using rule 84 (assignment_oper -> EQUALS .)


state 255

    (85) assignment_oper -> MUL_ASSIGN .

    INC_OP          reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    ALIGNOF         reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    LPAREN          reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    AMP             reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    TIMES           reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    PLUS            reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    MINUS           reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    TILDE           reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    NOT             reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    NUMBER          reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    I_CONSTANT      reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    F_CONSTANT      reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    FUNC_NAME       reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)
    GENERIC         reduce using rule 85 (assignment_oper -> MUL_ASSIGN .)


state 256

    (86) assignment_oper -> DIV_ASSIGN .

    INC_OP          reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    ALIGNOF         reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    LPAREN          reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    AMP             reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    TIMES           reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    PLUS            reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    MINUS           reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    TILDE           reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    NOT             reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    NUMBER          reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    I_CONSTANT      reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    F_CONSTANT      reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    FUNC_NAME       reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)
    GENERIC         reduce using rule 86 (assignment_oper -> DIV_ASSIGN .)


state 257

    (87) assignment_oper -> MOD_ASSIGN .

    INC_OP          reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    ALIGNOF         reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    LPAREN          reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    AMP             reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    TIMES           reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    PLUS            reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    MINUS           reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    TILDE           reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    NOT             reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    NUMBER          reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    I_CONSTANT      reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    F_CONSTANT      reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    FUNC_NAME       reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)
    GENERIC         reduce using rule 87 (assignment_oper -> MOD_ASSIGN .)


state 258

    (88) assignment_oper -> ADD_ASSIGN .

    INC_OP          reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    ALIGNOF         reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    LPAREN          reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    AMP             reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    TIMES           reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    PLUS            reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    MINUS           reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    TILDE           reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    NOT             reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    NUMBER          reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    I_CONSTANT      reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    F_CONSTANT      reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    FUNC_NAME       reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)
    GENERIC         reduce using rule 88 (assignment_oper -> ADD_ASSIGN .)


state 259

    (89) assignment_oper -> SUB_ASSIGN .

    INC_OP          reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    ALIGNOF         reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    LPAREN          reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    AMP             reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    TIMES           reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    PLUS            reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    MINUS           reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    TILDE           reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    NOT             reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    NUMBER          reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    I_CONSTANT      reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    F_CONSTANT      reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    FUNC_NAME       reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)
    GENERIC         reduce using rule 89 (assignment_oper -> SUB_ASSIGN .)


state 260

    (90) assignment_oper -> LEFT_ASSIGN .

    INC_OP          reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    ALIGNOF         reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    LPAREN          reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    AMP             reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    TIMES           reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    PLUS            reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    MINUS           reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    TILDE           reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    NOT             reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    NUMBER          reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    I_CONSTANT      reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    F_CONSTANT      reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    FUNC_NAME       reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)
    GENERIC         reduce using rule 90 (assignment_oper -> LEFT_ASSIGN .)


state 261

    (91) assignment_oper -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    ALIGNOF         reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    LPAREN          reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    AMP             reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    TIMES           reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    TILDE           reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    NOT             reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    NUMBER          reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    I_CONSTANT      reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    F_CONSTANT      reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    FUNC_NAME       reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)
    GENERIC         reduce using rule 91 (assignment_oper -> RIGHT_ASSIGN .)


state 262

    (92) assignment_oper -> AND_ASSIGN .

    INC_OP          reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    DEC_OP          reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    SIZEOF          reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    ALIGNOF         reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    LPAREN          reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    AMP             reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    TIMES           reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    PLUS            reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    MINUS           reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    TILDE           reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    NOT             reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    NUMBER          reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    I_CONSTANT      reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    F_CONSTANT      reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    FUNC_NAME       reduce using rule 92 (assignment_oper -> AND_ASSIGN .)
    GENERIC         reduce using rule 92 (assignment_oper -> AND_ASSIGN .)


state 263

    (93) assignment_oper -> XOR_ASSIGN .

    INC_OP          reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    ALIGNOF         reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    LPAREN          reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    AMP             reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    TIMES           reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    PLUS            reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    MINUS           reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    TILDE           reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    NOT             reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    NUMBER          reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    I_CONSTANT      reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    F_CONSTANT      reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    FUNC_NAME       reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)
    GENERIC         reduce using rule 93 (assignment_oper -> XOR_ASSIGN .)


state 264

    (94) assignment_oper -> OR_ASSIGN .

    INC_OP          reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    DEC_OP          reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    SIZEOF          reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    ALIGNOF         reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    LPAREN          reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    AMP             reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    TIMES           reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    PLUS            reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    MINUS           reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    TILDE           reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    NOT             reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    NUMBER          reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    I_CONSTANT      reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    F_CONSTANT      reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    FUNC_NAME       reduce using rule 94 (assignment_oper -> OR_ASSIGN .)
    GENERIC         reduce using rule 94 (assignment_oper -> OR_ASSIGN .)


state 265

    (34) postfix_expression -> LPAREN type_name . RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (51) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 360


state 266

    (252) compound_statement -> LFPAREN block_item_list RFPAREN .

    STATIC_ASSERT   reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    TYPEDEF         reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    EXTERN          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    STATIC          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    THREAD_LOCAL    reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    AUTO            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    REGISTER        reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    VOID            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    CHAR            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    SHORT           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    INT             reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    LONG            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    FLOAT           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    DOUBLE          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    SIGNED          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    UNSIGNED        reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    BOOL            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    COMPLEX         reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    IMAGINARY       reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    CONST           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    VOLATILE        reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    ATOMIC          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    NORETURN        reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    ALIGNAS         reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    ENUM            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    STRUCT          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    UNION           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    SCOLON          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    TIMES           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    IDENTIFIER      reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    LPAREN          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    $end            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    RFPAREN         reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    CASE            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    DEFAULT         reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    LFPAREN         reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    IF              reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    SWITCH          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    WHILE           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    DO              reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    FOR             reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    GOTO            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    CONTINUE        reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    BREAK           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    RETURN          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    INC_OP          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    DEC_OP          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    SIZEOF          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    ALIGNOF         reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    AMP             reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    PLUS            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    MINUS           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    TILDE           reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    NOT             reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    NUMBER          reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    I_CONSTANT      reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    F_CONSTANT      reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    STRING_LITERAL  reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    FUNC_NAME       reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    GENERIC         reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)
    ELSE            reduce using rule 252 (compound_statement -> LFPAREN block_item_list RFPAREN .)


state 267

    (254) block_item_list -> block_item_list block_item .

    RFPAREN         reduce using rule 254 (block_item_list -> block_item_list block_item .)
    STATIC_ASSERT   reduce using rule 254 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 254 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 254 (block_item_list -> block_item_list block_item .)
    LFPAREN         reduce using rule 254 (block_item_list -> block_item_list block_item .)
    SCOLON          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 254 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 254 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 254 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 254 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 254 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    THREAD_LOCAL    reduce using rule 254 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 254 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 254 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 254 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    COMPLEX         reduce using rule 254 (block_item_list -> block_item_list block_item .)
    IMAGINARY       reduce using rule 254 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 254 (block_item_list -> block_item_list block_item .)
    ATOMIC          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    NORETURN        reduce using rule 254 (block_item_list -> block_item_list block_item .)
    ALIGNAS         reduce using rule 254 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    ALIGNOF         reduce using rule 254 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    AMP             reduce using rule 254 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 254 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    TILDE           reduce using rule 254 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 254 (block_item_list -> block_item_list block_item .)
    NUMBER          reduce using rule 254 (block_item_list -> block_item_list block_item .)
    I_CONSTANT      reduce using rule 254 (block_item_list -> block_item_list block_item .)
    F_CONSTANT      reduce using rule 254 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 254 (block_item_list -> block_item_list block_item .)
    FUNC_NAME       reduce using rule 254 (block_item_list -> block_item_list block_item .)
    GENERIC         reduce using rule 254 (block_item_list -> block_item_list block_item .)


state 268

    (248) labeled_statement -> IDENTIFIER COLON . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    statement                      shift and go to state 361
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 269

    (249) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 362


state 270

    (250) labeled_statement -> DEFAULT COLON . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    statement                      shift and go to state 363
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 271

    (258) expression_statement -> expression SCOLON .

    RFPAREN         reduce using rule 258 (expression_statement -> expression SCOLON .)
    STATIC_ASSERT   reduce using rule 258 (expression_statement -> expression SCOLON .)
    IDENTIFIER      reduce using rule 258 (expression_statement -> expression SCOLON .)
    CASE            reduce using rule 258 (expression_statement -> expression SCOLON .)
    DEFAULT         reduce using rule 258 (expression_statement -> expression SCOLON .)
    LFPAREN         reduce using rule 258 (expression_statement -> expression SCOLON .)
    SCOLON          reduce using rule 258 (expression_statement -> expression SCOLON .)
    IF              reduce using rule 258 (expression_statement -> expression SCOLON .)
    SWITCH          reduce using rule 258 (expression_statement -> expression SCOLON .)
    WHILE           reduce using rule 258 (expression_statement -> expression SCOLON .)
    DO              reduce using rule 258 (expression_statement -> expression SCOLON .)
    FOR             reduce using rule 258 (expression_statement -> expression SCOLON .)
    GOTO            reduce using rule 258 (expression_statement -> expression SCOLON .)
    CONTINUE        reduce using rule 258 (expression_statement -> expression SCOLON .)
    BREAK           reduce using rule 258 (expression_statement -> expression SCOLON .)
    RETURN          reduce using rule 258 (expression_statement -> expression SCOLON .)
    TYPEDEF         reduce using rule 258 (expression_statement -> expression SCOLON .)
    EXTERN          reduce using rule 258 (expression_statement -> expression SCOLON .)
    STATIC          reduce using rule 258 (expression_statement -> expression SCOLON .)
    THREAD_LOCAL    reduce using rule 258 (expression_statement -> expression SCOLON .)
    AUTO            reduce using rule 258 (expression_statement -> expression SCOLON .)
    REGISTER        reduce using rule 258 (expression_statement -> expression SCOLON .)
    VOID            reduce using rule 258 (expression_statement -> expression SCOLON .)
    CHAR            reduce using rule 258 (expression_statement -> expression SCOLON .)
    SHORT           reduce using rule 258 (expression_statement -> expression SCOLON .)
    INT             reduce using rule 258 (expression_statement -> expression SCOLON .)
    LONG            reduce using rule 258 (expression_statement -> expression SCOLON .)
    FLOAT           reduce using rule 258 (expression_statement -> expression SCOLON .)
    DOUBLE          reduce using rule 258 (expression_statement -> expression SCOLON .)
    SIGNED          reduce using rule 258 (expression_statement -> expression SCOLON .)
    UNSIGNED        reduce using rule 258 (expression_statement -> expression SCOLON .)
    BOOL            reduce using rule 258 (expression_statement -> expression SCOLON .)
    COMPLEX         reduce using rule 258 (expression_statement -> expression SCOLON .)
    IMAGINARY       reduce using rule 258 (expression_statement -> expression SCOLON .)
    CONST           reduce using rule 258 (expression_statement -> expression SCOLON .)
    VOLATILE        reduce using rule 258 (expression_statement -> expression SCOLON .)
    ATOMIC          reduce using rule 258 (expression_statement -> expression SCOLON .)
    NORETURN        reduce using rule 258 (expression_statement -> expression SCOLON .)
    ALIGNAS         reduce using rule 258 (expression_statement -> expression SCOLON .)
    ENUM            reduce using rule 258 (expression_statement -> expression SCOLON .)
    STRUCT          reduce using rule 258 (expression_statement -> expression SCOLON .)
    UNION           reduce using rule 258 (expression_statement -> expression SCOLON .)
    INC_OP          reduce using rule 258 (expression_statement -> expression SCOLON .)
    DEC_OP          reduce using rule 258 (expression_statement -> expression SCOLON .)
    SIZEOF          reduce using rule 258 (expression_statement -> expression SCOLON .)
    ALIGNOF         reduce using rule 258 (expression_statement -> expression SCOLON .)
    LPAREN          reduce using rule 258 (expression_statement -> expression SCOLON .)
    AMP             reduce using rule 258 (expression_statement -> expression SCOLON .)
    TIMES           reduce using rule 258 (expression_statement -> expression SCOLON .)
    PLUS            reduce using rule 258 (expression_statement -> expression SCOLON .)
    MINUS           reduce using rule 258 (expression_statement -> expression SCOLON .)
    TILDE           reduce using rule 258 (expression_statement -> expression SCOLON .)
    NOT             reduce using rule 258 (expression_statement -> expression SCOLON .)
    NUMBER          reduce using rule 258 (expression_statement -> expression SCOLON .)
    I_CONSTANT      reduce using rule 258 (expression_statement -> expression SCOLON .)
    F_CONSTANT      reduce using rule 258 (expression_statement -> expression SCOLON .)
    STRING_LITERAL  reduce using rule 258 (expression_statement -> expression SCOLON .)
    FUNC_NAME       reduce using rule 258 (expression_statement -> expression SCOLON .)
    GENERIC         reduce using rule 258 (expression_statement -> expression SCOLON .)
    ELSE            reduce using rule 258 (expression_statement -> expression SCOLON .)
    RPAREN          reduce using rule 258 (expression_statement -> expression SCOLON .)


state 272

    (96) expression -> expression COMMA . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 364
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 273

    (259) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (260) selection_statement -> IF LPAREN . expression RPAREN statement
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 365
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 274

    (261) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 366
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 275

    (262) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 367
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 276

    (263) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SCOLON

    WHILE           shift and go to state 368


state 277

    (264) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> FOR LPAREN . declaration expression_statement RPAREN statement
    (267) iteration_statement -> FOR LPAREN . declaration expression_statement expression RPAREN statement
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (98) declaration -> . declaration_specifiers SCOLON
    (99) declaration -> . declaration_specifiers init_declarator_list SCOLON
    (100) declaration -> . static_assert_declaration
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (241) static_assert_declaration -> . STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

  ! shift/reduce conflict for SCOLON resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    SCOLON          shift and go to state 151
    STATIC_ASSERT   shift and go to state 13
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    ENUM            shift and go to state 41
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

  ! SCOLON          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    expression_statement           shift and go to state 369
    expression                     shift and go to state 161
    declaration                    shift and go to state 370
    declaration_specifiers         shift and go to state 66
    static_assert_declaration      shift and go to state 7
    assignment_expression          shift and go to state 171
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    struct_or_union                shift and go to state 40
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 278

    (268) jump_statement -> GOTO IDENTIFIER . SCOLON

    SCOLON          shift and go to state 371


state 279

    (269) jump_statement -> CONTINUE SCOLON .

    RFPAREN         reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    STATIC_ASSERT   reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    IDENTIFIER      reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    CASE            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    DEFAULT         reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    LFPAREN         reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    SCOLON          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    IF              reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    SWITCH          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    WHILE           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    DO              reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    FOR             reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    GOTO            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    CONTINUE        reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    BREAK           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    RETURN          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    TYPEDEF         reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    EXTERN          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    STATIC          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    THREAD_LOCAL    reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    AUTO            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    REGISTER        reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    VOID            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    CHAR            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    SHORT           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    INT             reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    LONG            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    FLOAT           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    DOUBLE          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    SIGNED          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    UNSIGNED        reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    BOOL            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    COMPLEX         reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    IMAGINARY       reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    CONST           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    VOLATILE        reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    ATOMIC          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    NORETURN        reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    ALIGNAS         reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    ENUM            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    STRUCT          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    UNION           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    INC_OP          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    DEC_OP          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    SIZEOF          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    ALIGNOF         reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    LPAREN          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    AMP             reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    TIMES           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    PLUS            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    MINUS           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    TILDE           reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    NOT             reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    NUMBER          reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    I_CONSTANT      reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    F_CONSTANT      reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    STRING_LITERAL  reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    FUNC_NAME       reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    GENERIC         reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)
    ELSE            reduce using rule 269 (jump_statement -> CONTINUE SCOLON .)


state 280

    (270) jump_statement -> BREAK SCOLON .

    RFPAREN         reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    STATIC_ASSERT   reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    IDENTIFIER      reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    CASE            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    DEFAULT         reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    LFPAREN         reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    SCOLON          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    IF              reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    SWITCH          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    WHILE           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    DO              reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    FOR             reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    GOTO            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    CONTINUE        reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    BREAK           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    RETURN          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    TYPEDEF         reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    EXTERN          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    STATIC          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    THREAD_LOCAL    reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    AUTO            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    REGISTER        reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    VOID            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    CHAR            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    SHORT           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    INT             reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    LONG            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    FLOAT           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    DOUBLE          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    SIGNED          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    UNSIGNED        reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    BOOL            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    COMPLEX         reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    IMAGINARY       reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    CONST           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    VOLATILE        reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    ATOMIC          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    NORETURN        reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    ALIGNAS         reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    ENUM            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    STRUCT          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    UNION           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    INC_OP          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    DEC_OP          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    SIZEOF          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    ALIGNOF         reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    LPAREN          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    AMP             reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    TIMES           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    PLUS            reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    MINUS           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    TILDE           reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    NOT             reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    NUMBER          reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    I_CONSTANT      reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    F_CONSTANT      reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    STRING_LITERAL  reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    FUNC_NAME       reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    GENERIC         reduce using rule 270 (jump_statement -> BREAK SCOLON .)
    ELSE            reduce using rule 270 (jump_statement -> BREAK SCOLON .)


state 281

    (271) jump_statement -> RETURN SCOLON .

    RFPAREN         reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    STATIC_ASSERT   reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    IDENTIFIER      reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    CASE            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    DEFAULT         reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    LFPAREN         reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    SCOLON          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    IF              reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    SWITCH          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    WHILE           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    DO              reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    FOR             reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    GOTO            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    CONTINUE        reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    BREAK           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    RETURN          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    TYPEDEF         reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    EXTERN          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    STATIC          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    THREAD_LOCAL    reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    AUTO            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    REGISTER        reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    VOID            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    CHAR            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    SHORT           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    INT             reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    LONG            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    FLOAT           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    DOUBLE          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    SIGNED          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    UNSIGNED        reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    BOOL            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    COMPLEX         reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    IMAGINARY       reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    CONST           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    VOLATILE        reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    ATOMIC          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    NORETURN        reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    ALIGNAS         reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    ENUM            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    STRUCT          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    UNION           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    INC_OP          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    DEC_OP          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    SIZEOF          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    ALIGNOF         reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    LPAREN          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    AMP             reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    TIMES           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    PLUS            reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    MINUS           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    TILDE           reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    NOT             reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    NUMBER          reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    I_CONSTANT      reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    F_CONSTANT      reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    STRING_LITERAL  reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    FUNC_NAME       reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    GENERIC         reduce using rule 271 (jump_statement -> RETURN SCOLON .)
    ELSE            reduce using rule 271 (jump_statement -> RETURN SCOLON .)


state 282

    (272) jump_statement -> RETURN expression . SCOLON
    (96) expression -> expression . COMMA assignment_expression

    SCOLON          shift and go to state 372
    COMMA           shift and go to state 272


state 283

    (178) direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .

    RSQUARE         reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    LPAREN          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    EQUALS          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    LFPAREN         reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    STATIC_ASSERT   reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    TYPEDEF         reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    EXTERN          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    STATIC          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    THREAD_LOCAL    reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    AUTO            reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    REGISTER        reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    VOID            reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    CHAR            reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    SHORT           reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    INT             reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    LONG            reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    FLOAT           reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    DOUBLE          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    SIGNED          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    UNSIGNED        reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    BOOL            reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    COMPLEX         reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    IMAGINARY       reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    CONST           reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    VOLATILE        reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    ATOMIC          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    NORETURN        reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    ALIGNAS         reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    ENUM            reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    STRUCT          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    UNION           reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    SCOLON          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    TIMES           reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    IDENTIFIER      reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    COMMA           reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    RPAREN          reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)
    COLON           reduce using rule 178 (direct_declarator -> direct_declarator RSQUARE TIMES LSQUARE .)


state 284

    (179) direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list . assignment_expression LSQUARE
    (194) type_qualifier_list -> type_qualifier_list . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 373
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 285

    (180) direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression . LSQUARE

    LSQUARE         shift and go to state 374


state 286

    (181) direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES . LSQUARE
    (45) unary_oper -> TIMES .

    LSQUARE         shift and go to state 375
    LPAREN          reduce using rule 45 (unary_oper -> TIMES .)
    INC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    DEC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    SIZEOF          reduce using rule 45 (unary_oper -> TIMES .)
    ALIGNOF         reduce using rule 45 (unary_oper -> TIMES .)
    AMP             reduce using rule 45 (unary_oper -> TIMES .)
    TIMES           reduce using rule 45 (unary_oper -> TIMES .)
    PLUS            reduce using rule 45 (unary_oper -> TIMES .)
    MINUS           reduce using rule 45 (unary_oper -> TIMES .)
    TILDE           reduce using rule 45 (unary_oper -> TIMES .)
    NOT             reduce using rule 45 (unary_oper -> TIMES .)
    IDENTIFIER      reduce using rule 45 (unary_oper -> TIMES .)
    NUMBER          reduce using rule 45 (unary_oper -> TIMES .)
    I_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    F_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    STRING_LITERAL  reduce using rule 45 (unary_oper -> TIMES .)
    FUNC_NAME       reduce using rule 45 (unary_oper -> TIMES .)
    GENERIC         reduce using rule 45 (unary_oper -> TIMES .)


state 287

    (184) direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .

    RSQUARE         reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    LPAREN          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    EQUALS          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    LFPAREN         reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    STATIC_ASSERT   reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    TYPEDEF         reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    EXTERN          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    STATIC          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    THREAD_LOCAL    reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    AUTO            reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    REGISTER        reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    VOID            reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    CHAR            reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    SHORT           reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    INT             reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    LONG            reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    FLOAT           reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    DOUBLE          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    SIGNED          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    UNSIGNED        reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    BOOL            reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    COMPLEX         reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    IMAGINARY       reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    CONST           reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    VOLATILE        reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    ATOMIC          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    NORETURN        reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    ALIGNAS         reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    ENUM            reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    STRUCT          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    UNION           reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    SCOLON          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    TIMES           reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    IDENTIFIER      reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    COMMA           reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    RPAREN          reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)
    COLON           reduce using rule 184 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list LSQUARE .)


state 288

    (182) direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC . assignment_expression LSQUARE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 376
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 289

    (183) direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression . LSQUARE

    LSQUARE         shift and go to state 377


state 290

    (185) direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .

    RSQUARE         reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    LPAREN          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    EQUALS          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    LFPAREN         reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    STATIC_ASSERT   reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    TYPEDEF         reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    EXTERN          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    STATIC          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    THREAD_LOCAL    reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    AUTO            reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    REGISTER        reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    VOID            reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    CHAR            reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    SHORT           reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    INT             reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    LONG            reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    FLOAT           reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    DOUBLE          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    SIGNED          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    UNSIGNED        reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    BOOL            reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    COMPLEX         reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    IMAGINARY       reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    CONST           reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    VOLATILE        reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    ATOMIC          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    NORETURN        reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    ALIGNAS         reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    ENUM            reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    STRUCT          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    UNION           reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    SCOLON          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    TIMES           reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    IDENTIFIER      reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    COMMA           reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    RPAREN          reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)
    COLON           reduce using rule 185 (direct_declarator -> direct_declarator RSQUARE assignment_expression LSQUARE .)


state 291

    (186) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    RSQUARE         reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LFPAREN         reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC_ASSERT   reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    THREAD_LOCAL    reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    BOOL            reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMPLEX         reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    IMAGINARY       reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ATOMIC          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    NORETURN        reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ALIGNAS         reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SCOLON          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TIMES           reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    IDENTIFIER      reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 186 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 292

    (188) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    RSQUARE         reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EQUALS          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LFPAREN         reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC_ASSERT   reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    THREAD_LOCAL    reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    BOOL            reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMPLEX         reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    IMAGINARY       reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ATOMIC          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    NORETURN        reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ALIGNAS         reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SCOLON          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TIMES           reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    IDENTIFIER      reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 188 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 293

    (203) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 378


state 294

    (195) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (198) parameter_list -> parameter_list COMMA . parameter_declaration
    (199) parameter_declaration -> . declaration_specifiers declarator
    (200) parameter_declaration -> . declaration_specifiers abstract_declarator
    (201) parameter_declaration -> . declaration_specifiers
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 379
    TIMES           reduce using rule 111 (declaration_specifiers -> .)
    IDENTIFIER      reduce using rule 111 (declaration_specifiers -> .)
    LPAREN          reduce using rule 111 (declaration_specifiers -> .)
    RSQUARE         reduce using rule 111 (declaration_specifiers -> .)
    COMMA           reduce using rule 111 (declaration_specifiers -> .)
    RPAREN          reduce using rule 111 (declaration_specifiers -> .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    parameter_declaration          shift and go to state 380
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 295

    (199) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 199 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 199 (parameter_declaration -> declaration_specifiers declarator .)


state 296

    (200) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 200 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RPAREN          reduce using rule 200 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 297

    (172) declarator -> pointer . direct_declarator
    (206) abstract_declarator -> pointer . direct_abstract_declarator
    (207) abstract_declarator -> pointer .
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (209) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (210) direct_abstract_declarator -> . RSQUARE LSQUARE
    (211) direct_abstract_declarator -> . RSQUARE TIMES LSQUARE
    (212) direct_abstract_declarator -> . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (213) direct_abstract_declarator -> . RSQUARE STATIC assignment_expression LSQUARE
    (214) direct_abstract_declarator -> . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (215) direct_abstract_declarator -> . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (216) direct_abstract_declarator -> . RSQUARE type_qualifier_list LSQUARE
    (217) direct_abstract_declarator -> . RSQUARE assignment_expression LSQUARE
    (218) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE LSQUARE
    (219) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE TIMES LSQUARE
    (220) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE assignment_expression LSQUARE
    (226) direct_abstract_declarator -> . LPAREN RPAREN
    (227) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (228) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (229) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 207 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 207 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 298
    RSQUARE         shift and go to state 230

    direct_declarator              shift and go to state 74
    direct_abstract_declarator     shift and go to state 332

state 298

    (176) direct_declarator -> LPAREN . declarator RPAREN
    (209) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (226) direct_abstract_declarator -> LPAREN . RPAREN
    (227) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (172) declarator -> . pointer direct_declarator
    (173) declarator -> . direct_declarator
    (206) abstract_declarator -> . pointer direct_abstract_declarator
    (207) abstract_declarator -> . pointer
    (208) abstract_declarator -> . direct_abstract_declarator
    (195) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (196) parameter_type_list -> . parameter_list
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (209) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (210) direct_abstract_declarator -> . RSQUARE LSQUARE
    (211) direct_abstract_declarator -> . RSQUARE TIMES LSQUARE
    (212) direct_abstract_declarator -> . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (213) direct_abstract_declarator -> . RSQUARE STATIC assignment_expression LSQUARE
    (214) direct_abstract_declarator -> . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (215) direct_abstract_declarator -> . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (216) direct_abstract_declarator -> . RSQUARE type_qualifier_list LSQUARE
    (217) direct_abstract_declarator -> . RSQUARE assignment_expression LSQUARE
    (218) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE LSQUARE
    (219) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE TIMES LSQUARE
    (220) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> . direct_abstract_declarator RSQUARE assignment_expression LSQUARE
    (226) direct_abstract_declarator -> . LPAREN RPAREN
    (227) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (228) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (229) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (197) parameter_list -> . parameter_declaration
    (198) parameter_list -> . parameter_list COMMA parameter_declaration
    (199) parameter_declaration -> . declaration_specifiers declarator
    (200) parameter_declaration -> . declaration_specifiers abstract_declarator
    (201) parameter_declaration -> . declaration_specifiers
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for RSQUARE resolved as shift
  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 336
    TIMES           shift and go to state 51
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 298
    RSQUARE         shift and go to state 230
    COMMA           reduce using rule 111 (declaration_specifiers -> .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! TIMES           [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! IDENTIFIER      [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! LPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RSQUARE         [ reduce using rule 111 (declaration_specifiers -> .) ]
  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    declarator                     shift and go to state 82
    abstract_declarator            shift and go to state 335
    parameter_type_list            shift and go to state 337
    pointer                        shift and go to state 297
    direct_declarator              shift and go to state 49
    direct_abstract_declarator     shift and go to state 228
    parameter_list                 shift and go to state 181
    parameter_declaration          shift and go to state 183
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 299

    (175) direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .

    RSQUARE         reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    LPAREN          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    EQUALS          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    LFPAREN         reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    STATIC_ASSERT   reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    TYPEDEF         reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    EXTERN          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    STATIC          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    THREAD_LOCAL    reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    AUTO            reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    REGISTER        reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    VOID            reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    CHAR            reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    SHORT           reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    INT             reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    LONG            reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    FLOAT           reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    DOUBLE          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    SIGNED          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    UNSIGNED        reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    BOOL            reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    COMPLEX         reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    IMAGINARY       reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    CONST           reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    VOLATILE        reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    ATOMIC          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    NORETURN        reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    ALIGNAS         reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    ENUM            reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    STRUCT          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    UNION           reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    SCOLON          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    TIMES           reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    IDENTIFIER      reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    COMMA           reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    RPAREN          reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    COLON           reduce using rule 175 (direct_declarator -> IDENTIFIER LSQUARE NUMBER RSQUARE .)


state 300

    (51) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (34) postfix_expression -> LPAREN type_name RPAREN . LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LFPAREN         shift and go to state 382
    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 381
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 301

    (13) primary_expression -> LPAREN expression RPAREN .

    RSQUARE         reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    PTR_OP          reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    INC_OP          reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    DEC_OP          reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDES         reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_OP         reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_OP        reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    LT_OP           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    GT_OP           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    LE_OP           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    GE_OP           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    EQ_OP           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    NE_OP           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    AMP             reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    AND_OP          reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    OR_OP           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    MUL_ASSIGN      reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    ADD_ASSIGN      reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    SUB_ASSIGN      reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    LEFT_ASSIGN     reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    RIGHT_ASSIGN    reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    AND_ASSIGN      reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    XOR_ASSIGN      reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    OR_ASSIGN       reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    SCOLON          reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    LSQUARE         reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    RFPAREN         reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 13 (primary_expression -> LPAREN expression RPAREN .)


state 302

    (241) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL . RPAREN SCOLON

    RPAREN          shift and go to state 383


state 303

    (81) conditional_expression -> logical_or_expression QMARK expression . COLON conditional_expression
    (96) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 384
    COMMA           shift and go to state 272


state 304

    (79) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (77) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QMARK           reduce using rule 79 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 79 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COMMA           reduce using rule 79 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RPAREN          reduce using rule 79 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SCOLON          reduce using rule 79 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    LSQUARE         reduce using rule 79 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RFPAREN         reduce using rule 79 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COLON           reduce using rule 79 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 194


state 305

    (77) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (75) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AND_OP          reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    QMARK           reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COMMA           reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RPAREN          reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SCOLON          reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    LSQUARE         reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RFPAREN         reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COLON           reduce using rule 77 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR              shift and go to state 195


state 306

    (75) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (73) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    OR              reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    AND_OP          reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    QMARK           reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    OR_OP           reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RPAREN          reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SCOLON          reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LSQUARE         reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RFPAREN         reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 75 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    XOR             shift and go to state 196


state 307

    (73) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (71) and_expression -> and_expression . AMP equality_expression

    XOR             reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR              reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AND_OP          reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    QMARK           reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    OR_OP           reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SCOLON          reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LSQUARE         reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RFPAREN         reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 73 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    AMP             shift and go to state 197


state 308

    (71) and_expression -> and_expression AMP equality_expression .
    (68) equality_expression -> equality_expression . EQ_OP relational_expression
    (69) equality_expression -> equality_expression . NE_OP relational_expression

    AMP             reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    XOR             reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    OR              reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    AND_OP          reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    QMARK           reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    OR_OP           reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    COMMA           reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    RPAREN          reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    SCOLON          reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    LSQUARE         reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    RFPAREN         reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    COLON           reduce using rule 71 (and_expression -> and_expression AMP equality_expression .)
    EQ_OP           shift and go to state 198
    NE_OP           shift and go to state 199


state 309

    (68) equality_expression -> equality_expression EQ_OP relational_expression .
    (63) relational_expression -> relational_expression . LT_OP shift_expression
    (64) relational_expression -> relational_expression . GT_OP shift_expression
    (65) relational_expression -> relational_expression . LE_OP shift_expression
    (66) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AMP             reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    XOR             reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR              reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    QMARK           reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RPAREN          reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SCOLON          reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LSQUARE         reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RFPAREN         reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COLON           reduce using rule 68 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LT_OP           shift and go to state 200
    GT_OP           shift and go to state 201
    LE_OP           shift and go to state 202
    GE_OP           shift and go to state 203


state 310

    (69) equality_expression -> equality_expression NE_OP relational_expression .
    (63) relational_expression -> relational_expression . LT_OP shift_expression
    (64) relational_expression -> relational_expression . GT_OP shift_expression
    (65) relational_expression -> relational_expression . LE_OP shift_expression
    (66) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    AMP             reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    XOR             reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR              reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    QMARK           reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    RPAREN          reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    SCOLON          reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    LSQUARE         reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    RFPAREN         reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    COLON           reduce using rule 69 (equality_expression -> equality_expression NE_OP relational_expression .)
    LT_OP           shift and go to state 200
    GT_OP           shift and go to state 201
    LE_OP           shift and go to state 202
    GE_OP           shift and go to state 203


state 311

    (63) relational_expression -> relational_expression LT_OP shift_expression .
    (60) shift_expression -> shift_expression . LEFT_OP additive_expression
    (61) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    GT_OP           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    LE_OP           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    GE_OP           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    EQ_OP           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    NE_OP           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    AMP             reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    XOR             reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    OR              reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    AND_OP          reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    QMARK           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    OR_OP           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    COMMA           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    RPAREN          reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    SCOLON          reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    LSQUARE         reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    RFPAREN         reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    COLON           reduce using rule 63 (relational_expression -> relational_expression LT_OP shift_expression .)
    LEFT_OP         shift and go to state 204
    RIGHT_OP        shift and go to state 205


state 312

    (64) relational_expression -> relational_expression GT_OP shift_expression .
    (60) shift_expression -> shift_expression . LEFT_OP additive_expression
    (61) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    GT_OP           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    LE_OP           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    GE_OP           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    EQ_OP           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    NE_OP           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    AMP             reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    XOR             reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    OR              reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    AND_OP          reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    QMARK           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    OR_OP           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    COMMA           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    RPAREN          reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    SCOLON          reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    LSQUARE         reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    RFPAREN         reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    COLON           reduce using rule 64 (relational_expression -> relational_expression GT_OP shift_expression .)
    LEFT_OP         shift and go to state 204
    RIGHT_OP        shift and go to state 205


state 313

    (65) relational_expression -> relational_expression LE_OP shift_expression .
    (60) shift_expression -> shift_expression . LEFT_OP additive_expression
    (61) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    GT_OP           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    AMP             reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    XOR             reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR              reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    QMARK           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    RPAREN          reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    SCOLON          reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    LSQUARE         reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    RFPAREN         reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 65 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 204
    RIGHT_OP        shift and go to state 205


state 314

    (66) relational_expression -> relational_expression GE_OP shift_expression .
    (60) shift_expression -> shift_expression . LEFT_OP additive_expression
    (61) shift_expression -> shift_expression . RIGHT_OP additive_expression

    LT_OP           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    GT_OP           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    AMP             reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    XOR             reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR              reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    QMARK           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    RPAREN          reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    SCOLON          reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    LSQUARE         reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    RFPAREN         reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 66 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 204
    RIGHT_OP        shift and go to state 205


state 315

    (60) shift_expression -> shift_expression LEFT_OP additive_expression .
    (57) additive_expression -> additive_expression . PLUS multiplicative_expression
    (58) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LT_OP           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GT_OP           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AMP             reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    XOR             reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR              reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    QMARK           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RPAREN          reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SCOLON          reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LSQUARE         reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RFPAREN         reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 60 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 206
    MINUS           shift and go to state 207


state 316

    (61) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (57) additive_expression -> additive_expression . PLUS multiplicative_expression
    (58) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LT_OP           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GT_OP           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AMP             reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    XOR             reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR              reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    QMARK           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RPAREN          reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SCOLON          reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LSQUARE         reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RFPAREN         reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 61 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 206
    MINUS           shift and go to state 207


state 317

    (57) additive_expression -> additive_expression PLUS multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVIDES cast_expression
    (55) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AMP             reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_OP          reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QMARK           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SCOLON          reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSQUARE         reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RFPAREN         reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 57 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 208
    DIVIDES         shift and go to state 209
    MODULUS         shift and go to state 210


state 318

    (58) additive_expression -> additive_expression MINUS multiplicative_expression .
    (53) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (54) multiplicative_expression -> multiplicative_expression . DIVIDES cast_expression
    (55) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AMP             reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QMARK           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SCOLON          reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSQUARE         reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RFPAREN         reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 58 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 208
    DIVIDES         shift and go to state 209
    MODULUS         shift and go to state 210


state 319

    (53) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDES         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MODULUS         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LEFT_OP         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RIGHT_OP        reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT_OP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT_OP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE_OP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE_OP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_OP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE_OP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AMP             reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND_OP          reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    QMARK           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR_OP           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SCOLON          reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSQUARE         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RFPAREN         reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 53 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 320

    (54) multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .

    TIMES           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    DIVIDES         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    MODULUS         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    PLUS            reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    MINUS           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    LEFT_OP         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    RIGHT_OP        reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    LT_OP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    GT_OP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    LE_OP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    GE_OP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    EQ_OP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    NE_OP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    AMP             reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    XOR             reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    OR              reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    AND_OP          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    QMARK           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    OR_OP           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    COMMA           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    RPAREN          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    SCOLON          reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    LSQUARE         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    RFPAREN         reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)
    COLON           reduce using rule 54 (multiplicative_expression -> multiplicative_expression DIVIDES cast_expression .)


state 321

    (55) multiplicative_expression -> multiplicative_expression MODULUS cast_expression .

    TIMES           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    DIVIDES         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    MODULUS         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    PLUS            reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    MINUS           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LEFT_OP         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_OP        reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LT_OP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GT_OP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LE_OP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GE_OP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    EQ_OP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    NE_OP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    AMP             reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    XOR             reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    OR              reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    AND_OP          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    QMARK           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    OR_OP           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COMMA           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RPAREN          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    SCOLON          reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LSQUARE         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RFPAREN         reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COLON           reduce using rule 55 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)


state 322

    (27) postfix_expression -> postfix_expression RSQUARE expression . LSQUARE
    (96) expression -> expression . COMMA assignment_expression

    LSQUARE         shift and go to state 385
    COMMA           shift and go to state 272


state 323

    (28) postfix_expression -> postfix_expression LPAREN RPAREN .

    RSQUARE         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PTR_OP          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INC_OP          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DEC_OP          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDES         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODULUS         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_OP         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_OP        reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT_OP           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT_OP           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE_OP           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE_OP           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_OP           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE_OP           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AMP             reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_OP          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    QMARK           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_OP           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEFT_ASSIGN     reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RIGHT_ASSIGN    reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SCOLON          reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSQUARE         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RFPAREN         reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 28 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 324

    (29) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (36) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 386
    COMMA           shift and go to state 387


state 325

    (35) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 35 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 35 (argument_expression_list -> assignment_expression .)


state 326

    (30) postfix_expression -> postfix_expression DOT IDENTIFIER .

    RSQUARE         reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LPAREN          reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PTR_OP          reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INC_OP          reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DEC_OP          reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TIMES           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDES         reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS         reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_OP         reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_OP        reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LT_OP           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GT_OP           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LE_OP           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GE_OP           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ_OP           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NE_OP           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AMP             reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR             reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR              reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_OP          reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QMARK           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_OP           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS          reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SCOLON          reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LSQUARE         reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RFPAREN         reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 30 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 327

    (31) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    RSQUARE         reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LPAREN          reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DOT             reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    TIMES           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIVIDES         reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MODULUS         reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LT_OP           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GT_OP           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AMP             reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR             reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR              reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    QMARK           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RPAREN          reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQUALS          reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SCOLON          reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LSQUARE         reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RFPAREN         reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 31 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 328

    (34) postfix_expression -> LPAREN type_name . RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN

    RPAREN          shift and go to state 388


state 329

    (42) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (34) postfix_expression -> LPAREN type_name . RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN

    RPAREN          shift and go to state 389


state 330

    (43) unary_expression -> ALIGNOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 390


state 331

    (21) generic_selection -> GENERIC LPAREN assignment_expression . COMMA generic_assoc_list RPAREN

    COMMA           shift and go to state 391


state 332

    (206) abstract_declarator -> pointer direct_abstract_declarator .
    (218) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE LSQUARE
    (219) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE TIMES LSQUARE
    (220) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> direct_abstract_declarator . RSQUARE assignment_expression LSQUARE
    (228) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (229) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 206 (abstract_declarator -> pointer direct_abstract_declarator .)
    COLON           reduce using rule 206 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 206 (abstract_declarator -> pointer direct_abstract_declarator .)
    RSQUARE         shift and go to state 333
    LPAREN          shift and go to state 334


state 333

    (218) direct_abstract_declarator -> direct_abstract_declarator RSQUARE . LSQUARE
    (219) direct_abstract_declarator -> direct_abstract_declarator RSQUARE . TIMES LSQUARE
    (220) direct_abstract_declarator -> direct_abstract_declarator RSQUARE . STATIC type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> direct_abstract_declarator RSQUARE . STATIC assignment_expression LSQUARE
    (222) direct_abstract_declarator -> direct_abstract_declarator RSQUARE . type_qualifier_list assignment_expression LSQUARE
    (223) direct_abstract_declarator -> direct_abstract_declarator RSQUARE . type_qualifier_list STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> direct_abstract_declarator RSQUARE . type_qualifier_list LSQUARE
    (225) direct_abstract_declarator -> direct_abstract_declarator RSQUARE . assignment_expression LSQUARE
    (193) type_qualifier_list -> . type_qualifier
    (194) type_qualifier_list -> . type_qualifier_list type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LSQUARE         shift and go to state 392
    TIMES           shift and go to state 393
    STATIC          shift and go to state 394
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 395
    assignment_expression          shift and go to state 396
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 334

    (228) direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN
    (229) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (195) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (196) parameter_type_list -> . parameter_list
    (197) parameter_list -> . parameter_declaration
    (198) parameter_list -> . parameter_list COMMA parameter_declaration
    (199) parameter_declaration -> . declaration_specifiers declarator
    (200) parameter_declaration -> . declaration_specifiers abstract_declarator
    (201) parameter_declaration -> . declaration_specifiers
    (101) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (102) declaration_specifiers -> . storage_class_specifier
    (103) declaration_specifiers -> . type_specifier declaration_specifiers
    (104) declaration_specifiers -> . type_specifier
    (105) declaration_specifiers -> . type_qualifier declaration_specifiers
    (106) declaration_specifiers -> . type_qualifier
    (107) declaration_specifiers -> . function_specifier declaration_specifiers
    (108) declaration_specifiers -> . function_specifier
    (109) declaration_specifiers -> . alignment_specifier declaration_specifiers
    (110) declaration_specifiers -> . alignment_specifier
    (111) declaration_specifiers -> .
    (116) storage_class_specifier -> . TYPEDEF
    (117) storage_class_specifier -> . EXTERN
    (118) storage_class_specifier -> . STATIC
    (119) storage_class_specifier -> . THREAD_LOCAL
    (120) storage_class_specifier -> . AUTO
    (121) storage_class_specifier -> . REGISTER
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (169) function_specifier -> . NORETURN
    (170) alignment_specifier -> . ALIGNAS LPAREN type_name RPAREN
    (171) alignment_specifier -> . ALIGNAS LPAREN constant_expression RPAREN
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 397
    TIMES           reduce using rule 111 (declaration_specifiers -> .)
    IDENTIFIER      reduce using rule 111 (declaration_specifiers -> .)
    LPAREN          reduce using rule 111 (declaration_specifiers -> .)
    RSQUARE         reduce using rule 111 (declaration_specifiers -> .)
    COMMA           reduce using rule 111 (declaration_specifiers -> .)
    TYPEDEF         shift and go to state 14
    EXTERN          shift and go to state 15
    STATIC          shift and go to state 16
    THREAD_LOCAL    shift and go to state 17
    AUTO            shift and go to state 18
    REGISTER        shift and go to state 19
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    NORETURN        shift and go to state 38
    ALIGNAS         shift and go to state 39
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

  ! RPAREN          [ reduce using rule 111 (declaration_specifiers -> .) ]

    parameter_type_list            shift and go to state 398
    parameter_list                 shift and go to state 181
    parameter_declaration          shift and go to state 183
    declaration_specifiers         shift and go to state 184
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    function_specifier             shift and go to state 11
    alignment_specifier            shift and go to state 12
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 335

    (209) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 399


state 336

    (226) direct_abstract_declarator -> LPAREN RPAREN .

    RSQUARE         reduce using rule 226 (direct_abstract_declarator -> LPAREN RPAREN .)
    LPAREN          reduce using rule 226 (direct_abstract_declarator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 226 (direct_abstract_declarator -> LPAREN RPAREN .)
    COLON           reduce using rule 226 (direct_abstract_declarator -> LPAREN RPAREN .)
    COMMA           reduce using rule 226 (direct_abstract_declarator -> LPAREN RPAREN .)


state 337

    (227) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 400


state 338

    (210) direct_abstract_declarator -> RSQUARE LSQUARE .

    RSQUARE         reduce using rule 210 (direct_abstract_declarator -> RSQUARE LSQUARE .)
    LPAREN          reduce using rule 210 (direct_abstract_declarator -> RSQUARE LSQUARE .)
    RPAREN          reduce using rule 210 (direct_abstract_declarator -> RSQUARE LSQUARE .)
    COLON           reduce using rule 210 (direct_abstract_declarator -> RSQUARE LSQUARE .)
    COMMA           reduce using rule 210 (direct_abstract_declarator -> RSQUARE LSQUARE .)


state 339

    (211) direct_abstract_declarator -> RSQUARE TIMES . LSQUARE
    (45) unary_oper -> TIMES .

    LSQUARE         shift and go to state 401
    LPAREN          reduce using rule 45 (unary_oper -> TIMES .)
    INC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    DEC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    SIZEOF          reduce using rule 45 (unary_oper -> TIMES .)
    ALIGNOF         reduce using rule 45 (unary_oper -> TIMES .)
    AMP             reduce using rule 45 (unary_oper -> TIMES .)
    TIMES           reduce using rule 45 (unary_oper -> TIMES .)
    PLUS            reduce using rule 45 (unary_oper -> TIMES .)
    MINUS           reduce using rule 45 (unary_oper -> TIMES .)
    TILDE           reduce using rule 45 (unary_oper -> TIMES .)
    NOT             reduce using rule 45 (unary_oper -> TIMES .)
    IDENTIFIER      reduce using rule 45 (unary_oper -> TIMES .)
    NUMBER          reduce using rule 45 (unary_oper -> TIMES .)
    I_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    F_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    STRING_LITERAL  reduce using rule 45 (unary_oper -> TIMES .)
    FUNC_NAME       reduce using rule 45 (unary_oper -> TIMES .)
    GENERIC         reduce using rule 45 (unary_oper -> TIMES .)


state 340

    (212) direct_abstract_declarator -> RSQUARE STATIC . type_qualifier_list assignment_expression LSQUARE
    (213) direct_abstract_declarator -> RSQUARE STATIC . assignment_expression LSQUARE
    (193) type_qualifier_list -> . type_qualifier
    (194) type_qualifier_list -> . type_qualifier_list type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 402
    assignment_expression          shift and go to state 403
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 341

    (214) direct_abstract_declarator -> RSQUARE type_qualifier_list . STATIC assignment_expression LSQUARE
    (215) direct_abstract_declarator -> RSQUARE type_qualifier_list . assignment_expression LSQUARE
    (216) direct_abstract_declarator -> RSQUARE type_qualifier_list . LSQUARE
    (194) type_qualifier_list -> type_qualifier_list . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 404
    LSQUARE         shift and go to state 406
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 405
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 342

    (217) direct_abstract_declarator -> RSQUARE assignment_expression . LSQUARE

    LSQUARE         shift and go to state 407


state 343

    (145) struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .

    RFPAREN         reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    STATIC_ASSERT   reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    VOID            reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    CHAR            reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    SHORT           reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    INT             reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    LONG            reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    FLOAT           reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    DOUBLE          reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    SIGNED          reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    UNSIGNED        reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    BOOL            reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    COMPLEX         reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    IMAGINARY       reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    CONST           reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    VOLATILE        reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    ATOMIC          reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    ENUM            reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    STRUCT          reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)
    UNION           reduce using rule 145 (struct_declaration -> specifier_qualifier_list struct_declarator_list SCOLON .)


state 344

    (152) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (153) struct_declarator -> . COLON constant_expression
    (154) struct_declarator -> . declarator COLON constant_expression
    (155) struct_declarator -> . declarator
    (172) declarator -> . pointer direct_declarator
    (173) declarator -> . direct_declarator
    (189) pointer -> . TIMES type_qualifier_list pointer
    (190) pointer -> . TIMES type_qualifier_list
    (191) pointer -> . TIMES pointer
    (192) pointer -> . TIMES
    (174) direct_declarator -> . IDENTIFIER
    (175) direct_declarator -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (176) direct_declarator -> . LPAREN declarator RPAREN
    (177) direct_declarator -> . direct_declarator RSQUARE LSQUARE
    (178) direct_declarator -> . direct_declarator RSQUARE TIMES LSQUARE
    (179) direct_declarator -> . direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE
    (180) direct_declarator -> . direct_declarator RSQUARE STATIC assignment_expression LSQUARE
    (181) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE
    (182) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE
    (183) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE
    (184) direct_declarator -> . direct_declarator RSQUARE type_qualifier_list LSQUARE
    (185) direct_declarator -> . direct_declarator RSQUARE assignment_expression LSQUARE
    (186) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (187) direct_declarator -> . direct_declarator LPAREN RPAREN
    (188) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN

    COLON           shift and go to state 240
    TIMES           shift and go to state 51
    IDENTIFIER      shift and go to state 52
    LPAREN          shift and go to state 53

    struct_declarator              shift and go to state 408
    declarator                     shift and go to state 241
    pointer                        shift and go to state 48
    direct_declarator              shift and go to state 49

state 345

    (153) struct_declarator -> COLON constant_expression .

    SCOLON          reduce using rule 153 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 153 (struct_declarator -> COLON constant_expression .)


state 346

    (154) struct_declarator -> declarator COLON . constant_expression
    (97) constant_expression -> . conditional_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    constant_expression            shift and go to state 409
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 87
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 347

    (138) struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .

    TYPEDEF         reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    EXTERN          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    STATIC          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    THREAD_LOCAL    reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    AUTO            reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    REGISTER        reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    VOID            reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    CHAR            reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    SHORT           reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    INT             reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    LONG            reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    FLOAT           reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    DOUBLE          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    SIGNED          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    UNSIGNED        reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    BOOL            reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    COMPLEX         reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    IMAGINARY       reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    CONST           reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    VOLATILE        reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    ATOMIC          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    NORETURN        reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    ALIGNAS         reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    ENUM            reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    STRUCT          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    UNION           reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    SCOLON          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    TIMES           reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    IDENTIFIER      reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    LPAREN          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    RSQUARE         reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    COMMA           reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    RPAREN          reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)
    COLON           reduce using rule 138 (struct_or_union_specifier -> struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN .)


state 348

    (157) enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .

    TYPEDEF         reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    EXTERN          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    STATIC          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    THREAD_LOCAL    reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    AUTO            reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    REGISTER        reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    VOID            reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    CHAR            reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    SHORT           reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    INT             reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    LONG            reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    FLOAT           reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    DOUBLE          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    SIGNED          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    UNSIGNED        reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    BOOL            reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    COMPLEX         reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    IMAGINARY       reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    CONST           reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    VOLATILE        reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    ATOMIC          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    NORETURN        reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    ALIGNAS         reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    ENUM            reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    STRUCT          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    UNION           reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    SCOLON          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    TIMES           reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    IDENTIFIER      reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    LPAREN          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    RSQUARE         reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    COMMA           reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    RPAREN          reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)
    COLON           reduce using rule 157 (enum_specifier -> ENUM LFPAREN enumerator_list COMMA RFPAREN .)


state 349

    (162) enumerator_list -> enumerator_list COMMA enumerator .

    RFPAREN         reduce using rule 162 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 162 (enumerator_list -> enumerator_list COMMA enumerator .)


state 350

    (163) enumerator -> enumeration_constant EQUALS constant_expression .

    RFPAREN         reduce using rule 163 (enumerator -> enumeration_constant EQUALS constant_expression .)
    COMMA           reduce using rule 163 (enumerator -> enumeration_constant EQUALS constant_expression .)


state 351

    (158) enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .

    TYPEDEF         reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    EXTERN          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    STATIC          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    THREAD_LOCAL    reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    AUTO            reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    REGISTER        reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    VOID            reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    CHAR            reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    SHORT           reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    INT             reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    LONG            reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    FLOAT           reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    DOUBLE          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    SIGNED          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    UNSIGNED        reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    BOOL            reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    COMPLEX         reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    IMAGINARY       reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    CONST           reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    VOLATILE        reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    ATOMIC          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    NORETURN        reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    ALIGNAS         reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    ENUM            reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    STRUCT          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    UNION           reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    SCOLON          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    TIMES           reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    IDENTIFIER      reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    LPAREN          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    RSQUARE         reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    COMMA           reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    RPAREN          reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)
    COLON           reduce using rule 158 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN .)


state 352

    (159) enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA . RFPAREN
    (162) enumerator_list -> enumerator_list COMMA . enumerator
    (163) enumerator -> . enumeration_constant EQUALS constant_expression
    (164) enumerator -> . enumeration_constant
    (18) enumeration_constant -> . IDENTIFIER

    RFPAREN         shift and go to state 410
    IDENTIFIER      shift and go to state 135

    enumerator                     shift and go to state 349
    enumeration_constant           shift and go to state 134

state 353

    (230) initializer -> LFPAREN initializer_list RFPAREN .

    SCOLON          reduce using rule 230 (initializer -> LFPAREN initializer_list RFPAREN .)
    COMMA           reduce using rule 230 (initializer -> LFPAREN initializer_list RFPAREN .)
    RFPAREN         reduce using rule 230 (initializer -> LFPAREN initializer_list RFPAREN .)


state 354

    (231) initializer -> LFPAREN initializer_list COMMA . RFPAREN
    (235) initializer_list -> initializer_list COMMA . designation initializer
    (236) initializer_list -> initializer_list COMMA . initializer
    (237) designation -> . designator_list EQUALS
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (238) designator_list -> . designator
    (239) designator_list -> . designator_list designator
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (240) designator -> . RSQUARE constant_expression LSQUARE
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RFPAREN         shift and go to state 411
    LFPAREN         shift and go to state 141
    RSQUARE         shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    designation                    shift and go to state 412
    initializer                    shift and go to state 413
    designator_list                shift and go to state 250
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 251
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 355

    (233) initializer_list -> designation initializer .

    RFPAREN         reduce using rule 233 (initializer_list -> designation initializer .)
    COMMA           reduce using rule 233 (initializer_list -> designation initializer .)


state 356

    (237) designation -> designator_list EQUALS .

    LFPAREN         reduce using rule 237 (designation -> designator_list EQUALS .)
    INC_OP          reduce using rule 237 (designation -> designator_list EQUALS .)
    DEC_OP          reduce using rule 237 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 237 (designation -> designator_list EQUALS .)
    ALIGNOF         reduce using rule 237 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 237 (designation -> designator_list EQUALS .)
    AMP             reduce using rule 237 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 237 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 237 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 237 (designation -> designator_list EQUALS .)
    TILDE           reduce using rule 237 (designation -> designator_list EQUALS .)
    NOT             reduce using rule 237 (designation -> designator_list EQUALS .)
    IDENTIFIER      reduce using rule 237 (designation -> designator_list EQUALS .)
    NUMBER          reduce using rule 237 (designation -> designator_list EQUALS .)
    I_CONSTANT      reduce using rule 237 (designation -> designator_list EQUALS .)
    F_CONSTANT      reduce using rule 237 (designation -> designator_list EQUALS .)
    STRING_LITERAL  reduce using rule 237 (designation -> designator_list EQUALS .)
    FUNC_NAME       reduce using rule 237 (designation -> designator_list EQUALS .)
    GENERIC         reduce using rule 237 (designation -> designator_list EQUALS .)


state 357

    (239) designator_list -> designator_list designator .

    EQUALS          reduce using rule 239 (designator_list -> designator_list designator .)
    RSQUARE         reduce using rule 239 (designator_list -> designator_list designator .)


state 358

    (240) designator -> RSQUARE constant_expression . LSQUARE

    LSQUARE         shift and go to state 414


state 359

    (83) assignment_expression -> unary_expression assignment_oper assignment_expression .

    SCOLON          reduce using rule 83 (assignment_expression -> unary_expression assignment_oper assignment_expression .)
    COMMA           reduce using rule 83 (assignment_expression -> unary_expression assignment_oper assignment_expression .)
    LSQUARE         reduce using rule 83 (assignment_expression -> unary_expression assignment_oper assignment_expression .)
    RPAREN          reduce using rule 83 (assignment_expression -> unary_expression assignment_oper assignment_expression .)
    RFPAREN         reduce using rule 83 (assignment_expression -> unary_expression assignment_oper assignment_expression .)
    COLON           reduce using rule 83 (assignment_expression -> unary_expression assignment_oper assignment_expression .)


state 360

    (34) postfix_expression -> LPAREN type_name RPAREN . LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (51) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LFPAREN         shift and go to state 382
    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    cast_expression                shift and go to state 381
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 361

    (248) labeled_statement -> IDENTIFIER COLON statement .

    RFPAREN         reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC_ASSERT   reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    LFPAREN         reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    SCOLON          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    TYPEDEF         reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    EXTERN          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    THREAD_LOCAL    reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    AUTO            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    REGISTER        reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    SIGNED          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    UNSIGNED        reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    BOOL            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    COMPLEX         reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    IMAGINARY       reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    CONST           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    ATOMIC          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    NORETURN        reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    ALIGNAS         reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    ENUM            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    STRUCT          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    UNION           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    INC_OP          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC_OP          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    ALIGNOF         reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    AMP             reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    TIMES           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    TILDE           reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    NOT             reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    I_CONSTANT      reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    F_CONSTANT      reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LITERAL  reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    FUNC_NAME       reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    GENERIC         reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 248 (labeled_statement -> IDENTIFIER COLON statement .)


state 362

    (249) labeled_statement -> CASE constant_expression COLON . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    statement                      shift and go to state 415
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 363

    (250) labeled_statement -> DEFAULT COLON statement .

    RFPAREN         reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    STATIC_ASSERT   reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    LFPAREN         reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    SCOLON          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    THREAD_LOCAL    reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    REGISTER        reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    BOOL            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    COMPLEX         reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    IMAGINARY       reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    ATOMIC          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    NORETURN        reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    ALIGNAS         reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    INC_OP          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    DEC_OP          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    ALIGNOF         reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    AMP             reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    TILDE           reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    NUMBER          reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    I_CONSTANT      reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    F_CONSTANT      reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    FUNC_NAME       reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    GENERIC         reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 250 (labeled_statement -> DEFAULT COLON statement .)


state 364

    (96) expression -> expression COMMA assignment_expression .

    SCOLON          reduce using rule 96 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 96 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 96 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 96 (expression -> expression COMMA assignment_expression .)
    LSQUARE         reduce using rule 96 (expression -> expression COMMA assignment_expression .)


state 365

    (259) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (260) selection_statement -> IF LPAREN expression . RPAREN statement
    (96) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 416
    COMMA           shift and go to state 272


state 366

    (261) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (96) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 417
    COMMA           shift and go to state 272


state 367

    (262) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (96) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 418
    COMMA           shift and go to state 272


state 368

    (263) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SCOLON

    LPAREN          shift and go to state 419


state 369

    (264) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (265) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SCOLON          shift and go to state 151
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 420
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 370

    (266) iteration_statement -> FOR LPAREN declaration . expression_statement RPAREN statement
    (267) iteration_statement -> FOR LPAREN declaration . expression_statement expression RPAREN statement
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SCOLON          shift and go to state 151
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 421
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 371

    (268) jump_statement -> GOTO IDENTIFIER SCOLON .

    RFPAREN         reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    STATIC_ASSERT   reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    IDENTIFIER      reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    CASE            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    DEFAULT         reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    LFPAREN         reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    SCOLON          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    IF              reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    SWITCH          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    WHILE           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    DO              reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    FOR             reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    GOTO            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    CONTINUE        reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    BREAK           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    RETURN          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    TYPEDEF         reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    EXTERN          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    STATIC          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    THREAD_LOCAL    reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    AUTO            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    REGISTER        reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    VOID            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    CHAR            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    SHORT           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    INT             reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    LONG            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    FLOAT           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    DOUBLE          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    SIGNED          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    UNSIGNED        reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    BOOL            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    COMPLEX         reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    IMAGINARY       reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    CONST           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    VOLATILE        reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    ATOMIC          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    NORETURN        reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    ALIGNAS         reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    ENUM            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    STRUCT          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    UNION           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    INC_OP          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    DEC_OP          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    SIZEOF          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    ALIGNOF         reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    LPAREN          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    AMP             reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    TIMES           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    PLUS            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    MINUS           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    TILDE           reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    NOT             reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    NUMBER          reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    I_CONSTANT      reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    F_CONSTANT      reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    STRING_LITERAL  reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    FUNC_NAME       reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    GENERIC         reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)
    ELSE            reduce using rule 268 (jump_statement -> GOTO IDENTIFIER SCOLON .)


state 372

    (272) jump_statement -> RETURN expression SCOLON .

    RFPAREN         reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    STATIC_ASSERT   reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    IDENTIFIER      reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    CASE            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    DEFAULT         reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    LFPAREN         reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    SCOLON          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    IF              reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    SWITCH          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    WHILE           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    DO              reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    FOR             reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    GOTO            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    CONTINUE        reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    BREAK           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    RETURN          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    TYPEDEF         reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    EXTERN          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    STATIC          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    THREAD_LOCAL    reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    AUTO            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    REGISTER        reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    VOID            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    CHAR            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    SHORT           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    INT             reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    LONG            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    FLOAT           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    DOUBLE          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    SIGNED          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    UNSIGNED        reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    BOOL            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    COMPLEX         reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    IMAGINARY       reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    CONST           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    VOLATILE        reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    ATOMIC          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    NORETURN        reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    ALIGNAS         reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    ENUM            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    STRUCT          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    UNION           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    INC_OP          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    DEC_OP          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    SIZEOF          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    ALIGNOF         reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    LPAREN          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    AMP             reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    TIMES           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    PLUS            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    MINUS           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    TILDE           reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    NOT             reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    NUMBER          reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    I_CONSTANT      reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    F_CONSTANT      reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    STRING_LITERAL  reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    FUNC_NAME       reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    GENERIC         reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)
    ELSE            reduce using rule 272 (jump_statement -> RETURN expression SCOLON .)


state 373

    (179) direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression . LSQUARE

    LSQUARE         shift and go to state 422


state 374

    (180) direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .

    RSQUARE         reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    LPAREN          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    EQUALS          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    LFPAREN         reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    STATIC_ASSERT   reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    TYPEDEF         reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    EXTERN          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    STATIC          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    THREAD_LOCAL    reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    AUTO            reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    REGISTER        reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    VOID            reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    CHAR            reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    SHORT           reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    INT             reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    LONG            reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    FLOAT           reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    DOUBLE          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    SIGNED          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    UNSIGNED        reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    BOOL            reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    COMPLEX         reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    IMAGINARY       reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    CONST           reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    VOLATILE        reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    ATOMIC          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    NORETURN        reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    ALIGNAS         reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    ENUM            reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    STRUCT          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    UNION           reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    SCOLON          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    TIMES           reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    IDENTIFIER      reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    COMMA           reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    RPAREN          reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    COLON           reduce using rule 180 (direct_declarator -> direct_declarator RSQUARE STATIC assignment_expression LSQUARE .)


state 375

    (181) direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .

    RSQUARE         reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    LPAREN          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    EQUALS          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    LFPAREN         reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    STATIC_ASSERT   reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    TYPEDEF         reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    EXTERN          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    STATIC          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    THREAD_LOCAL    reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    AUTO            reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    REGISTER        reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    VOID            reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    CHAR            reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    SHORT           reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    INT             reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    LONG            reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    FLOAT           reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    DOUBLE          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    SIGNED          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    UNSIGNED        reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    BOOL            reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    COMPLEX         reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    IMAGINARY       reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    CONST           reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    VOLATILE        reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    ATOMIC          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    NORETURN        reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    ALIGNAS         reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    ENUM            reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    STRUCT          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    UNION           reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    SCOLON          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    TIMES           reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    IDENTIFIER      reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    COMMA           reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    RPAREN          reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)
    COLON           reduce using rule 181 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE .)


state 376

    (182) direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression . LSQUARE

    LSQUARE         shift and go to state 423


state 377

    (183) direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .

    RSQUARE         reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    LPAREN          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    EQUALS          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    LFPAREN         reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    STATIC_ASSERT   reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    TYPEDEF         reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    EXTERN          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    STATIC          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    THREAD_LOCAL    reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    AUTO            reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    REGISTER        reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    VOID            reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    CHAR            reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    SHORT           reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    INT             reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    LONG            reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    FLOAT           reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    DOUBLE          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    SIGNED          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    UNSIGNED        reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    BOOL            reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    COMPLEX         reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    IMAGINARY       reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    CONST           reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    VOLATILE        reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    ATOMIC          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    NORETURN        reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    ALIGNAS         reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    ENUM            reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    STRUCT          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    UNION           reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    SCOLON          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    TIMES           reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    IDENTIFIER      reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    COMMA           reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    RPAREN          reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    COLON           reduce using rule 183 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)


state 378

    (203) identifier_list -> identifier_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 203 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 203 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 379

    (195) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 195 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 380

    (198) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 198 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 198 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 381

    (51) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDES         reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODULUS         reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_OP         reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_OP        reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT_OP           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT_OP           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE_OP           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE_OP           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ_OP           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE_OP           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AMP             reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_OP          reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    QMARK           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_OP           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SCOLON          reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSQUARE         reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MUL_ASSIGN      reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIV_ASSIGN      reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD_ASSIGN      reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ADD_ASSIGN      reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SUB_ASSIGN      reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEFT_ASSIGN     reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RIGHT_ASSIGN    reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_ASSIGN      reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR_ASSIGN      reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_ASSIGN       reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RFPAREN         reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 51 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 382

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN . initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (233) initializer_list -> . designation initializer
    (234) initializer_list -> . initializer
    (235) initializer_list -> . initializer_list COMMA designation initializer
    (236) initializer_list -> . initializer_list COMMA initializer
    (237) designation -> . designator_list EQUALS
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (238) designator_list -> . designator
    (239) designator_list -> . designator_list designator
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (240) designator -> . RSQUARE constant_expression LSQUARE
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LFPAREN         shift and go to state 141
    RSQUARE         shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer_list               shift and go to state 424
    designation                    shift and go to state 248
    initializer                    shift and go to state 249
    designator_list                shift and go to state 250
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 251
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 383

    (241) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN . SCOLON

    SCOLON          shift and go to state 425


state 384

    (81) conditional_expression -> logical_or_expression QMARK expression COLON . conditional_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN

    LPAREN          shift and go to state 83
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    logical_or_expression          shift and go to state 87
    conditional_expression         shift and go to state 426
    logical_and_expression         shift and go to state 88
    inclusive_or_expression        shift and go to state 89
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97
    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 102
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    primary_expression             shift and go to state 109
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115

state 385

    (27) postfix_expression -> postfix_expression RSQUARE expression LSQUARE .

    RSQUARE         reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    LPAREN          reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    DOT             reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    PTR_OP          reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    INC_OP          reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    DEC_OP          reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    TIMES           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    DIVIDES         reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    MODULUS         reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    PLUS            reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    MINUS           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    LEFT_OP         reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    RIGHT_OP        reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    LT_OP           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    GT_OP           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    LE_OP           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    GE_OP           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    EQ_OP           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    NE_OP           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    AMP             reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    XOR             reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    OR              reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    AND_OP          reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    QMARK           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    OR_OP           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    COMMA           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    RPAREN          reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    EQUALS          reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    MUL_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    DIV_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    MOD_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    ADD_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    SUB_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    LEFT_ASSIGN     reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    RIGHT_ASSIGN    reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    AND_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    XOR_ASSIGN      reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    OR_ASSIGN       reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    SCOLON          reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    LSQUARE         reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    RFPAREN         reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)
    COLON           reduce using rule 27 (postfix_expression -> postfix_expression RSQUARE expression LSQUARE .)


state 386

    (29) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    RSQUARE         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOT             reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PTR_OP          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INC_OP          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DEC_OP          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDES         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODULUS         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_OP         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_OP        reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT_OP           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT_OP           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE_OP           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE_OP           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_OP           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE_OP           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AMP             reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_OP          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    QMARK           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_OP           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MUL_ASSIGN      reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_ASSIGN      reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_ASSIGN      reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_ASSIGN      reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SUB_ASSIGN      reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_ASSIGN      reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR_ASSIGN      reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_ASSIGN       reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SCOLON          reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSQUARE         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RFPAREN         reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 29 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 387

    (36) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 427
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 388

    (34) postfix_expression -> LPAREN type_name RPAREN . LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN

    LFPAREN         shift and go to state 382


state 389

    (42) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (34) postfix_expression -> LPAREN type_name RPAREN . LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN

    TIMES           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDES         reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODULUS         reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT_OP           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT_OP           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ_OP           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE_OP           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AMP             reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    QMARK           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SCOLON          reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSQUARE         reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RFPAREN         reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 42 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LFPAREN         shift and go to state 382


state 390

    (43) unary_expression -> ALIGNOF LPAREN type_name RPAREN .

    TIMES           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    DIVIDES         reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MODULUS         reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LEFT_OP         reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RIGHT_OP        reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LT_OP           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    GT_OP           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LE_OP           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    GE_OP           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    EQ_OP           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    NE_OP           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AMP             reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR              reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND_OP          reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    QMARK           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR_OP           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    EQUALS          reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LEFT_ASSIGN     reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RIGHT_ASSIGN    reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    SCOLON          reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    LSQUARE         reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    RFPAREN         reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 43 (unary_expression -> ALIGNOF LPAREN type_name RPAREN .)


state 391

    (21) generic_selection -> GENERIC LPAREN assignment_expression COMMA . generic_assoc_list RPAREN
    (22) generic_assoc_list -> . generic_association
    (23) generic_assoc_list -> . generic_assoc_list COMMA generic_association
    (24) generic_association -> . type_name COLON assignment_expression
    (25) generic_association -> . DEFAULT COLON assignment_expression
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    DEFAULT         shift and go to state 431
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    generic_assoc_list             shift and go to state 428
    generic_association            shift and go to state 429
    type_name                      shift and go to state 430
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 392

    (218) direct_abstract_declarator -> direct_abstract_declarator RSQUARE LSQUARE .

    RSQUARE         reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE LSQUARE .)
    LPAREN          reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE LSQUARE .)
    RPAREN          reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE LSQUARE .)
    COLON           reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE LSQUARE .)
    COMMA           reduce using rule 218 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE LSQUARE .)


state 393

    (219) direct_abstract_declarator -> direct_abstract_declarator RSQUARE TIMES . LSQUARE
    (45) unary_oper -> TIMES .

    LSQUARE         shift and go to state 432
    LPAREN          reduce using rule 45 (unary_oper -> TIMES .)
    INC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    DEC_OP          reduce using rule 45 (unary_oper -> TIMES .)
    SIZEOF          reduce using rule 45 (unary_oper -> TIMES .)
    ALIGNOF         reduce using rule 45 (unary_oper -> TIMES .)
    AMP             reduce using rule 45 (unary_oper -> TIMES .)
    TIMES           reduce using rule 45 (unary_oper -> TIMES .)
    PLUS            reduce using rule 45 (unary_oper -> TIMES .)
    MINUS           reduce using rule 45 (unary_oper -> TIMES .)
    TILDE           reduce using rule 45 (unary_oper -> TIMES .)
    NOT             reduce using rule 45 (unary_oper -> TIMES .)
    IDENTIFIER      reduce using rule 45 (unary_oper -> TIMES .)
    NUMBER          reduce using rule 45 (unary_oper -> TIMES .)
    I_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    F_CONSTANT      reduce using rule 45 (unary_oper -> TIMES .)
    STRING_LITERAL  reduce using rule 45 (unary_oper -> TIMES .)
    FUNC_NAME       reduce using rule 45 (unary_oper -> TIMES .)
    GENERIC         reduce using rule 45 (unary_oper -> TIMES .)


state 394

    (220) direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC . type_qualifier_list assignment_expression LSQUARE
    (221) direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC . assignment_expression LSQUARE
    (193) type_qualifier_list -> . type_qualifier
    (194) type_qualifier_list -> . type_qualifier_list type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    type_qualifier_list            shift and go to state 433
    assignment_expression          shift and go to state 434
    type_qualifier                 shift and go to state 79
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 395

    (222) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list . assignment_expression LSQUARE
    (223) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list . STATIC assignment_expression LSQUARE
    (224) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list . LSQUARE
    (194) type_qualifier_list -> type_qualifier_list . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    STATIC          shift and go to state 437
    LSQUARE         shift and go to state 436
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 435
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 396

    (225) direct_abstract_declarator -> direct_abstract_declarator RSQUARE assignment_expression . LSQUARE

    LSQUARE         shift and go to state 438


state 397

    (228) direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .

    RSQUARE         reduce using rule 228 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 228 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 228 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COLON           reduce using rule 228 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 228 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)


state 398

    (229) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 439


state 399

    (209) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    RSQUARE         reduce using rule 209 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 209 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 209 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COLON           reduce using rule 209 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 209 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 400

    (227) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    RSQUARE         reduce using rule 227 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 227 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 227 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 227 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 227 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 401

    (211) direct_abstract_declarator -> RSQUARE TIMES LSQUARE .

    RSQUARE         reduce using rule 211 (direct_abstract_declarator -> RSQUARE TIMES LSQUARE .)
    LPAREN          reduce using rule 211 (direct_abstract_declarator -> RSQUARE TIMES LSQUARE .)
    RPAREN          reduce using rule 211 (direct_abstract_declarator -> RSQUARE TIMES LSQUARE .)
    COLON           reduce using rule 211 (direct_abstract_declarator -> RSQUARE TIMES LSQUARE .)
    COMMA           reduce using rule 211 (direct_abstract_declarator -> RSQUARE TIMES LSQUARE .)


state 402

    (212) direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list . assignment_expression LSQUARE
    (194) type_qualifier_list -> type_qualifier_list . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 440
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 403

    (213) direct_abstract_declarator -> RSQUARE STATIC assignment_expression . LSQUARE

    LSQUARE         shift and go to state 441


state 404

    (214) direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC . assignment_expression LSQUARE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 442
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 405

    (215) direct_abstract_declarator -> RSQUARE type_qualifier_list assignment_expression . LSQUARE

    LSQUARE         shift and go to state 443


state 406

    (216) direct_abstract_declarator -> RSQUARE type_qualifier_list LSQUARE .

    RSQUARE         reduce using rule 216 (direct_abstract_declarator -> RSQUARE type_qualifier_list LSQUARE .)
    LPAREN          reduce using rule 216 (direct_abstract_declarator -> RSQUARE type_qualifier_list LSQUARE .)
    RPAREN          reduce using rule 216 (direct_abstract_declarator -> RSQUARE type_qualifier_list LSQUARE .)
    COLON           reduce using rule 216 (direct_abstract_declarator -> RSQUARE type_qualifier_list LSQUARE .)
    COMMA           reduce using rule 216 (direct_abstract_declarator -> RSQUARE type_qualifier_list LSQUARE .)


state 407

    (217) direct_abstract_declarator -> RSQUARE assignment_expression LSQUARE .

    RSQUARE         reduce using rule 217 (direct_abstract_declarator -> RSQUARE assignment_expression LSQUARE .)
    LPAREN          reduce using rule 217 (direct_abstract_declarator -> RSQUARE assignment_expression LSQUARE .)
    RPAREN          reduce using rule 217 (direct_abstract_declarator -> RSQUARE assignment_expression LSQUARE .)
    COLON           reduce using rule 217 (direct_abstract_declarator -> RSQUARE assignment_expression LSQUARE .)
    COMMA           reduce using rule 217 (direct_abstract_declarator -> RSQUARE assignment_expression LSQUARE .)


state 408

    (152) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SCOLON          reduce using rule 152 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 152 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 409

    (154) struct_declarator -> declarator COLON constant_expression .

    SCOLON          reduce using rule 154 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 154 (struct_declarator -> declarator COLON constant_expression .)


state 410

    (159) enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .

    TYPEDEF         reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    EXTERN          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    STATIC          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    THREAD_LOCAL    reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    AUTO            reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    REGISTER        reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    VOID            reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    CHAR            reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    SHORT           reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    INT             reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    LONG            reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    FLOAT           reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    DOUBLE          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    SIGNED          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    UNSIGNED        reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    BOOL            reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    COMPLEX         reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    IMAGINARY       reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    CONST           reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    VOLATILE        reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    ATOMIC          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    NORETURN        reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    ALIGNAS         reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    ENUM            reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    STRUCT          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    UNION           reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    SCOLON          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    TIMES           reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    IDENTIFIER      reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    LPAREN          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    RSQUARE         reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    COMMA           reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    RPAREN          reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)
    COLON           reduce using rule 159 (enum_specifier -> ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN .)


state 411

    (231) initializer -> LFPAREN initializer_list COMMA RFPAREN .

    SCOLON          reduce using rule 231 (initializer -> LFPAREN initializer_list COMMA RFPAREN .)
    COMMA           reduce using rule 231 (initializer -> LFPAREN initializer_list COMMA RFPAREN .)
    RFPAREN         reduce using rule 231 (initializer -> LFPAREN initializer_list COMMA RFPAREN .)


state 412

    (235) initializer_list -> initializer_list COMMA designation . initializer
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LFPAREN         shift and go to state 141
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer                    shift and go to state 444
    assignment_expression          shift and go to state 142
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 413

    (236) initializer_list -> initializer_list COMMA initializer .

    RFPAREN         reduce using rule 236 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 236 (initializer_list -> initializer_list COMMA initializer .)


state 414

    (240) designator -> RSQUARE constant_expression LSQUARE .

    EQUALS          reduce using rule 240 (designator -> RSQUARE constant_expression LSQUARE .)
    RSQUARE         reduce using rule 240 (designator -> RSQUARE constant_expression LSQUARE .)


state 415

    (249) labeled_statement -> CASE constant_expression COLON statement .

    RFPAREN         reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC_ASSERT   reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    LFPAREN         reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    SCOLON          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    THREAD_LOCAL    reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    REGISTER        reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    BOOL            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    COMPLEX         reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    IMAGINARY       reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    ATOMIC          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    NORETURN        reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    ALIGNAS         reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    INC_OP          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC_OP          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    ALIGNOF         reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    AMP             reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    TILDE           reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    NUMBER          reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    I_CONSTANT      reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    F_CONSTANT      reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    FUNC_NAME       reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    GENERIC         reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 249 (labeled_statement -> CASE constant_expression COLON statement .)


state 416

    (259) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (260) selection_statement -> IF LPAREN expression RPAREN . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 161
    statement                      shift and go to state 445
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 417

    (261) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 161
    statement                      shift and go to state 446
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 418

    (262) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 161
    statement                      shift and go to state 447
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 419

    (263) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 448
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 420

    (264) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (265) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 449
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 450
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 421

    (266) iteration_statement -> FOR LPAREN declaration expression_statement . RPAREN statement
    (267) iteration_statement -> FOR LPAREN declaration expression_statement . expression RPAREN statement
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 451
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 452
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 422

    (179) direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .

    RSQUARE         reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    LPAREN          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    EQUALS          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    LFPAREN         reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    STATIC_ASSERT   reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    TYPEDEF         reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    EXTERN          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    STATIC          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    THREAD_LOCAL    reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    AUTO            reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    REGISTER        reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    VOID            reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    CHAR            reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    SHORT           reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    INT             reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    LONG            reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    FLOAT           reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    DOUBLE          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    SIGNED          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    UNSIGNED        reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    BOOL            reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    COMPLEX         reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    IMAGINARY       reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    CONST           reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    VOLATILE        reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    ATOMIC          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    NORETURN        reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    ALIGNAS         reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    ENUM            reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    STRUCT          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    UNION           reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    SCOLON          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    TIMES           reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    IDENTIFIER      reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    COMMA           reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    RPAREN          reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    COLON           reduce using rule 179 (direct_declarator -> direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)


state 423

    (182) direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .

    RSQUARE         reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    LPAREN          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    EQUALS          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    LFPAREN         reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    STATIC_ASSERT   reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    TYPEDEF         reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    EXTERN          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    STATIC          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    THREAD_LOCAL    reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    AUTO            reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    REGISTER        reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    VOID            reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    CHAR            reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    SHORT           reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    INT             reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    LONG            reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    FLOAT           reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    DOUBLE          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    SIGNED          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    UNSIGNED        reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    BOOL            reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    COMPLEX         reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    IMAGINARY       reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    CONST           reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    VOLATILE        reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    ATOMIC          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    NORETURN        reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    ALIGNAS         reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    ENUM            reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    STRUCT          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    UNION           reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    SCOLON          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    TIMES           reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    IDENTIFIER      reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    COMMA           reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    RPAREN          reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    COLON           reduce using rule 182 (direct_declarator -> direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)


state 424

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list . RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (235) initializer_list -> initializer_list . COMMA designation initializer
    (236) initializer_list -> initializer_list . COMMA initializer

    RFPAREN         shift and go to state 453
    COMMA           shift and go to state 454


state 425

    (241) static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .

    STATIC_ASSERT   reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    TYPEDEF         reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    EXTERN          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    STATIC          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    THREAD_LOCAL    reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    AUTO            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    REGISTER        reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    VOID            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    CHAR            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    SHORT           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    INT             reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    LONG            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    FLOAT           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    DOUBLE          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    SIGNED          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    UNSIGNED        reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    BOOL            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    COMPLEX         reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    IMAGINARY       reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    CONST           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    VOLATILE        reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    ATOMIC          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    NORETURN        reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    ALIGNAS         reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    ENUM            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    STRUCT          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    UNION           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    SCOLON          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    TIMES           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    IDENTIFIER      reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    LPAREN          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    $end            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    LFPAREN         reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    RFPAREN         reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    CASE            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    DEFAULT         reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    IF              reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    SWITCH          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    WHILE           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    DO              reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    FOR             reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    GOTO            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    CONTINUE        reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    BREAK           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    RETURN          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    INC_OP          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    DEC_OP          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    SIZEOF          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    ALIGNOF         reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    AMP             reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    PLUS            reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    MINUS           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    TILDE           reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    NOT             reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    NUMBER          reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    I_CONSTANT      reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    F_CONSTANT      reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    STRING_LITERAL  reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    FUNC_NAME       reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)
    GENERIC         reduce using rule 241 (static_assert_declaration -> STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON .)


state 426

    (81) conditional_expression -> logical_or_expression QMARK expression COLON conditional_expression .

    COMMA           reduce using rule 81 (conditional_expression -> logical_or_expression QMARK expression COLON conditional_expression .)
    RPAREN          reduce using rule 81 (conditional_expression -> logical_or_expression QMARK expression COLON conditional_expression .)
    SCOLON          reduce using rule 81 (conditional_expression -> logical_or_expression QMARK expression COLON conditional_expression .)
    LSQUARE         reduce using rule 81 (conditional_expression -> logical_or_expression QMARK expression COLON conditional_expression .)
    RFPAREN         reduce using rule 81 (conditional_expression -> logical_or_expression QMARK expression COLON conditional_expression .)
    COLON           reduce using rule 81 (conditional_expression -> logical_or_expression QMARK expression COLON conditional_expression .)


state 427

    (36) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 36 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 36 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 428

    (21) generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list . RPAREN
    (23) generic_assoc_list -> generic_assoc_list . COMMA generic_association

    RPAREN          shift and go to state 456
    COMMA           shift and go to state 455


state 429

    (22) generic_assoc_list -> generic_association .

    RPAREN          reduce using rule 22 (generic_assoc_list -> generic_association .)
    COMMA           reduce using rule 22 (generic_assoc_list -> generic_association .)


state 430

    (24) generic_association -> type_name . COLON assignment_expression

    COLON           shift and go to state 457


state 431

    (25) generic_association -> DEFAULT . COLON assignment_expression

    COLON           shift and go to state 458


state 432

    (219) direct_abstract_declarator -> direct_abstract_declarator RSQUARE TIMES LSQUARE .

    RSQUARE         reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE TIMES LSQUARE .)
    LPAREN          reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE TIMES LSQUARE .)
    RPAREN          reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE TIMES LSQUARE .)
    COLON           reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE TIMES LSQUARE .)
    COMMA           reduce using rule 219 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE TIMES LSQUARE .)


state 433

    (220) direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list . assignment_expression LSQUARE
    (194) type_qualifier_list -> type_qualifier_list . type_qualifier
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 80
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 459
    type_qualifier                 shift and go to state 186
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 434

    (221) direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC assignment_expression . LSQUARE

    LSQUARE         shift and go to state 460


state 435

    (222) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression . LSQUARE

    LSQUARE         shift and go to state 461


state 436

    (224) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE .

    RSQUARE         reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE .)
    LPAREN          reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE .)
    RPAREN          reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE .)
    COLON           reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE .)
    COMMA           reduce using rule 224 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE .)


state 437

    (223) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC . assignment_expression LSQUARE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 462
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 438

    (225) direct_abstract_declarator -> direct_abstract_declarator RSQUARE assignment_expression LSQUARE .

    RSQUARE         reduce using rule 225 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE assignment_expression LSQUARE .)
    LPAREN          reduce using rule 225 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE assignment_expression LSQUARE .)
    RPAREN          reduce using rule 225 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE assignment_expression LSQUARE .)
    COLON           reduce using rule 225 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE assignment_expression LSQUARE .)
    COMMA           reduce using rule 225 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE assignment_expression LSQUARE .)


state 439

    (229) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    RSQUARE         reduce using rule 229 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 229 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 229 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 229 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 229 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 440

    (212) direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list assignment_expression . LSQUARE

    LSQUARE         shift and go to state 463


state 441

    (213) direct_abstract_declarator -> RSQUARE STATIC assignment_expression LSQUARE .

    RSQUARE         reduce using rule 213 (direct_abstract_declarator -> RSQUARE STATIC assignment_expression LSQUARE .)
    LPAREN          reduce using rule 213 (direct_abstract_declarator -> RSQUARE STATIC assignment_expression LSQUARE .)
    RPAREN          reduce using rule 213 (direct_abstract_declarator -> RSQUARE STATIC assignment_expression LSQUARE .)
    COLON           reduce using rule 213 (direct_abstract_declarator -> RSQUARE STATIC assignment_expression LSQUARE .)
    COMMA           reduce using rule 213 (direct_abstract_declarator -> RSQUARE STATIC assignment_expression LSQUARE .)


state 442

    (214) direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC assignment_expression . LSQUARE

    LSQUARE         shift and go to state 464


state 443

    (215) direct_abstract_declarator -> RSQUARE type_qualifier_list assignment_expression LSQUARE .

    RSQUARE         reduce using rule 215 (direct_abstract_declarator -> RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    LPAREN          reduce using rule 215 (direct_abstract_declarator -> RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    RPAREN          reduce using rule 215 (direct_abstract_declarator -> RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    COLON           reduce using rule 215 (direct_abstract_declarator -> RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    COMMA           reduce using rule 215 (direct_abstract_declarator -> RSQUARE type_qualifier_list assignment_expression LSQUARE .)


state 444

    (235) initializer_list -> initializer_list COMMA designation initializer .

    RFPAREN         reduce using rule 235 (initializer_list -> initializer_list COMMA designation initializer .)
    COMMA           reduce using rule 235 (initializer_list -> initializer_list COMMA designation initializer .)


state 445

    (259) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement
    (260) selection_statement -> IF LPAREN expression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 465
    RFPAREN         reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LFPAREN         reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCOLON          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ATOMIC          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AMP             reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 260 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 446

    (261) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RFPAREN         reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LFPAREN         reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCOLON          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ATOMIC          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AMP             reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 261 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 447

    (262) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RFPAREN         reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LFPAREN         reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCOLON          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    COMPLEX         reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IMAGINARY       reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ATOMIC          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NORETURN        reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ALIGNAS         reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INC_OP          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEC_OP          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ALIGNOF         reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AMP             reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    I_CONSTANT      reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    F_CONSTANT      reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FUNC_NAME       reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GENERIC         reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 262 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 448

    (263) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SCOLON
    (96) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 466
    COMMA           shift and go to state 272


state 449

    (264) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 154
    statement                      shift and go to state 467
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 450

    (265) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (96) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 468
    COMMA           shift and go to state 272


state 451

    (266) iteration_statement -> FOR LPAREN declaration expression_statement RPAREN . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 154
    statement                      shift and go to state 469
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    expression                     shift and go to state 161
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 452

    (267) iteration_statement -> FOR LPAREN declaration expression_statement expression . RPAREN statement
    (96) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 470
    COMMA           shift and go to state 272


state 453

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN . LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN

    LPAREN          shift and go to state 471


state 454

    (235) initializer_list -> initializer_list COMMA . designation initializer
    (236) initializer_list -> initializer_list COMMA . initializer
    (237) designation -> . designator_list EQUALS
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (238) designator_list -> . designator
    (239) designator_list -> . designator_list designator
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (240) designator -> . RSQUARE constant_expression LSQUARE
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LFPAREN         shift and go to state 141
    RSQUARE         shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    designation                    shift and go to state 412
    initializer                    shift and go to state 413
    designator_list                shift and go to state 250
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 251
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 455

    (23) generic_assoc_list -> generic_assoc_list COMMA . generic_association
    (24) generic_association -> . type_name COLON assignment_expression
    (25) generic_association -> . DEFAULT COLON assignment_expression
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    DEFAULT         shift and go to state 431
    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    generic_association            shift and go to state 472
    type_name                      shift and go to state 430
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 456

    (21) generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .

    RSQUARE         reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LPAREN          reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DOT             reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PTR_OP          reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    INC_OP          reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DEC_OP          reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    TIMES           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DIVIDES         reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MODULUS         reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    PLUS            reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MINUS           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LEFT_OP         reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RIGHT_OP        reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LT_OP           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    GT_OP           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LE_OP           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    GE_OP           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    EQ_OP           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    NE_OP           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AMP             reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    XOR             reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR              reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND_OP          reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    QMARK           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR_OP           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    COMMA           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RPAREN          reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    EQUALS          reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MUL_ASSIGN      reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    DIV_ASSIGN      reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    MOD_ASSIGN      reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    ADD_ASSIGN      reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    SUB_ASSIGN      reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LEFT_ASSIGN     reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RIGHT_ASSIGN    reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    AND_ASSIGN      reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    XOR_ASSIGN      reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    OR_ASSIGN       reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    SCOLON          reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    LSQUARE         reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    RFPAREN         reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)
    COLON           reduce using rule 21 (generic_selection -> GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN .)


state 457

    (24) generic_association -> type_name COLON . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 473
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 458

    (25) generic_association -> DEFAULT COLON . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    assignment_expression          shift and go to state 474
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 459

    (220) direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression . LSQUARE

    LSQUARE         shift and go to state 475


state 460

    (221) direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE .

    RSQUARE         reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    LPAREN          reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    RPAREN          reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    COLON           reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE .)
    COMMA           reduce using rule 221 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE .)


state 461

    (222) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .

    RSQUARE         reduce using rule 222 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    LPAREN          reduce using rule 222 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    RPAREN          reduce using rule 222 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    COLON           reduce using rule 222 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)
    COMMA           reduce using rule 222 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE .)


state 462

    (223) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression . LSQUARE

    LSQUARE         shift and go to state 476


state 463

    (212) direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .

    RSQUARE         reduce using rule 212 (direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    LPAREN          reduce using rule 212 (direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    RPAREN          reduce using rule 212 (direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    COLON           reduce using rule 212 (direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    COMMA           reduce using rule 212 (direct_abstract_declarator -> RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)


state 464

    (214) direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .

    RSQUARE         reduce using rule 214 (direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    LPAREN          reduce using rule 214 (direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    RPAREN          reduce using rule 214 (direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    COLON           reduce using rule 214 (direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    COMMA           reduce using rule 214 (direct_abstract_declarator -> RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)


state 465

    (259) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression                     shift and go to state 161
    statement                      shift and go to state 477
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    expression_statement           shift and go to state 154
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 466

    (263) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SCOLON

    SCOLON          shift and go to state 478


state 467

    (264) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RFPAREN         reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STATIC_ASSERT   reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LFPAREN         reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SCOLON          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GOTO            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TYPEDEF         reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    EXTERN          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STATIC          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    THREAD_LOCAL    reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AUTO            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    REGISTER        reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOID            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHAR            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SHORT           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INT             reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LONG            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FLOAT           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIGNED          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BOOL            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    COMPLEX         reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IMAGINARY       reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONST           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    VOLATILE        reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ATOMIC          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NORETURN        reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ALIGNAS         reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ENUM            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRUCT          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    UNION           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INC_OP          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEC_OP          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ALIGNOF         reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AMP             reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TIMES           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TILDE           reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NOT             reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    NUMBER          reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    I_CONSTANT      reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    F_CONSTANT      reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRING_LITERAL  reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FUNC_NAME       reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GENERIC         reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 264 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 468

    (265) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 154
    expression                     shift and go to state 161
    statement                      shift and go to state 479
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 469

    (266) iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .

    RFPAREN         reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STATIC_ASSERT   reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IDENTIFIER      reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CASE            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LFPAREN         reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SCOLON          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IF              reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SWITCH          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    WHILE           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DO              reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FOR             reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    GOTO            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    BREAK           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    RETURN          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TYPEDEF         reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    EXTERN          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STATIC          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    THREAD_LOCAL    reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    AUTO            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    REGISTER        reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    VOID            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CHAR            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SHORT           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INT             reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LONG            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FLOAT           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DOUBLE          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SIGNED          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    UNSIGNED        reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    BOOL            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    COMPLEX         reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    IMAGINARY       reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    CONST           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    VOLATILE        reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ATOMIC          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NORETURN        reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ALIGNAS         reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ENUM            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STRUCT          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    UNION           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    INC_OP          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    DEC_OP          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ALIGNOF         reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    LPAREN          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    AMP             reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TIMES           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    PLUS            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    MINUS           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    TILDE           reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NOT             reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    NUMBER          reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    I_CONSTANT      reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    F_CONSTANT      reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    STRING_LITERAL  reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    FUNC_NAME       reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    GENERIC         reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)
    ELSE            reduce using rule 266 (iteration_statement -> FOR LPAREN declaration expression_statement RPAREN statement .)


state 470

    (267) iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN . statement
    (242) statement -> . labeled_statement
    (243) statement -> . compound_statement
    (244) statement -> . expression_statement
    (245) statement -> . selection_statement
    (246) statement -> . iteration_statement
    (247) statement -> . jump_statement
    (248) labeled_statement -> . IDENTIFIER COLON statement
    (249) labeled_statement -> . CASE constant_expression COLON statement
    (250) labeled_statement -> . DEFAULT COLON statement
    (251) compound_statement -> . LFPAREN RFPAREN
    (252) compound_statement -> . LFPAREN block_item_list RFPAREN
    (257) expression_statement -> . SCOLON
    (258) expression_statement -> . expression SCOLON
    (259) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (260) selection_statement -> . IF LPAREN expression RPAREN statement
    (261) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (262) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (263) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SCOLON
    (264) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (265) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (266) iteration_statement -> . FOR LPAREN declaration expression_statement RPAREN statement
    (267) iteration_statement -> . FOR LPAREN declaration expression_statement expression RPAREN statement
    (268) jump_statement -> . GOTO IDENTIFIER SCOLON
    (269) jump_statement -> . CONTINUE SCOLON
    (270) jump_statement -> . BREAK SCOLON
    (271) jump_statement -> . RETURN SCOLON
    (272) jump_statement -> . RETURN expression SCOLON
    (95) expression -> . assignment_expression
    (96) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    IDENTIFIER      shift and go to state 158
    CASE            shift and go to state 159
    DEFAULT         shift and go to state 160
    LFPAREN         shift and go to state 71
    SCOLON          shift and go to state 151
    IF              shift and go to state 162
    SWITCH          shift and go to state 163
    WHILE           shift and go to state 164
    DO              shift and go to state 165
    FOR             shift and go to state 166
    GOTO            shift and go to state 167
    CONTINUE        shift and go to state 168
    BREAK           shift and go to state 169
    RETURN          shift and go to state 170
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    expression_statement           shift and go to state 154
    expression                     shift and go to state 161
    statement                      shift and go to state 480
    labeled_statement              shift and go to state 152
    compound_statement             shift and go to state 153
    selection_statement            shift and go to state 155
    iteration_statement            shift and go to state 156
    jump_statement                 shift and go to state 157
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 471

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN . type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (204) type_name -> . specifier_qualifier_list abstract_declarator
    (205) type_name -> . specifier_qualifier_list
    (147) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (148) specifier_qualifier_list -> . type_specifier
    (149) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (150) specifier_qualifier_list -> . type_qualifier
    (122) type_specifier -> . VOID
    (123) type_specifier -> . CHAR
    (124) type_specifier -> . SHORT
    (125) type_specifier -> . INT
    (126) type_specifier -> . LONG
    (127) type_specifier -> . FLOAT
    (128) type_specifier -> . DOUBLE
    (129) type_specifier -> . SIGNED
    (130) type_specifier -> . UNSIGNED
    (131) type_specifier -> . BOOL
    (132) type_specifier -> . COMPLEX
    (133) type_specifier -> . IMAGINARY
    (134) type_specifier -> . atomic_type_specifier
    (135) type_specifier -> . struct_or_union_specifier
    (136) type_specifier -> . enum_specifier
    (166) type_qualifier -> . CONST
    (167) type_qualifier -> . VOLATILE
    (168) type_qualifier -> . ATOMIC
    (165) atomic_type_specifier -> . ATOMIC LPAREN type_name RPAREN
    (137) struct_or_union_specifier -> . struct_or_union LFPAREN struct_declaration_list RFPAREN
    (138) struct_or_union_specifier -> . struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN
    (139) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (156) enum_specifier -> . ENUM LFPAREN enumerator_list RFPAREN
    (157) enum_specifier -> . ENUM LFPAREN enumerator_list COMMA RFPAREN
    (158) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN
    (159) enum_specifier -> . ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN
    (160) enum_specifier -> . ENUM IDENTIFIER
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    VOID            shift and go to state 20
    CHAR            shift and go to state 21
    SHORT           shift and go to state 22
    INT             shift and go to state 23
    LONG            shift and go to state 24
    FLOAT           shift and go to state 25
    DOUBLE          shift and go to state 26
    SIGNED          shift and go to state 27
    UNSIGNED        shift and go to state 28
    BOOL            shift and go to state 29
    COMPLEX         shift and go to state 30
    IMAGINARY       shift and go to state 31
    CONST           shift and go to state 35
    VOLATILE        shift and go to state 36
    ATOMIC          shift and go to state 37
    ENUM            shift and go to state 41
    STRUCT          shift and go to state 42
    UNION           shift and go to state 43

    type_name                      shift and go to state 481
    specifier_qualifier_list       shift and go to state 122
    type_specifier                 shift and go to state 123
    type_qualifier                 shift and go to state 124
    atomic_type_specifier          shift and go to state 32
    struct_or_union_specifier      shift and go to state 33
    enum_specifier                 shift and go to state 34
    struct_or_union                shift and go to state 40

state 472

    (23) generic_assoc_list -> generic_assoc_list COMMA generic_association .

    RPAREN          reduce using rule 23 (generic_assoc_list -> generic_assoc_list COMMA generic_association .)
    COMMA           reduce using rule 23 (generic_assoc_list -> generic_assoc_list COMMA generic_association .)


state 473

    (24) generic_association -> type_name COLON assignment_expression .

    RPAREN          reduce using rule 24 (generic_association -> type_name COLON assignment_expression .)
    COMMA           reduce using rule 24 (generic_association -> type_name COLON assignment_expression .)


state 474

    (25) generic_association -> DEFAULT COLON assignment_expression .

    RPAREN          reduce using rule 25 (generic_association -> DEFAULT COLON assignment_expression .)
    COMMA           reduce using rule 25 (generic_association -> DEFAULT COLON assignment_expression .)


state 475

    (220) direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .

    RSQUARE         reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    LPAREN          reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    RPAREN          reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    COLON           reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)
    COMMA           reduce using rule 220 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE .)


state 476

    (223) direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .

    RSQUARE         reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    LPAREN          reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    RPAREN          reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    COLON           reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)
    COMMA           reduce using rule 223 (direct_abstract_declarator -> direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE .)


state 477

    (259) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RFPAREN         reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC_ASSERT   reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LFPAREN         reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCOLON          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    THREAD_LOCAL    reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    REGISTER        reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOL            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    COMPLEX         reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IMAGINARY       reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ATOMIC          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NORETURN        reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ALIGNAS         reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INC_OP          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEC_OP          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ALIGNOF         reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AMP             reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TILDE           reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    I_CONSTANT      reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    F_CONSTANT      reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNC_NAME       reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GENERIC         reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 259 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 478

    (263) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .

    RFPAREN         reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    STATIC_ASSERT   reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    IDENTIFIER      reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    CASE            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    DEFAULT         reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    LFPAREN         reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    SCOLON          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    IF              reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    SWITCH          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    WHILE           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    DO              reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    FOR             reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    GOTO            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    CONTINUE        reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    BREAK           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    RETURN          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    TYPEDEF         reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    EXTERN          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    STATIC          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    THREAD_LOCAL    reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    AUTO            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    REGISTER        reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    VOID            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    CHAR            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    SHORT           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    INT             reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    LONG            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    FLOAT           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    DOUBLE          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    SIGNED          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    UNSIGNED        reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    BOOL            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    COMPLEX         reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    IMAGINARY       reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    CONST           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    VOLATILE        reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    ATOMIC          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    NORETURN        reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    ALIGNAS         reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    ENUM            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    STRUCT          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    UNION           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    INC_OP          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    DEC_OP          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    SIZEOF          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    ALIGNOF         reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    LPAREN          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    AMP             reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    TIMES           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    PLUS            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    MINUS           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    TILDE           reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    NOT             reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    NUMBER          reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    I_CONSTANT      reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    F_CONSTANT      reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    STRING_LITERAL  reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    FUNC_NAME       reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    GENERIC         reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)
    ELSE            reduce using rule 263 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SCOLON .)


state 479

    (265) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RFPAREN         reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LFPAREN         reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SCOLON          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TYPEDEF         reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EXTERN          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STATIC          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AUTO            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    REGISTER        reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOID            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT             reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LONG            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    COMPLEX         reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IMAGINARY       reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONST           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    VOLATILE        reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ATOMIC          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NORETURN        reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ALIGNAS         reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ENUM            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRUCT          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    UNION           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INC_OP          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEC_OP          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ALIGNOF         reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AMP             reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TILDE           reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NOT             reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    NUMBER          reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    I_CONSTANT      reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    F_CONSTANT      reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FUNC_NAME       reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GENERIC         reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 265 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 480

    (267) iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .

    RFPAREN         reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STATIC_ASSERT   reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IDENTIFIER      reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CASE            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LFPAREN         reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SCOLON          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IF              reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DO              reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FOR             reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TYPEDEF         reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    EXTERN          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STATIC          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    THREAD_LOCAL    reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    AUTO            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    REGISTER        reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    VOID            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SHORT           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INT             reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LONG            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DOUBLE          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SIGNED          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    UNSIGNED        reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    BOOL            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    COMPLEX         reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    IMAGINARY       reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    CONST           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    VOLATILE        reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ATOMIC          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NORETURN        reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ALIGNAS         reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ENUM            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STRUCT          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    UNION           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    INC_OP          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    DEC_OP          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ALIGNOF         reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    AMP             reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    TILDE           reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NOT             reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    NUMBER          reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    I_CONSTANT      reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    F_CONSTANT      reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    FUNC_NAME       reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    GENERIC         reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 267 (iteration_statement -> FOR LPAREN declaration expression_statement expression RPAREN statement .)


state 481

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name . RPAREN LFPAREN initializer_list COMMA RFPAREN

    RPAREN          shift and go to state 482


state 482

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN . LFPAREN initializer_list COMMA RFPAREN

    LFPAREN         shift and go to state 483


state 483

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN . initializer_list COMMA RFPAREN
    (233) initializer_list -> . designation initializer
    (234) initializer_list -> . initializer
    (235) initializer_list -> . initializer_list COMMA designation initializer
    (236) initializer_list -> . initializer_list COMMA initializer
    (237) designation -> . designator_list EQUALS
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (238) designator_list -> . designator
    (239) designator_list -> . designator_list designator
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (240) designator -> . RSQUARE constant_expression LSQUARE
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LFPAREN         shift and go to state 141
    RSQUARE         shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    initializer_list               shift and go to state 484
    designation                    shift and go to state 248
    initializer                    shift and go to state 249
    designator_list                shift and go to state 250
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 251
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 484

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list . COMMA RFPAREN
    (235) initializer_list -> initializer_list . COMMA designation initializer
    (236) initializer_list -> initializer_list . COMMA initializer

    COMMA           shift and go to state 485


state 485

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA . RFPAREN
    (235) initializer_list -> initializer_list COMMA . designation initializer
    (236) initializer_list -> initializer_list COMMA . initializer
    (237) designation -> . designator_list EQUALS
    (230) initializer -> . LFPAREN initializer_list RFPAREN
    (231) initializer -> . LFPAREN initializer_list COMMA RFPAREN
    (232) initializer -> . assignment_expression
    (238) designator_list -> . designator
    (239) designator_list -> . designator_list designator
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression assignment_oper assignment_expression
    (240) designator -> . RSQUARE constant_expression LSQUARE
    (80) conditional_expression -> . logical_or_expression
    (81) conditional_expression -> . logical_or_expression QMARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . INC_OP unary_expression
    (39) unary_expression -> . DEC_OP unary_expression
    (40) unary_expression -> . unary_oper cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (43) unary_expression -> . ALIGNOF LPAREN type_name RPAREN
    (78) logical_or_expression -> . logical_and_expression
    (79) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (26) postfix_expression -> . primary_expression
    (27) postfix_expression -> . postfix_expression RSQUARE expression LSQUARE
    (28) postfix_expression -> . postfix_expression LPAREN RPAREN
    (29) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (30) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (31) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (32) postfix_expression -> . postfix_expression INC_OP
    (33) postfix_expression -> . postfix_expression DEC_OP
    (34) postfix_expression -> . LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
    (44) unary_oper -> . AMP
    (45) unary_oper -> . TIMES
    (46) unary_oper -> . PLUS
    (47) unary_oper -> . MINUS
    (48) unary_oper -> . TILDE
    (49) unary_oper -> . NOT
    (76) logical_and_expression -> . inclusive_or_expression
    (77) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . constant
    (12) primary_expression -> . string
    (13) primary_expression -> . LPAREN expression RPAREN
    (14) primary_expression -> . generic_selection
    (15) primary_expression -> . NUMBER
    (74) inclusive_or_expression -> . exclusive_or_expression
    (75) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (16) constant -> . I_CONSTANT
    (17) constant -> . F_CONSTANT
    (19) string -> . STRING_LITERAL
    (20) string -> . FUNC_NAME
    (21) generic_selection -> . GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
    (72) exclusive_or_expression -> . and_expression
    (73) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (70) and_expression -> . equality_expression
    (71) and_expression -> . and_expression AMP equality_expression
    (67) equality_expression -> . relational_expression
    (68) equality_expression -> . equality_expression EQ_OP relational_expression
    (69) equality_expression -> . equality_expression NE_OP relational_expression
    (62) relational_expression -> . shift_expression
    (63) relational_expression -> . relational_expression LT_OP shift_expression
    (64) relational_expression -> . relational_expression GT_OP shift_expression
    (65) relational_expression -> . relational_expression LE_OP shift_expression
    (66) relational_expression -> . relational_expression GE_OP shift_expression
    (59) shift_expression -> . additive_expression
    (60) shift_expression -> . shift_expression LEFT_OP additive_expression
    (61) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (56) additive_expression -> . multiplicative_expression
    (57) additive_expression -> . additive_expression PLUS multiplicative_expression
    (58) additive_expression -> . additive_expression MINUS multiplicative_expression
    (52) multiplicative_expression -> . cast_expression
    (53) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (54) multiplicative_expression -> . multiplicative_expression DIVIDES cast_expression
    (55) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (50) cast_expression -> . unary_expression
    (51) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RFPAREN         shift and go to state 486
    LFPAREN         shift and go to state 141
    RSQUARE         shift and go to state 252
    INC_OP          shift and go to state 104
    DEC_OP          shift and go to state 105
    SIZEOF          shift and go to state 107
    ALIGNOF         shift and go to state 108
    LPAREN          shift and go to state 145
    AMP             shift and go to state 93
    TIMES           shift and go to state 101
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TILDE           shift and go to state 111
    NOT             shift and go to state 112
    IDENTIFIER      shift and go to state 110
    NUMBER          shift and go to state 116
    I_CONSTANT      shift and go to state 117
    F_CONSTANT      shift and go to state 118
    STRING_LITERAL  shift and go to state 85
    FUNC_NAME       shift and go to state 119
    GENERIC         shift and go to state 120

    designation                    shift and go to state 412
    initializer                    shift and go to state 413
    designator_list                shift and go to state 250
    assignment_expression          shift and go to state 142
    designator                     shift and go to state 251
    conditional_expression         shift and go to state 143
    unary_expression               shift and go to state 144
    logical_or_expression          shift and go to state 87
    postfix_expression             shift and go to state 103
    unary_oper                     shift and go to state 106
    cast_expression                shift and go to state 100
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 109
    inclusive_or_expression        shift and go to state 89
    constant                       shift and go to state 113
    string                         shift and go to state 114
    generic_selection              shift and go to state 115
    exclusive_or_expression        shift and go to state 90
    and_expression                 shift and go to state 91
    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 94
    shift_expression               shift and go to state 95
    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 97

state 486

    (34) postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .

    RSQUARE         reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    LPAREN          reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    DOT             reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    PTR_OP          reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    INC_OP          reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    DEC_OP          reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    TIMES           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    DIVIDES         reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    MODULUS         reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    PLUS            reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    MINUS           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    LEFT_OP         reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    RIGHT_OP        reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    LT_OP           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    GT_OP           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    LE_OP           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    GE_OP           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    EQ_OP           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    NE_OP           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    AMP             reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    XOR             reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    OR              reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    AND_OP          reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    QMARK           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    OR_OP           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    COMMA           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    RPAREN          reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    EQUALS          reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    MUL_ASSIGN      reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    DIV_ASSIGN      reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    MOD_ASSIGN      reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    ADD_ASSIGN      reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    SUB_ASSIGN      reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    LEFT_ASSIGN     reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    RIGHT_ASSIGN    reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    AND_ASSIGN      reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    XOR_ASSIGN      reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    OR_ASSIGN       reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    SCOLON          reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    LSQUARE         reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    RFPAREN         reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)
    COLON           reduce using rule 34 (postfix_expression -> LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 37 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 49 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 71 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 71 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 74 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 76 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 147 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 147 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 147 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 147 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 229 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 229 resolved as shift
WARNING: shift/reduce conflict for RSQUARE in state 229 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 229 resolved as shift
WARNING: shift/reduce conflict for SCOLON in state 277 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 277 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 277 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 277 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 298 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 298 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 298 resolved as shift
WARNING: shift/reduce conflict for RSQUARE in state 298 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 298 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 334 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 445 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (declaration_specifiers -> storage_class_specifier)
WARNING: rejected rule (declaration_specifiers -> <empty>) in state 8
WARNING: reduce/reduce conflict in state 9 resolved using rule (declaration_specifiers -> type_specifier)
WARNING: rejected rule (declaration_specifiers -> <empty>) in state 9
WARNING: reduce/reduce conflict in state 10 resolved using rule (declaration_specifiers -> type_qualifier)
WARNING: rejected rule (declaration_specifiers -> <empty>) in state 10
WARNING: reduce/reduce conflict in state 11 resolved using rule (declaration_specifiers -> function_specifier)
WARNING: rejected rule (declaration_specifiers -> <empty>) in state 11
WARNING: reduce/reduce conflict in state 12 resolved using rule (declaration_specifiers -> alignment_specifier)
WARNING: rejected rule (declaration_specifiers -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 45 resolved using rule (declaration_specifiers -> <empty>)
WARNING: rejected rule (init_declarator -> declarator) in state 45
